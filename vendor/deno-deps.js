// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

const encoder = new TextEncoder();
function getTypeName(value) {
    const type = typeof value;
    if (type !== "object") {
        return type;
    } else if (value === null) {
        return "null";
    } else {
        return value?.constructor?.name ?? "object";
    }
}
function validateBinaryLike(source) {
    if (typeof source === "string") {
        return encoder.encode(source);
    } else if (source instanceof Uint8Array) {
        return source;
    } else if (source instanceof ArrayBuffer) {
        return new Uint8Array(source);
    }
    throw new TypeError(`The input must be a Uint8Array, a string, or an ArrayBuffer. Received a value of the type ${getTypeName(source)}.`);
}
const hexTable = new TextEncoder().encode("0123456789abcdef");
new TextEncoder();
const textDecoder = new TextDecoder();
function encodeHex(src) {
    const u8 = validateBinaryLike(src);
    const dst = new Uint8Array(u8.length * 2);
    for(let i = 0; i < dst.length; i++){
        const v = u8[i];
        dst[i * 2] = hexTable[v >> 4];
        dst[i * 2 + 1] = hexTable[v & 0x0f];
    }
    return textDecoder.decode(dst);
}
function decodeBase64(b64) {
    const binString = atob(b64);
    const size = binString.length;
    const bytes = new Uint8Array(size);
    for(let i = 0; i < size; i++){
        bytes[i] = binString.charCodeAt(i);
    }
    return bytes;
}
const MaxUInt64 = 18446744073709551615n;
const REST = 0x7f;
const SHIFT = 7;
function decode(buf, offset = 0) {
    for(let i = offset, len = Math.min(buf.length, offset + 10), shift = 0, decoded = 0n; i < len; i += 1, shift += SHIFT){
        let __byte = buf[i];
        decoded += BigInt((__byte & REST) * Math.pow(2, shift));
        if (!(__byte & 0x80) && decoded > MaxUInt64) {
            throw new RangeError("overflow varint");
        }
        if (!(__byte & 0x80)) return [
            decoded,
            i + 1
        ];
    }
    throw new RangeError("malformed or overflow varint");
}
class AssertionError extends Error {
    name = "AssertionError";
    constructor(message){
        super(message);
    }
}
function assert(expr, msg = "") {
    if (!expr) {
        throw new AssertionError(msg);
    }
}
class RetryError extends Error {
    constructor(cause, attempts){
        super(`Retrying exceeded the maxAttempts (${attempts}).`);
        this.name = "RetryError";
        this.cause = cause;
    }
}
const defaultRetryOptions = {
    multiplier: 2,
    maxTimeout: 60000,
    maxAttempts: 5,
    minTimeout: 1000,
    jitter: 1
};
async function retry(fn, opts) {
    const options = {
        ...defaultRetryOptions,
        ...opts
    };
    assert(options.maxTimeout >= 0, "maxTimeout is less than 0");
    assert(options.minTimeout <= options.maxTimeout, "minTimeout is greater than maxTimeout");
    assert(options.jitter <= 1, "jitter is greater than 1");
    let attempt = 0;
    while(true){
        try {
            return await fn();
        } catch (error) {
            if (attempt + 1 >= options.maxAttempts) {
                throw new RetryError(error, options.maxAttempts);
            }
            const timeout = _exponentialBackoffWithJitter(options.maxTimeout, options.minTimeout, attempt, options.multiplier, options.jitter);
            await new Promise((r)=>setTimeout(r, timeout));
        }
        attempt++;
    }
}
function _exponentialBackoffWithJitter(cap, base, attempt, multiplier, jitter) {
    const exp = Math.min(cap, base * multiplier ** attempt);
    return (1 - jitter * Math.random()) * exp;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path, base) {
            return commonjsRequire(path, base === void 0 || base === null ? module.path : base);
        }
    }, fn(module, module.exports), module.exports;
}
function getDefaultExportFromNamespaceIfNotNamed(n) {
    return n && Object.prototype.hasOwnProperty.call(n, "default") && Object.keys(n).length === 1 ? n["default"] : n;
}
function commonjsRequire() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var _nodeResolve_empty = {};
var _nodeResolve_empty$1 = Object.freeze({
    __proto__: null,
    default: _nodeResolve_empty
});
var require$$0 = getDefaultExportFromNamespaceIfNotNamed(_nodeResolve_empty$1);
var bn = createCommonjsModule(function(module) {
    (function(module2, exports) {
        function assert(val, msg) {
            if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
        }
        function BN2(number, base, endian) {
            if (BN2.isBN(number)) {
                return number;
            }
            this.negative = 0;
            this.words = null;
            this.length = 0;
            this.red = null;
            if (number !== null) {
                if (base === "le" || base === "be") {
                    endian = base;
                    base = 10;
                }
                this._init(number || 0, base || 10, endian || "be");
            }
        }
        if (typeof module2 === "object") {
            module2.exports = BN2;
        } else {
            exports.BN = BN2;
        }
        BN2.BN = BN2;
        BN2.wordSize = 26;
        var Buffer;
        try {
            if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
                Buffer = window.Buffer;
            } else {
                Buffer = require$$0.Buffer;
            }
        } catch (e) {}
        BN2.isBN = function isBN(num) {
            if (num instanceof BN2) {
                return true;
            }
            return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
        };
        BN2.max = function max(left, right) {
            if (left.cmp(right) > 0) return left;
            return right;
        };
        BN2.min = function min(left, right) {
            if (left.cmp(right) < 0) return left;
            return right;
        };
        BN2.prototype._init = function init(number, base, endian) {
            if (typeof number === "number") {
                return this._initNumber(number, base, endian);
            }
            if (typeof number === "object") {
                return this._initArray(number, base, endian);
            }
            if (base === "hex") {
                base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);
            number = number.toString().replace(/\s+/g, "");
            var start = 0;
            if (number[0] === "-") {
                start++;
                this.negative = 1;
            }
            if (start < number.length) {
                if (base === 16) {
                    this._parseHex(number, start, endian);
                } else {
                    this._parseBase(number, base, start);
                    if (endian === "le") {
                        this._initArray(this.toArray(), base, endian);
                    }
                }
            }
        };
        BN2.prototype._initNumber = function _initNumber(number, base, endian) {
            if (number < 0) {
                this.negative = 1;
                number = -number;
            }
            if (number < 67108864) {
                this.words = [
                    number & 67108863
                ];
                this.length = 1;
            } else if (number < 4503599627370496) {
                this.words = [
                    number & 67108863,
                    number / 67108864 & 67108863
                ];
                this.length = 2;
            } else {
                assert(number < 9007199254740992);
                this.words = [
                    number & 67108863,
                    number / 67108864 & 67108863,
                    1
                ];
                this.length = 3;
            }
            if (endian !== "le") return;
            this._initArray(this.toArray(), base, endian);
        };
        BN2.prototype._initArray = function _initArray(number, base, endian) {
            assert(typeof number.length === "number");
            if (number.length <= 0) {
                this.words = [
                    0
                ];
                this.length = 1;
                return this;
            }
            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for(var i = 0; i < this.length; i++){
                this.words[i] = 0;
            }
            var j, w;
            var off = 0;
            if (endian === "be") {
                for(i = number.length - 1, j = 0; i >= 0; i -= 3){
                    w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                    this.words[j] |= w << off & 67108863;
                    this.words[j + 1] = w >>> 26 - off & 67108863;
                    off += 24;
                    if (off >= 26) {
                        off -= 26;
                        j++;
                    }
                }
            } else if (endian === "le") {
                for(i = 0, j = 0; i < number.length; i += 3){
                    w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                    this.words[j] |= w << off & 67108863;
                    this.words[j + 1] = w >>> 26 - off & 67108863;
                    off += 24;
                    if (off >= 26) {
                        off -= 26;
                        j++;
                    }
                }
            }
            return this._strip();
        };
        function parseHex4Bits(string, index) {
            var c = string.charCodeAt(index);
            if (c >= 48 && c <= 57) {
                return c - 48;
            } else if (c >= 65 && c <= 70) {
                return c - 55;
            } else if (c >= 97 && c <= 102) {
                return c - 87;
            } else {
                assert(false, "Invalid character in " + string);
            }
        }
        function parseHexByte(string, lowerBound, index) {
            var r = parseHex4Bits(string, index);
            if (index - 1 >= lowerBound) {
                r |= parseHex4Bits(string, index - 1) << 4;
            }
            return r;
        }
        BN2.prototype._parseHex = function _parseHex(number, start, endian) {
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for(var i = 0; i < this.length; i++){
                this.words[i] = 0;
            }
            var off = 0;
            var j = 0;
            var w;
            if (endian === "be") {
                for(i = number.length - 1; i >= start; i -= 2){
                    w = parseHexByte(number, start, i) << off;
                    this.words[j] |= w & 67108863;
                    if (off >= 18) {
                        off -= 18;
                        j += 1;
                        this.words[j] |= w >>> 26;
                    } else {
                        off += 8;
                    }
                }
            } else {
                var parseLength = number.length - start;
                for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                    w = parseHexByte(number, start, i) << off;
                    this.words[j] |= w & 67108863;
                    if (off >= 18) {
                        off -= 18;
                        j += 1;
                        this.words[j] |= w >>> 26;
                    } else {
                        off += 8;
                    }
                }
            }
            this._strip();
        };
        function parseBase(str, start, end, mul) {
            var r = 0;
            var b = 0;
            var len = Math.min(str.length, end);
            for(var i = start; i < len; i++){
                var c = str.charCodeAt(i) - 48;
                r *= mul;
                if (c >= 49) {
                    b = c - 49 + 10;
                } else if (c >= 17) {
                    b = c - 17 + 10;
                } else {
                    b = c;
                }
                assert(c >= 0 && b < mul, "Invalid character");
                r += b;
            }
            return r;
        }
        BN2.prototype._parseBase = function _parseBase(number, base, start) {
            this.words = [
                0
            ];
            this.length = 1;
            for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base){
                limbLen++;
            }
            limbLen--;
            limbPow = limbPow / base | 0;
            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;
            var word = 0;
            for(var i = start; i < end; i += limbLen){
                word = parseBase(number, i, i + limbLen, base);
                this.imuln(limbPow);
                if (this.words[0] + word < 67108864) {
                    this.words[0] += word;
                } else {
                    this._iaddn(word);
                }
            }
            if (mod !== 0) {
                var pow = 1;
                word = parseBase(number, i, number.length, base);
                for(i = 0; i < mod; i++){
                    pow *= base;
                }
                this.imuln(pow);
                if (this.words[0] + word < 67108864) {
                    this.words[0] += word;
                } else {
                    this._iaddn(word);
                }
            }
            this._strip();
        };
        BN2.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for(var i = 0; i < this.length; i++){
                dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
        };
        function move(dest, src) {
            dest.words = src.words;
            dest.length = src.length;
            dest.negative = src.negative;
            dest.red = src.red;
        }
        BN2.prototype._move = function _move(dest) {
            move(dest, this);
        };
        BN2.prototype.clone = function clone() {
            var r = new BN2(null);
            this.copy(r);
            return r;
        };
        BN2.prototype._expand = function _expand(size) {
            while(this.length < size){
                this.words[this.length++] = 0;
            }
            return this;
        };
        BN2.prototype._strip = function strip() {
            while(this.length > 1 && this.words[this.length - 1] === 0){
                this.length--;
            }
            return this._normSign();
        };
        BN2.prototype._normSign = function _normSign() {
            if (this.length === 1 && this.words[0] === 0) {
                this.negative = 0;
            }
            return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
            try {
                BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
            } catch (e) {
                BN2.prototype.inspect = inspect;
            }
        } else {
            BN2.prototype.inspect = inspect;
        }
        function inspect() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros = [
            "",
            "0",
            "00",
            "000",
            "0000",
            "00000",
            "000000",
            "0000000",
            "00000000",
            "000000000",
            "0000000000",
            "00000000000",
            "000000000000",
            "0000000000000",
            "00000000000000",
            "000000000000000",
            "0000000000000000",
            "00000000000000000",
            "000000000000000000",
            "0000000000000000000",
            "00000000000000000000",
            "000000000000000000000",
            "0000000000000000000000",
            "00000000000000000000000",
            "000000000000000000000000",
            "0000000000000000000000000"
        ];
        var groupSizes = [
            0,
            0,
            25,
            16,
            12,
            11,
            10,
            9,
            8,
            8,
            7,
            7,
            7,
            7,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
        ];
        var groupBases = [
            0,
            0,
            33554432,
            43046721,
            16777216,
            48828125,
            60466176,
            40353607,
            16777216,
            43046721,
            1e7,
            19487171,
            35831808,
            62748517,
            7529536,
            11390625,
            16777216,
            24137569,
            34012224,
            47045881,
            64e6,
            4084101,
            5153632,
            6436343,
            7962624,
            9765625,
            11881376,
            14348907,
            17210368,
            20511149,
            243e5,
            28629151,
            33554432,
            39135393,
            45435424,
            52521875,
            60466176
        ];
        BN2.prototype.toString = function toString(base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;
            var out;
            if (base === 16 || base === "hex") {
                out = "";
                var off = 0;
                var carry = 0;
                for(var i = 0; i < this.length; i++){
                    var w = this.words[i];
                    var word = ((w << off | carry) & 16777215).toString(16);
                    carry = w >>> 24 - off & 16777215;
                    off += 2;
                    if (off >= 26) {
                        off -= 26;
                        i--;
                    }
                    if (carry !== 0 || i !== this.length - 1) {
                        out = zeros[6 - word.length] + word + out;
                    } else {
                        out = word + out;
                    }
                }
                if (carry !== 0) {
                    out = carry.toString(16) + out;
                }
                while(out.length % padding !== 0){
                    out = "0" + out;
                }
                if (this.negative !== 0) {
                    out = "-" + out;
                }
                return out;
            }
            if (base === (base | 0) && base >= 2 && base <= 36) {
                var groupSize = groupSizes[base];
                var groupBase = groupBases[base];
                out = "";
                var c = this.clone();
                c.negative = 0;
                while(!c.isZero()){
                    var r = c.modrn(groupBase).toString(base);
                    c = c.idivn(groupBase);
                    if (!c.isZero()) {
                        out = zeros[groupSize - r.length] + r + out;
                    } else {
                        out = r + out;
                    }
                }
                if (this.isZero()) {
                    out = "0" + out;
                }
                while(out.length % padding !== 0){
                    out = "0" + out;
                }
                if (this.negative !== 0) {
                    out = "-" + out;
                }
                return out;
            }
            assert(false, "Base should be between 2 and 36");
        };
        BN2.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
                ret += this.words[1] * 67108864;
            } else if (this.length === 3 && this.words[2] === 1) {
                ret += 4503599627370496 + this.words[1] * 67108864;
            } else if (this.length > 2) {
                assert(false, "Number can only safely store up to 53 bits");
            }
            return this.negative !== 0 ? -ret : ret;
        };
        BN2.prototype.toJSON = function toJSON() {
            return this.toString(16, 2);
        };
        if (Buffer) {
            BN2.prototype.toBuffer = function toBuffer(endian, length) {
                return this.toArrayLike(Buffer, endian, length);
            };
        }
        BN2.prototype.toArray = function toArray(endian, length) {
            return this.toArrayLike(Array, endian, length);
        };
        var allocate = function allocate2(ArrayType, size) {
            if (ArrayType.allocUnsafe) {
                return ArrayType.allocUnsafe(size);
            }
            return new ArrayType(size);
        };
        BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            this._strip();
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, "byte array longer than desired length");
            assert(reqLength > 0, "Requested array length <= 0");
            var res = allocate(ArrayType, reqLength);
            var postfix = endian === "le" ? "LE" : "BE";
            this["_toArrayLike" + postfix](res, byteLength);
            return res;
        };
        BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
            var position = 0;
            var carry = 0;
            for(var i = 0, shift = 0; i < this.length; i++){
                var word = this.words[i] << shift | carry;
                res[position++] = word & 255;
                if (position < res.length) {
                    res[position++] = word >> 8 & 255;
                }
                if (position < res.length) {
                    res[position++] = word >> 16 & 255;
                }
                if (shift === 6) {
                    if (position < res.length) {
                        res[position++] = word >> 24 & 255;
                    }
                    carry = 0;
                    shift = 0;
                } else {
                    carry = word >>> 24;
                    shift += 2;
                }
            }
            if (position < res.length) {
                res[position++] = carry;
                while(position < res.length){
                    res[position++] = 0;
                }
            }
        };
        BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
            var position = res.length - 1;
            var carry = 0;
            for(var i = 0, shift = 0; i < this.length; i++){
                var word = this.words[i] << shift | carry;
                res[position--] = word & 255;
                if (position >= 0) {
                    res[position--] = word >> 8 & 255;
                }
                if (position >= 0) {
                    res[position--] = word >> 16 & 255;
                }
                if (shift === 6) {
                    if (position >= 0) {
                        res[position--] = word >> 24 & 255;
                    }
                    carry = 0;
                    shift = 0;
                } else {
                    carry = word >>> 24;
                    shift += 2;
                }
            }
            if (position >= 0) {
                res[position--] = carry;
                while(position >= 0){
                    res[position--] = 0;
                }
            }
        };
        if (Math.clz32) {
            BN2.prototype._countBits = function _countBits(w) {
                return 32 - Math.clz32(w);
            };
        } else {
            BN2.prototype._countBits = function _countBits(w) {
                var t = w;
                var r = 0;
                if (t >= 4096) {
                    r += 13;
                    t >>>= 13;
                }
                if (t >= 64) {
                    r += 7;
                    t >>>= 7;
                }
                if (t >= 8) {
                    r += 4;
                    t >>>= 4;
                }
                if (t >= 2) {
                    r += 2;
                    t >>>= 2;
                }
                return r + t;
            };
        }
        BN2.prototype._zeroBits = function _zeroBits(w) {
            if (w === 0) return 26;
            var t = w;
            var r = 0;
            if ((t & 8191) === 0) {
                r += 13;
                t >>>= 13;
            }
            if ((t & 127) === 0) {
                r += 7;
                t >>>= 7;
            }
            if ((t & 15) === 0) {
                r += 4;
                t >>>= 4;
            }
            if ((t & 3) === 0) {
                r += 2;
                t >>>= 2;
            }
            if ((t & 1) === 0) {
                r++;
            }
            return r;
        };
        BN2.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
            var w = new Array(num.bitLength());
            for(var bit = 0; bit < w.length; bit++){
                var off = bit / 26 | 0;
                var wbit = bit % 26;
                w[bit] = num.words[off] >>> wbit & 1;
            }
            return w;
        }
        BN2.prototype.zeroBits = function zeroBits() {
            if (this.isZero()) return 0;
            var r = 0;
            for(var i = 0; i < this.length; i++){
                var b = this._zeroBits(this.words[i]);
                r += b;
                if (b !== 26) break;
            }
            return r;
        };
        BN2.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
        };
        BN2.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
                return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
        };
        BN2.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
                return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
        };
        BN2.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
        };
        BN2.prototype.neg = function neg() {
            return this.clone().ineg();
        };
        BN2.prototype.ineg = function ineg() {
            if (!this.isZero()) {
                this.negative ^= 1;
            }
            return this;
        };
        BN2.prototype.iuor = function iuor(num) {
            while(this.length < num.length){
                this.words[this.length++] = 0;
            }
            for(var i = 0; i < num.length; i++){
                this.words[i] = this.words[i] | num.words[i];
            }
            return this._strip();
        };
        BN2.prototype.ior = function ior(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
        };
        BN2.prototype.or = function or(num) {
            if (this.length > num.length) return this.clone().ior(num);
            return num.clone().ior(this);
        };
        BN2.prototype.uor = function uor(num) {
            if (this.length > num.length) return this.clone().iuor(num);
            return num.clone().iuor(this);
        };
        BN2.prototype.iuand = function iuand(num) {
            var b;
            if (this.length > num.length) {
                b = num;
            } else {
                b = this;
            }
            for(var i = 0; i < b.length; i++){
                this.words[i] = this.words[i] & num.words[i];
            }
            this.length = b.length;
            return this._strip();
        };
        BN2.prototype.iand = function iand(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
        };
        BN2.prototype.and = function and(num) {
            if (this.length > num.length) return this.clone().iand(num);
            return num.clone().iand(this);
        };
        BN2.prototype.uand = function uand(num) {
            if (this.length > num.length) return this.clone().iuand(num);
            return num.clone().iuand(this);
        };
        BN2.prototype.iuxor = function iuxor(num) {
            var a;
            var b;
            if (this.length > num.length) {
                a = this;
                b = num;
            } else {
                a = num;
                b = this;
            }
            for(var i = 0; i < b.length; i++){
                this.words[i] = a.words[i] ^ b.words[i];
            }
            if (this !== a) {
                for(; i < a.length; i++){
                    this.words[i] = a.words[i];
                }
            }
            this.length = a.length;
            return this._strip();
        };
        BN2.prototype.ixor = function ixor(num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
        };
        BN2.prototype.xor = function xor(num) {
            if (this.length > num.length) return this.clone().ixor(num);
            return num.clone().ixor(this);
        };
        BN2.prototype.uxor = function uxor(num) {
            if (this.length > num.length) return this.clone().iuxor(num);
            return num.clone().iuxor(this);
        };
        BN2.prototype.inotn = function inotn(width) {
            assert(typeof width === "number" && width >= 0);
            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;
            this._expand(bytesNeeded);
            if (bitsLeft > 0) {
                bytesNeeded--;
            }
            for(var i = 0; i < bytesNeeded; i++){
                this.words[i] = ~this.words[i] & 67108863;
            }
            if (bitsLeft > 0) {
                this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
            }
            return this._strip();
        };
        BN2.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
        };
        BN2.prototype.setn = function setn(bit, val) {
            assert(typeof bit === "number" && bit >= 0);
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            this._expand(off + 1);
            if (val) {
                this.words[off] = this.words[off] | 1 << wbit;
            } else {
                this.words[off] = this.words[off] & ~(1 << wbit);
            }
            return this._strip();
        };
        BN2.prototype.iadd = function iadd(num) {
            var r;
            if (this.negative !== 0 && num.negative === 0) {
                this.negative = 0;
                r = this.isub(num);
                this.negative ^= 1;
                return this._normSign();
            } else if (this.negative === 0 && num.negative !== 0) {
                num.negative = 0;
                r = this.isub(num);
                num.negative = 1;
                return r._normSign();
            }
            var a, b;
            if (this.length > num.length) {
                a = this;
                b = num;
            } else {
                a = num;
                b = this;
            }
            var carry = 0;
            for(var i = 0; i < b.length; i++){
                r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                this.words[i] = r & 67108863;
                carry = r >>> 26;
            }
            for(; carry !== 0 && i < a.length; i++){
                r = (a.words[i] | 0) + carry;
                this.words[i] = r & 67108863;
                carry = r >>> 26;
            }
            this.length = a.length;
            if (carry !== 0) {
                this.words[this.length] = carry;
                this.length++;
            } else if (a !== this) {
                for(; i < a.length; i++){
                    this.words[i] = a.words[i];
                }
            }
            return this;
        };
        BN2.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
                num.negative = 0;
                res = this.sub(num);
                num.negative ^= 1;
                return res;
            } else if (num.negative === 0 && this.negative !== 0) {
                this.negative = 0;
                res = num.sub(this);
                this.negative = 1;
                return res;
            }
            if (this.length > num.length) return this.clone().iadd(num);
            return num.clone().iadd(this);
        };
        BN2.prototype.isub = function isub(num) {
            if (num.negative !== 0) {
                num.negative = 0;
                var r = this.iadd(num);
                num.negative = 1;
                return r._normSign();
            } else if (this.negative !== 0) {
                this.negative = 0;
                this.iadd(num);
                this.negative = 1;
                return this._normSign();
            }
            var cmp = this.cmp(num);
            if (cmp === 0) {
                this.negative = 0;
                this.length = 1;
                this.words[0] = 0;
                return this;
            }
            var a, b;
            if (cmp > 0) {
                a = this;
                b = num;
            } else {
                a = num;
                b = this;
            }
            var carry = 0;
            for(var i = 0; i < b.length; i++){
                r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 67108863;
            }
            for(; carry !== 0 && i < a.length; i++){
                r = (a.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 67108863;
            }
            if (carry === 0 && i < a.length && a !== this) {
                for(; i < a.length; i++){
                    this.words[i] = a.words[i];
                }
            }
            this.length = Math.max(this.length, i);
            if (a !== this) {
                this.negative = 1;
            }
            return this._strip();
        };
        BN2.prototype.sub = function sub(num) {
            return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
            out.negative = num.negative ^ self2.negative;
            var len = self2.length + num.length | 0;
            out.length = len;
            len = len - 1 | 0;
            var a = self2.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;
            var lo = r & 67108863;
            var carry = r / 67108864 | 0;
            out.words[0] = lo;
            for(var k = 1; k < len; k++){
                var ncarry = carry >>> 26;
                var rword = carry & 67108863;
                var maxJ = Math.min(k, num.length - 1);
                for(var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++){
                    var i = k - j | 0;
                    a = self2.words[i] | 0;
                    b = num.words[j] | 0;
                    r = a * b + rword;
                    ncarry += r / 67108864 | 0;
                    rword = r & 67108863;
                }
                out.words[k] = rword | 0;
                carry = ncarry | 0;
            }
            if (carry !== 0) {
                out.words[k] = carry | 0;
            } else {
                out.length--;
            }
            return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
            var a = self2.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 8191;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 8191;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 8191;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 8191;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 8191;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 8191;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 8191;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 8191;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 8191;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 8191;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 8191;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 8191;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 8191;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 8191;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 8191;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 8191;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 8191;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 8191;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 8191;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 8191;
            var bh9 = b9 >>> 13;
            out.negative = self2.negative ^ num.negative;
            out.length = 19;
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = mid + Math.imul(ah0, bl0) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
            w0 &= 67108863;
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = mid + Math.imul(ah1, bl0) | 0;
            hi = Math.imul(ah1, bh0);
            lo = lo + Math.imul(al0, bl1) | 0;
            mid = mid + Math.imul(al0, bh1) | 0;
            mid = mid + Math.imul(ah0, bl1) | 0;
            hi = hi + Math.imul(ah0, bh1) | 0;
            var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
            w1 &= 67108863;
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = mid + Math.imul(ah2, bl0) | 0;
            hi = Math.imul(ah2, bh0);
            lo = lo + Math.imul(al1, bl1) | 0;
            mid = mid + Math.imul(al1, bh1) | 0;
            mid = mid + Math.imul(ah1, bl1) | 0;
            hi = hi + Math.imul(ah1, bh1) | 0;
            lo = lo + Math.imul(al0, bl2) | 0;
            mid = mid + Math.imul(al0, bh2) | 0;
            mid = mid + Math.imul(ah0, bl2) | 0;
            hi = hi + Math.imul(ah0, bh2) | 0;
            var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
            w2 &= 67108863;
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = mid + Math.imul(ah3, bl0) | 0;
            hi = Math.imul(ah3, bh0);
            lo = lo + Math.imul(al2, bl1) | 0;
            mid = mid + Math.imul(al2, bh1) | 0;
            mid = mid + Math.imul(ah2, bl1) | 0;
            hi = hi + Math.imul(ah2, bh1) | 0;
            lo = lo + Math.imul(al1, bl2) | 0;
            mid = mid + Math.imul(al1, bh2) | 0;
            mid = mid + Math.imul(ah1, bl2) | 0;
            hi = hi + Math.imul(ah1, bh2) | 0;
            lo = lo + Math.imul(al0, bl3) | 0;
            mid = mid + Math.imul(al0, bh3) | 0;
            mid = mid + Math.imul(ah0, bl3) | 0;
            hi = hi + Math.imul(ah0, bh3) | 0;
            var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
            w3 &= 67108863;
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = mid + Math.imul(ah4, bl0) | 0;
            hi = Math.imul(ah4, bh0);
            lo = lo + Math.imul(al3, bl1) | 0;
            mid = mid + Math.imul(al3, bh1) | 0;
            mid = mid + Math.imul(ah3, bl1) | 0;
            hi = hi + Math.imul(ah3, bh1) | 0;
            lo = lo + Math.imul(al2, bl2) | 0;
            mid = mid + Math.imul(al2, bh2) | 0;
            mid = mid + Math.imul(ah2, bl2) | 0;
            hi = hi + Math.imul(ah2, bh2) | 0;
            lo = lo + Math.imul(al1, bl3) | 0;
            mid = mid + Math.imul(al1, bh3) | 0;
            mid = mid + Math.imul(ah1, bl3) | 0;
            hi = hi + Math.imul(ah1, bh3) | 0;
            lo = lo + Math.imul(al0, bl4) | 0;
            mid = mid + Math.imul(al0, bh4) | 0;
            mid = mid + Math.imul(ah0, bl4) | 0;
            hi = hi + Math.imul(ah0, bh4) | 0;
            var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
            w4 &= 67108863;
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = mid + Math.imul(ah5, bl0) | 0;
            hi = Math.imul(ah5, bh0);
            lo = lo + Math.imul(al4, bl1) | 0;
            mid = mid + Math.imul(al4, bh1) | 0;
            mid = mid + Math.imul(ah4, bl1) | 0;
            hi = hi + Math.imul(ah4, bh1) | 0;
            lo = lo + Math.imul(al3, bl2) | 0;
            mid = mid + Math.imul(al3, bh2) | 0;
            mid = mid + Math.imul(ah3, bl2) | 0;
            hi = hi + Math.imul(ah3, bh2) | 0;
            lo = lo + Math.imul(al2, bl3) | 0;
            mid = mid + Math.imul(al2, bh3) | 0;
            mid = mid + Math.imul(ah2, bl3) | 0;
            hi = hi + Math.imul(ah2, bh3) | 0;
            lo = lo + Math.imul(al1, bl4) | 0;
            mid = mid + Math.imul(al1, bh4) | 0;
            mid = mid + Math.imul(ah1, bl4) | 0;
            hi = hi + Math.imul(ah1, bh4) | 0;
            lo = lo + Math.imul(al0, bl5) | 0;
            mid = mid + Math.imul(al0, bh5) | 0;
            mid = mid + Math.imul(ah0, bl5) | 0;
            hi = hi + Math.imul(ah0, bh5) | 0;
            var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
            w5 &= 67108863;
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = mid + Math.imul(ah6, bl0) | 0;
            hi = Math.imul(ah6, bh0);
            lo = lo + Math.imul(al5, bl1) | 0;
            mid = mid + Math.imul(al5, bh1) | 0;
            mid = mid + Math.imul(ah5, bl1) | 0;
            hi = hi + Math.imul(ah5, bh1) | 0;
            lo = lo + Math.imul(al4, bl2) | 0;
            mid = mid + Math.imul(al4, bh2) | 0;
            mid = mid + Math.imul(ah4, bl2) | 0;
            hi = hi + Math.imul(ah4, bh2) | 0;
            lo = lo + Math.imul(al3, bl3) | 0;
            mid = mid + Math.imul(al3, bh3) | 0;
            mid = mid + Math.imul(ah3, bl3) | 0;
            hi = hi + Math.imul(ah3, bh3) | 0;
            lo = lo + Math.imul(al2, bl4) | 0;
            mid = mid + Math.imul(al2, bh4) | 0;
            mid = mid + Math.imul(ah2, bl4) | 0;
            hi = hi + Math.imul(ah2, bh4) | 0;
            lo = lo + Math.imul(al1, bl5) | 0;
            mid = mid + Math.imul(al1, bh5) | 0;
            mid = mid + Math.imul(ah1, bl5) | 0;
            hi = hi + Math.imul(ah1, bh5) | 0;
            lo = lo + Math.imul(al0, bl6) | 0;
            mid = mid + Math.imul(al0, bh6) | 0;
            mid = mid + Math.imul(ah0, bl6) | 0;
            hi = hi + Math.imul(ah0, bh6) | 0;
            var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
            w6 &= 67108863;
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = mid + Math.imul(ah7, bl0) | 0;
            hi = Math.imul(ah7, bh0);
            lo = lo + Math.imul(al6, bl1) | 0;
            mid = mid + Math.imul(al6, bh1) | 0;
            mid = mid + Math.imul(ah6, bl1) | 0;
            hi = hi + Math.imul(ah6, bh1) | 0;
            lo = lo + Math.imul(al5, bl2) | 0;
            mid = mid + Math.imul(al5, bh2) | 0;
            mid = mid + Math.imul(ah5, bl2) | 0;
            hi = hi + Math.imul(ah5, bh2) | 0;
            lo = lo + Math.imul(al4, bl3) | 0;
            mid = mid + Math.imul(al4, bh3) | 0;
            mid = mid + Math.imul(ah4, bl3) | 0;
            hi = hi + Math.imul(ah4, bh3) | 0;
            lo = lo + Math.imul(al3, bl4) | 0;
            mid = mid + Math.imul(al3, bh4) | 0;
            mid = mid + Math.imul(ah3, bl4) | 0;
            hi = hi + Math.imul(ah3, bh4) | 0;
            lo = lo + Math.imul(al2, bl5) | 0;
            mid = mid + Math.imul(al2, bh5) | 0;
            mid = mid + Math.imul(ah2, bl5) | 0;
            hi = hi + Math.imul(ah2, bh5) | 0;
            lo = lo + Math.imul(al1, bl6) | 0;
            mid = mid + Math.imul(al1, bh6) | 0;
            mid = mid + Math.imul(ah1, bl6) | 0;
            hi = hi + Math.imul(ah1, bh6) | 0;
            lo = lo + Math.imul(al0, bl7) | 0;
            mid = mid + Math.imul(al0, bh7) | 0;
            mid = mid + Math.imul(ah0, bl7) | 0;
            hi = hi + Math.imul(ah0, bh7) | 0;
            var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
            w7 &= 67108863;
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = mid + Math.imul(ah8, bl0) | 0;
            hi = Math.imul(ah8, bh0);
            lo = lo + Math.imul(al7, bl1) | 0;
            mid = mid + Math.imul(al7, bh1) | 0;
            mid = mid + Math.imul(ah7, bl1) | 0;
            hi = hi + Math.imul(ah7, bh1) | 0;
            lo = lo + Math.imul(al6, bl2) | 0;
            mid = mid + Math.imul(al6, bh2) | 0;
            mid = mid + Math.imul(ah6, bl2) | 0;
            hi = hi + Math.imul(ah6, bh2) | 0;
            lo = lo + Math.imul(al5, bl3) | 0;
            mid = mid + Math.imul(al5, bh3) | 0;
            mid = mid + Math.imul(ah5, bl3) | 0;
            hi = hi + Math.imul(ah5, bh3) | 0;
            lo = lo + Math.imul(al4, bl4) | 0;
            mid = mid + Math.imul(al4, bh4) | 0;
            mid = mid + Math.imul(ah4, bl4) | 0;
            hi = hi + Math.imul(ah4, bh4) | 0;
            lo = lo + Math.imul(al3, bl5) | 0;
            mid = mid + Math.imul(al3, bh5) | 0;
            mid = mid + Math.imul(ah3, bl5) | 0;
            hi = hi + Math.imul(ah3, bh5) | 0;
            lo = lo + Math.imul(al2, bl6) | 0;
            mid = mid + Math.imul(al2, bh6) | 0;
            mid = mid + Math.imul(ah2, bl6) | 0;
            hi = hi + Math.imul(ah2, bh6) | 0;
            lo = lo + Math.imul(al1, bl7) | 0;
            mid = mid + Math.imul(al1, bh7) | 0;
            mid = mid + Math.imul(ah1, bl7) | 0;
            hi = hi + Math.imul(ah1, bh7) | 0;
            lo = lo + Math.imul(al0, bl8) | 0;
            mid = mid + Math.imul(al0, bh8) | 0;
            mid = mid + Math.imul(ah0, bl8) | 0;
            hi = hi + Math.imul(ah0, bh8) | 0;
            var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
            w8 &= 67108863;
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = mid + Math.imul(ah9, bl0) | 0;
            hi = Math.imul(ah9, bh0);
            lo = lo + Math.imul(al8, bl1) | 0;
            mid = mid + Math.imul(al8, bh1) | 0;
            mid = mid + Math.imul(ah8, bl1) | 0;
            hi = hi + Math.imul(ah8, bh1) | 0;
            lo = lo + Math.imul(al7, bl2) | 0;
            mid = mid + Math.imul(al7, bh2) | 0;
            mid = mid + Math.imul(ah7, bl2) | 0;
            hi = hi + Math.imul(ah7, bh2) | 0;
            lo = lo + Math.imul(al6, bl3) | 0;
            mid = mid + Math.imul(al6, bh3) | 0;
            mid = mid + Math.imul(ah6, bl3) | 0;
            hi = hi + Math.imul(ah6, bh3) | 0;
            lo = lo + Math.imul(al5, bl4) | 0;
            mid = mid + Math.imul(al5, bh4) | 0;
            mid = mid + Math.imul(ah5, bl4) | 0;
            hi = hi + Math.imul(ah5, bh4) | 0;
            lo = lo + Math.imul(al4, bl5) | 0;
            mid = mid + Math.imul(al4, bh5) | 0;
            mid = mid + Math.imul(ah4, bl5) | 0;
            hi = hi + Math.imul(ah4, bh5) | 0;
            lo = lo + Math.imul(al3, bl6) | 0;
            mid = mid + Math.imul(al3, bh6) | 0;
            mid = mid + Math.imul(ah3, bl6) | 0;
            hi = hi + Math.imul(ah3, bh6) | 0;
            lo = lo + Math.imul(al2, bl7) | 0;
            mid = mid + Math.imul(al2, bh7) | 0;
            mid = mid + Math.imul(ah2, bl7) | 0;
            hi = hi + Math.imul(ah2, bh7) | 0;
            lo = lo + Math.imul(al1, bl8) | 0;
            mid = mid + Math.imul(al1, bh8) | 0;
            mid = mid + Math.imul(ah1, bl8) | 0;
            hi = hi + Math.imul(ah1, bh8) | 0;
            lo = lo + Math.imul(al0, bl9) | 0;
            mid = mid + Math.imul(al0, bh9) | 0;
            mid = mid + Math.imul(ah0, bl9) | 0;
            hi = hi + Math.imul(ah0, bh9) | 0;
            var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
            w9 &= 67108863;
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = mid + Math.imul(ah9, bl1) | 0;
            hi = Math.imul(ah9, bh1);
            lo = lo + Math.imul(al8, bl2) | 0;
            mid = mid + Math.imul(al8, bh2) | 0;
            mid = mid + Math.imul(ah8, bl2) | 0;
            hi = hi + Math.imul(ah8, bh2) | 0;
            lo = lo + Math.imul(al7, bl3) | 0;
            mid = mid + Math.imul(al7, bh3) | 0;
            mid = mid + Math.imul(ah7, bl3) | 0;
            hi = hi + Math.imul(ah7, bh3) | 0;
            lo = lo + Math.imul(al6, bl4) | 0;
            mid = mid + Math.imul(al6, bh4) | 0;
            mid = mid + Math.imul(ah6, bl4) | 0;
            hi = hi + Math.imul(ah6, bh4) | 0;
            lo = lo + Math.imul(al5, bl5) | 0;
            mid = mid + Math.imul(al5, bh5) | 0;
            mid = mid + Math.imul(ah5, bl5) | 0;
            hi = hi + Math.imul(ah5, bh5) | 0;
            lo = lo + Math.imul(al4, bl6) | 0;
            mid = mid + Math.imul(al4, bh6) | 0;
            mid = mid + Math.imul(ah4, bl6) | 0;
            hi = hi + Math.imul(ah4, bh6) | 0;
            lo = lo + Math.imul(al3, bl7) | 0;
            mid = mid + Math.imul(al3, bh7) | 0;
            mid = mid + Math.imul(ah3, bl7) | 0;
            hi = hi + Math.imul(ah3, bh7) | 0;
            lo = lo + Math.imul(al2, bl8) | 0;
            mid = mid + Math.imul(al2, bh8) | 0;
            mid = mid + Math.imul(ah2, bl8) | 0;
            hi = hi + Math.imul(ah2, bh8) | 0;
            lo = lo + Math.imul(al1, bl9) | 0;
            mid = mid + Math.imul(al1, bh9) | 0;
            mid = mid + Math.imul(ah1, bl9) | 0;
            hi = hi + Math.imul(ah1, bh9) | 0;
            var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
            w10 &= 67108863;
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = mid + Math.imul(ah9, bl2) | 0;
            hi = Math.imul(ah9, bh2);
            lo = lo + Math.imul(al8, bl3) | 0;
            mid = mid + Math.imul(al8, bh3) | 0;
            mid = mid + Math.imul(ah8, bl3) | 0;
            hi = hi + Math.imul(ah8, bh3) | 0;
            lo = lo + Math.imul(al7, bl4) | 0;
            mid = mid + Math.imul(al7, bh4) | 0;
            mid = mid + Math.imul(ah7, bl4) | 0;
            hi = hi + Math.imul(ah7, bh4) | 0;
            lo = lo + Math.imul(al6, bl5) | 0;
            mid = mid + Math.imul(al6, bh5) | 0;
            mid = mid + Math.imul(ah6, bl5) | 0;
            hi = hi + Math.imul(ah6, bh5) | 0;
            lo = lo + Math.imul(al5, bl6) | 0;
            mid = mid + Math.imul(al5, bh6) | 0;
            mid = mid + Math.imul(ah5, bl6) | 0;
            hi = hi + Math.imul(ah5, bh6) | 0;
            lo = lo + Math.imul(al4, bl7) | 0;
            mid = mid + Math.imul(al4, bh7) | 0;
            mid = mid + Math.imul(ah4, bl7) | 0;
            hi = hi + Math.imul(ah4, bh7) | 0;
            lo = lo + Math.imul(al3, bl8) | 0;
            mid = mid + Math.imul(al3, bh8) | 0;
            mid = mid + Math.imul(ah3, bl8) | 0;
            hi = hi + Math.imul(ah3, bh8) | 0;
            lo = lo + Math.imul(al2, bl9) | 0;
            mid = mid + Math.imul(al2, bh9) | 0;
            mid = mid + Math.imul(ah2, bl9) | 0;
            hi = hi + Math.imul(ah2, bh9) | 0;
            var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
            w11 &= 67108863;
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = mid + Math.imul(ah9, bl3) | 0;
            hi = Math.imul(ah9, bh3);
            lo = lo + Math.imul(al8, bl4) | 0;
            mid = mid + Math.imul(al8, bh4) | 0;
            mid = mid + Math.imul(ah8, bl4) | 0;
            hi = hi + Math.imul(ah8, bh4) | 0;
            lo = lo + Math.imul(al7, bl5) | 0;
            mid = mid + Math.imul(al7, bh5) | 0;
            mid = mid + Math.imul(ah7, bl5) | 0;
            hi = hi + Math.imul(ah7, bh5) | 0;
            lo = lo + Math.imul(al6, bl6) | 0;
            mid = mid + Math.imul(al6, bh6) | 0;
            mid = mid + Math.imul(ah6, bl6) | 0;
            hi = hi + Math.imul(ah6, bh6) | 0;
            lo = lo + Math.imul(al5, bl7) | 0;
            mid = mid + Math.imul(al5, bh7) | 0;
            mid = mid + Math.imul(ah5, bl7) | 0;
            hi = hi + Math.imul(ah5, bh7) | 0;
            lo = lo + Math.imul(al4, bl8) | 0;
            mid = mid + Math.imul(al4, bh8) | 0;
            mid = mid + Math.imul(ah4, bl8) | 0;
            hi = hi + Math.imul(ah4, bh8) | 0;
            lo = lo + Math.imul(al3, bl9) | 0;
            mid = mid + Math.imul(al3, bh9) | 0;
            mid = mid + Math.imul(ah3, bl9) | 0;
            hi = hi + Math.imul(ah3, bh9) | 0;
            var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
            w12 &= 67108863;
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = mid + Math.imul(ah9, bl4) | 0;
            hi = Math.imul(ah9, bh4);
            lo = lo + Math.imul(al8, bl5) | 0;
            mid = mid + Math.imul(al8, bh5) | 0;
            mid = mid + Math.imul(ah8, bl5) | 0;
            hi = hi + Math.imul(ah8, bh5) | 0;
            lo = lo + Math.imul(al7, bl6) | 0;
            mid = mid + Math.imul(al7, bh6) | 0;
            mid = mid + Math.imul(ah7, bl6) | 0;
            hi = hi + Math.imul(ah7, bh6) | 0;
            lo = lo + Math.imul(al6, bl7) | 0;
            mid = mid + Math.imul(al6, bh7) | 0;
            mid = mid + Math.imul(ah6, bl7) | 0;
            hi = hi + Math.imul(ah6, bh7) | 0;
            lo = lo + Math.imul(al5, bl8) | 0;
            mid = mid + Math.imul(al5, bh8) | 0;
            mid = mid + Math.imul(ah5, bl8) | 0;
            hi = hi + Math.imul(ah5, bh8) | 0;
            lo = lo + Math.imul(al4, bl9) | 0;
            mid = mid + Math.imul(al4, bh9) | 0;
            mid = mid + Math.imul(ah4, bl9) | 0;
            hi = hi + Math.imul(ah4, bh9) | 0;
            var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
            w13 &= 67108863;
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = mid + Math.imul(ah9, bl5) | 0;
            hi = Math.imul(ah9, bh5);
            lo = lo + Math.imul(al8, bl6) | 0;
            mid = mid + Math.imul(al8, bh6) | 0;
            mid = mid + Math.imul(ah8, bl6) | 0;
            hi = hi + Math.imul(ah8, bh6) | 0;
            lo = lo + Math.imul(al7, bl7) | 0;
            mid = mid + Math.imul(al7, bh7) | 0;
            mid = mid + Math.imul(ah7, bl7) | 0;
            hi = hi + Math.imul(ah7, bh7) | 0;
            lo = lo + Math.imul(al6, bl8) | 0;
            mid = mid + Math.imul(al6, bh8) | 0;
            mid = mid + Math.imul(ah6, bl8) | 0;
            hi = hi + Math.imul(ah6, bh8) | 0;
            lo = lo + Math.imul(al5, bl9) | 0;
            mid = mid + Math.imul(al5, bh9) | 0;
            mid = mid + Math.imul(ah5, bl9) | 0;
            hi = hi + Math.imul(ah5, bh9) | 0;
            var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
            w14 &= 67108863;
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = mid + Math.imul(ah9, bl6) | 0;
            hi = Math.imul(ah9, bh6);
            lo = lo + Math.imul(al8, bl7) | 0;
            mid = mid + Math.imul(al8, bh7) | 0;
            mid = mid + Math.imul(ah8, bl7) | 0;
            hi = hi + Math.imul(ah8, bh7) | 0;
            lo = lo + Math.imul(al7, bl8) | 0;
            mid = mid + Math.imul(al7, bh8) | 0;
            mid = mid + Math.imul(ah7, bl8) | 0;
            hi = hi + Math.imul(ah7, bh8) | 0;
            lo = lo + Math.imul(al6, bl9) | 0;
            mid = mid + Math.imul(al6, bh9) | 0;
            mid = mid + Math.imul(ah6, bl9) | 0;
            hi = hi + Math.imul(ah6, bh9) | 0;
            var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
            w15 &= 67108863;
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = mid + Math.imul(ah9, bl7) | 0;
            hi = Math.imul(ah9, bh7);
            lo = lo + Math.imul(al8, bl8) | 0;
            mid = mid + Math.imul(al8, bh8) | 0;
            mid = mid + Math.imul(ah8, bl8) | 0;
            hi = hi + Math.imul(ah8, bh8) | 0;
            lo = lo + Math.imul(al7, bl9) | 0;
            mid = mid + Math.imul(al7, bh9) | 0;
            mid = mid + Math.imul(ah7, bl9) | 0;
            hi = hi + Math.imul(ah7, bh9) | 0;
            var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
            w16 &= 67108863;
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = mid + Math.imul(ah9, bl8) | 0;
            hi = Math.imul(ah9, bh8);
            lo = lo + Math.imul(al8, bl9) | 0;
            mid = mid + Math.imul(al8, bh9) | 0;
            mid = mid + Math.imul(ah8, bl9) | 0;
            hi = hi + Math.imul(ah8, bh9) | 0;
            var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
            w17 &= 67108863;
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = mid + Math.imul(ah9, bl9) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
            w18 &= 67108863;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
                o[19] = c;
                out.length++;
            }
            return out;
        };
        if (!Math.imul) {
            comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
            out.negative = num.negative ^ self2.negative;
            out.length = self2.length + num.length;
            var carry = 0;
            var hncarry = 0;
            for(var k = 0; k < out.length - 1; k++){
                var ncarry = hncarry;
                hncarry = 0;
                var rword = carry & 67108863;
                var maxJ = Math.min(k, num.length - 1);
                for(var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++){
                    var i = k - j;
                    var a = self2.words[i] | 0;
                    var b = num.words[j] | 0;
                    var r = a * b;
                    var lo = r & 67108863;
                    ncarry = ncarry + (r / 67108864 | 0) | 0;
                    lo = lo + rword | 0;
                    rword = lo & 67108863;
                    ncarry = ncarry + (lo >>> 26) | 0;
                    hncarry += ncarry >>> 26;
                    ncarry &= 67108863;
                }
                out.words[k] = rword;
                carry = ncarry;
                ncarry = hncarry;
            }
            if (carry !== 0) {
                out.words[k] = carry;
            } else {
                out.length--;
            }
            return out._strip();
        }
        function jumboMulTo(self2, num, out) {
            return bigMulTo(self2, num, out);
        }
        BN2.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
                res = comb10MulTo(this, num, out);
            } else if (len < 63) {
                res = smallMulTo(this, num, out);
            } else if (len < 1024) {
                res = bigMulTo(this, num, out);
            } else {
                res = jumboMulTo(this, num, out);
            }
            return res;
        };
        BN2.prototype.mul = function mul(num) {
            var out = new BN2(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
        };
        BN2.prototype.mulf = function mulf(num) {
            var out = new BN2(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
        };
        BN2.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
        };
        BN2.prototype.imuln = function imuln(num) {
            var isNegNum = num < 0;
            if (isNegNum) num = -num;
            assert(typeof num === "number");
            assert(num < 67108864);
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = (this.words[i] | 0) * num;
                var lo = (w & 67108863) + (carry & 67108863);
                carry >>= 26;
                carry += w / 67108864 | 0;
                carry += lo >>> 26;
                this.words[i] = lo & 67108863;
            }
            if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
            }
            return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
        };
        BN2.prototype.sqr = function sqr() {
            return this.mul(this);
        };
        BN2.prototype.isqr = function isqr() {
            return this.imul(this.clone());
        };
        BN2.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0) return new BN2(1);
            var res = this;
            for(var i = 0; i < w.length; i++, res = res.sqr()){
                if (w[i] !== 0) break;
            }
            if (++i < w.length) {
                for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
                    if (w[i] === 0) continue;
                    res = res.mul(q);
                }
            }
            return res;
        };
        BN2.prototype.iushln = function iushln(bits) {
            assert(typeof bits === "number" && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = 67108863 >>> 26 - r << 26 - r;
            var i;
            if (r !== 0) {
                var carry = 0;
                for(i = 0; i < this.length; i++){
                    var newCarry = this.words[i] & carryMask;
                    var c = (this.words[i] | 0) - newCarry << r;
                    this.words[i] = c | carry;
                    carry = newCarry >>> 26 - r;
                }
                if (carry) {
                    this.words[i] = carry;
                    this.length++;
                }
            }
            if (s !== 0) {
                for(i = this.length - 1; i >= 0; i--){
                    this.words[i + s] = this.words[i];
                }
                for(i = 0; i < s; i++){
                    this.words[i] = 0;
                }
                this.length += s;
            }
            return this._strip();
        };
        BN2.prototype.ishln = function ishln(bits) {
            assert(this.negative === 0);
            return this.iushln(bits);
        };
        BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert(typeof bits === "number" && bits >= 0);
            var h;
            if (hint) {
                h = (hint - hint % 26) / 26;
            } else {
                h = 0;
            }
            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 67108863 ^ 67108863 >>> r << r;
            var maskedWords = extended;
            h -= s;
            h = Math.max(0, h);
            if (maskedWords) {
                for(var i = 0; i < s; i++){
                    maskedWords.words[i] = this.words[i];
                }
                maskedWords.length = s;
            }
            if (s === 0) ;
            else if (this.length > s) {
                this.length -= s;
                for(i = 0; i < this.length; i++){
                    this.words[i] = this.words[i + s];
                }
            } else {
                this.words[0] = 0;
                this.length = 1;
            }
            var carry = 0;
            for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
                var word = this.words[i] | 0;
                this.words[i] = carry << 26 - r | word >>> r;
                carry = word & mask;
            }
            if (maskedWords && carry !== 0) {
                maskedWords.words[maskedWords.length++] = carry;
            }
            if (this.length === 0) {
                this.words[0] = 0;
                this.length = 1;
            }
            return this._strip();
        };
        BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
        };
        BN2.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
        };
        BN2.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
        };
        BN2.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
        };
        BN2.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
        };
        BN2.prototype.testn = function testn(bit) {
            assert(typeof bit === "number" && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;
            if (this.length <= s) return false;
            var w = this.words[s];
            return !!(w & q);
        };
        BN2.prototype.imaskn = function imaskn(bits) {
            assert(typeof bits === "number" && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            assert(this.negative === 0, "imaskn works only with positive numbers");
            if (this.length <= s) {
                return this;
            }
            if (r !== 0) {
                s++;
            }
            this.length = Math.min(s, this.length);
            if (r !== 0) {
                var mask = 67108863 ^ 67108863 >>> r << r;
                this.words[this.length - 1] &= mask;
            }
            return this._strip();
        };
        BN2.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
        };
        BN2.prototype.iaddn = function iaddn(num) {
            assert(typeof num === "number");
            assert(num < 67108864);
            if (num < 0) return this.isubn(-num);
            if (this.negative !== 0) {
                if (this.length === 1 && (this.words[0] | 0) <= num) {
                    this.words[0] = num - (this.words[0] | 0);
                    this.negative = 0;
                    return this;
                }
                this.negative = 0;
                this.isubn(num);
                this.negative = 1;
                return this;
            }
            return this._iaddn(num);
        };
        BN2.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;
            for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
                this.words[i] -= 67108864;
                if (i === this.length - 1) {
                    this.words[i + 1] = 1;
                } else {
                    this.words[i + 1]++;
                }
            }
            this.length = Math.max(this.length, i + 1);
            return this;
        };
        BN2.prototype.isubn = function isubn(num) {
            assert(typeof num === "number");
            assert(num < 67108864);
            if (num < 0) return this.iaddn(-num);
            if (this.negative !== 0) {
                this.negative = 0;
                this.iaddn(num);
                this.negative = 1;
                return this;
            }
            this.words[0] -= num;
            if (this.length === 1 && this.words[0] < 0) {
                this.words[0] = -this.words[0];
                this.negative = 1;
            } else {
                for(var i = 0; i < this.length && this.words[i] < 0; i++){
                    this.words[i] += 67108864;
                    this.words[i + 1] -= 1;
                }
            }
            return this._strip();
        };
        BN2.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
        };
        BN2.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
        };
        BN2.prototype.iabs = function iabs() {
            this.negative = 0;
            return this;
        };
        BN2.prototype.abs = function abs() {
            return this.clone().iabs();
        };
        BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i;
            this._expand(len);
            var w;
            var carry = 0;
            for(i = 0; i < num.length; i++){
                w = (this.words[i + shift] | 0) + carry;
                var right = (num.words[i] | 0) * mul;
                w -= right & 67108863;
                carry = (w >> 26) - (right / 67108864 | 0);
                this.words[i + shift] = w & 67108863;
            }
            for(; i < this.length - shift; i++){
                w = (this.words[i + shift] | 0) + carry;
                carry = w >> 26;
                this.words[i + shift] = w & 67108863;
            }
            if (carry === 0) return this._strip();
            assert(carry === -1);
            carry = 0;
            for(i = 0; i < this.length; i++){
                w = -(this.words[i] | 0) + carry;
                carry = w >> 26;
                this.words[i] = w & 67108863;
            }
            this.negative = 1;
            return this._strip();
        };
        BN2.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;
            var a = this.clone();
            var b = num;
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
                b = b.ushln(shift);
                a.iushln(shift);
                bhi = b.words[b.length - 1] | 0;
            }
            var m = a.length - b.length;
            var q;
            if (mode !== "mod") {
                q = new BN2(null);
                q.length = m + 1;
                q.words = new Array(q.length);
                for(var i = 0; i < q.length; i++){
                    q.words[i] = 0;
                }
            }
            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
                a = diff;
                if (q) {
                    q.words[m] = 1;
                }
            }
            for(var j = m - 1; j >= 0; j--){
                var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
                qj = Math.min(qj / bhi | 0, 67108863);
                a._ishlnsubmul(b, qj, j);
                while(a.negative !== 0){
                    qj--;
                    a.negative = 0;
                    a._ishlnsubmul(b, 1, j);
                    if (!a.isZero()) {
                        a.negative ^= 1;
                    }
                }
                if (q) {
                    q.words[j] = qj;
                }
            }
            if (q) {
                q._strip();
            }
            a._strip();
            if (mode !== "div" && shift !== 0) {
                a.iushrn(shift);
            }
            return {
                div: q || null,
                mod: a
            };
        };
        BN2.prototype.divmod = function divmod(num, mode, positive) {
            assert(!num.isZero());
            if (this.isZero()) {
                return {
                    div: new BN2(0),
                    mod: new BN2(0)
                };
            }
            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
                res = this.neg().divmod(num, mode);
                if (mode !== "mod") {
                    div = res.div.neg();
                }
                if (mode !== "div") {
                    mod = res.mod.neg();
                    if (positive && mod.negative !== 0) {
                        mod.iadd(num);
                    }
                }
                return {
                    div,
                    mod
                };
            }
            if (this.negative === 0 && num.negative !== 0) {
                res = this.divmod(num.neg(), mode);
                if (mode !== "mod") {
                    div = res.div.neg();
                }
                return {
                    div,
                    mod: res.mod
                };
            }
            if ((this.negative & num.negative) !== 0) {
                res = this.neg().divmod(num.neg(), mode);
                if (mode !== "div") {
                    mod = res.mod.neg();
                    if (positive && mod.negative !== 0) {
                        mod.isub(num);
                    }
                }
                return {
                    div: res.div,
                    mod
                };
            }
            if (num.length > this.length || this.cmp(num) < 0) {
                return {
                    div: new BN2(0),
                    mod: this
                };
            }
            if (num.length === 1) {
                if (mode === "div") {
                    return {
                        div: this.divn(num.words[0]),
                        mod: null
                    };
                }
                if (mode === "mod") {
                    return {
                        div: null,
                        mod: new BN2(this.modrn(num.words[0]))
                    };
                }
                return {
                    div: this.divn(num.words[0]),
                    mod: new BN2(this.modrn(num.words[0]))
                };
            }
            return this._wordDiv(num, mode);
        };
        BN2.prototype.div = function div(num) {
            return this.divmod(num, "div", false).div;
        };
        BN2.prototype.mod = function mod(num) {
            return this.divmod(num, "mod", false).mod;
        };
        BN2.prototype.umod = function umod(num) {
            return this.divmod(num, "mod", true).mod;
        };
        BN2.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);
            if (dm.mod.isZero()) return dm.div;
            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);
            if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN2.prototype.modrn = function modrn(num) {
            var isNegNum = num < 0;
            if (isNegNum) num = -num;
            assert(num <= 67108863);
            var p = (1 << 26) % num;
            var acc = 0;
            for(var i = this.length - 1; i >= 0; i--){
                acc = (p * acc + (this.words[i] | 0)) % num;
            }
            return isNegNum ? -acc : acc;
        };
        BN2.prototype.modn = function modn(num) {
            return this.modrn(num);
        };
        BN2.prototype.idivn = function idivn(num) {
            var isNegNum = num < 0;
            if (isNegNum) num = -num;
            assert(num <= 67108863);
            var carry = 0;
            for(var i = this.length - 1; i >= 0; i--){
                var w = (this.words[i] | 0) + carry * 67108864;
                this.words[i] = w / num | 0;
                carry = w % num;
            }
            this._strip();
            return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
        };
        BN2.prototype.egcd = function egcd(p) {
            assert(p.negative === 0);
            assert(!p.isZero());
            var x = this;
            var y = p.clone();
            if (x.negative !== 0) {
                x = x.umod(p);
            } else {
                x = x.clone();
            }
            var A = new BN2(1);
            var B = new BN2(0);
            var C = new BN2(0);
            var D = new BN2(1);
            var g = 0;
            while(x.isEven() && y.isEven()){
                x.iushrn(1);
                y.iushrn(1);
                ++g;
            }
            var yp = y.clone();
            var xp = x.clone();
            while(!x.isZero()){
                for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                if (i > 0) {
                    x.iushrn(i);
                    while(i-- > 0){
                        if (A.isOdd() || B.isOdd()) {
                            A.iadd(yp);
                            B.isub(xp);
                        }
                        A.iushrn(1);
                        B.iushrn(1);
                    }
                }
                for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                if (j > 0) {
                    y.iushrn(j);
                    while(j-- > 0){
                        if (C.isOdd() || D.isOdd()) {
                            C.iadd(yp);
                            D.isub(xp);
                        }
                        C.iushrn(1);
                        D.iushrn(1);
                    }
                }
                if (x.cmp(y) >= 0) {
                    x.isub(y);
                    A.isub(C);
                    B.isub(D);
                } else {
                    y.isub(x);
                    C.isub(A);
                    D.isub(B);
                }
            }
            return {
                a: C,
                b: D,
                gcd: y.iushln(g)
            };
        };
        BN2.prototype._invmp = function _invmp(p) {
            assert(p.negative === 0);
            assert(!p.isZero());
            var a = this;
            var b = p.clone();
            if (a.negative !== 0) {
                a = a.umod(p);
            } else {
                a = a.clone();
            }
            var x1 = new BN2(1);
            var x2 = new BN2(0);
            var delta = b.clone();
            while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
                for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                if (i > 0) {
                    a.iushrn(i);
                    while(i-- > 0){
                        if (x1.isOdd()) {
                            x1.iadd(delta);
                        }
                        x1.iushrn(1);
                    }
                }
                for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                if (j > 0) {
                    b.iushrn(j);
                    while(j-- > 0){
                        if (x2.isOdd()) {
                            x2.iadd(delta);
                        }
                        x2.iushrn(1);
                    }
                }
                if (a.cmp(b) >= 0) {
                    a.isub(b);
                    x1.isub(x2);
                } else {
                    b.isub(a);
                    x2.isub(x1);
                }
            }
            var res;
            if (a.cmpn(1) === 0) {
                res = x1;
            } else {
                res = x2;
            }
            if (res.cmpn(0) < 0) {
                res.iadd(p);
            }
            return res;
        };
        BN2.prototype.gcd = function gcd(num) {
            if (this.isZero()) return num.abs();
            if (num.isZero()) return this.abs();
            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;
            for(var shift = 0; a.isEven() && b.isEven(); shift++){
                a.iushrn(1);
                b.iushrn(1);
            }
            do {
                while(a.isEven()){
                    a.iushrn(1);
                }
                while(b.isEven()){
                    b.iushrn(1);
                }
                var r = a.cmp(b);
                if (r < 0) {
                    var t = a;
                    a = b;
                    b = t;
                } else if (r === 0 || b.cmpn(1) === 0) {
                    break;
                }
                a.isub(b);
            }while (true)
            return b.iushln(shift);
        };
        BN2.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
        };
        BN2.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
        };
        BN2.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
        };
        BN2.prototype.andln = function andln(num) {
            return this.words[0] & num;
        };
        BN2.prototype.bincn = function bincn(bit) {
            assert(typeof bit === "number");
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;
            if (this.length <= s) {
                this._expand(s + 1);
                this.words[s] |= q;
                return this;
            }
            var carry = q;
            for(var i = s; carry !== 0 && i < this.length; i++){
                var w = this.words[i] | 0;
                w += carry;
                carry = w >>> 26;
                w &= 67108863;
                this.words[i] = w;
            }
            if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
            }
            return this;
        };
        BN2.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
        };
        BN2.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;
            if (this.negative !== 0 && !negative) return -1;
            if (this.negative === 0 && negative) return 1;
            this._strip();
            var res;
            if (this.length > 1) {
                res = 1;
            } else {
                if (negative) {
                    num = -num;
                }
                assert(num <= 67108863, "Number is too big");
                var w = this.words[0] | 0;
                res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0) return -res | 0;
            return res;
        };
        BN2.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0) return -1;
            if (this.negative === 0 && num.negative !== 0) return 1;
            var res = this.ucmp(num);
            if (this.negative !== 0) return -res | 0;
            return res;
        };
        BN2.prototype.ucmp = function ucmp(num) {
            if (this.length > num.length) return 1;
            if (this.length < num.length) return -1;
            var res = 0;
            for(var i = this.length - 1; i >= 0; i--){
                var a = this.words[i] | 0;
                var b = num.words[i] | 0;
                if (a === b) continue;
                if (a < b) {
                    res = -1;
                } else if (a > b) {
                    res = 1;
                }
                break;
            }
            return res;
        };
        BN2.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
        };
        BN2.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
        };
        BN2.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
        };
        BN2.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
        };
        BN2.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
        };
        BN2.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
        };
        BN2.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
        };
        BN2.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
        };
        BN2.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
        };
        BN2.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
        };
        BN2.red = function red(num) {
            return new Red(num);
        };
        BN2.prototype.toRed = function toRed(ctx) {
            assert(!this.red, "Already a number in reduction context");
            assert(this.negative === 0, "red works only with positives");
            return ctx.convertTo(this)._forceRed(ctx);
        };
        BN2.prototype.fromRed = function fromRed() {
            assert(this.red, "fromRed works only with numbers in reduction context");
            return this.red.convertFrom(this);
        };
        BN2.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
        };
        BN2.prototype.forceRed = function forceRed(ctx) {
            assert(!this.red, "Already a number in reduction context");
            return this._forceRed(ctx);
        };
        BN2.prototype.redAdd = function redAdd(num) {
            assert(this.red, "redAdd works only with red numbers");
            return this.red.add(this, num);
        };
        BN2.prototype.redIAdd = function redIAdd(num) {
            assert(this.red, "redIAdd works only with red numbers");
            return this.red.iadd(this, num);
        };
        BN2.prototype.redSub = function redSub(num) {
            assert(this.red, "redSub works only with red numbers");
            return this.red.sub(this, num);
        };
        BN2.prototype.redISub = function redISub(num) {
            assert(this.red, "redISub works only with red numbers");
            return this.red.isub(this, num);
        };
        BN2.prototype.redShl = function redShl(num) {
            assert(this.red, "redShl works only with red numbers");
            return this.red.shl(this, num);
        };
        BN2.prototype.redMul = function redMul(num) {
            assert(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.mul(this, num);
        };
        BN2.prototype.redIMul = function redIMul(num) {
            assert(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.imul(this, num);
        };
        BN2.prototype.redSqr = function redSqr() {
            assert(this.red, "redSqr works only with red numbers");
            this.red._verify1(this);
            return this.red.sqr(this);
        };
        BN2.prototype.redISqr = function redISqr() {
            assert(this.red, "redISqr works only with red numbers");
            this.red._verify1(this);
            return this.red.isqr(this);
        };
        BN2.prototype.redSqrt = function redSqrt() {
            assert(this.red, "redSqrt works only with red numbers");
            this.red._verify1(this);
            return this.red.sqrt(this);
        };
        BN2.prototype.redInvm = function redInvm() {
            assert(this.red, "redInvm works only with red numbers");
            this.red._verify1(this);
            return this.red.invm(this);
        };
        BN2.prototype.redNeg = function redNeg() {
            assert(this.red, "redNeg works only with red numbers");
            this.red._verify1(this);
            return this.red.neg(this);
        };
        BN2.prototype.redPow = function redPow(num) {
            assert(this.red && !num.red, "redPow(normalNum)");
            this.red._verify1(this);
            return this.red.pow(this, num);
        };
        var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
        };
        function MPrime(name, p) {
            this.name = name;
            this.p = new BN2(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN2(1).iushln(this.n).isub(this.p);
            this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN2(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
            var r = num;
            var rlen;
            do {
                this.split(r, this.tmp);
                r = this.imulK(r);
                r = r.iadd(this.tmp);
                rlen = r.bitLength();
            }while (rlen > this.n)
            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
                r.words[0] = 0;
                r.length = 1;
            } else if (cmp > 0) {
                r.isub(this.p);
            } else {
                if (r.strip !== void 0) {
                    r.strip();
                } else {
                    r._strip();
                }
            }
            return r;
        };
        MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
        };
        function K256() {
            MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }
        inherits(K256, MPrime);
        K256.prototype.split = function split(input, output) {
            var mask = 4194303;
            var outLen = Math.min(input.length, 9);
            for(var i = 0; i < outLen; i++){
                output.words[i] = input.words[i];
            }
            output.length = outLen;
            if (input.length <= 9) {
                input.words[0] = 0;
                input.length = 1;
                return;
            }
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;
            for(i = 10; i < input.length; i++){
                var next = input.words[i] | 0;
                input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
                prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
                input.length -= 10;
            } else {
                input.length -= 9;
            }
        };
        K256.prototype.imulK = function imulK(num) {
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;
            var lo = 0;
            for(var i = 0; i < num.length; i++){
                var w = num.words[i] | 0;
                lo += w * 977;
                num.words[i] = lo & 67108863;
                lo = w * 64 + (lo / 67108864 | 0);
            }
            if (num.words[num.length - 1] === 0) {
                num.length--;
                if (num.words[num.length - 1] === 0) {
                    num.length--;
                }
            }
            return num;
        };
        function P224() {
            MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }
        inherits(P224, MPrime);
        function P192() {
            MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }
        inherits(P192, MPrime);
        function P25519() {
            MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }
        inherits(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
            var carry = 0;
            for(var i = 0; i < num.length; i++){
                var hi = (num.words[i] | 0) * 19 + carry;
                var lo = hi & 67108863;
                hi >>>= 26;
                num.words[i] = lo;
                carry = hi;
            }
            if (carry !== 0) {
                num.words[num.length++] = carry;
            }
            return num;
        };
        BN2._prime = function prime(name) {
            if (primes[name]) return primes[name];
            var prime2;
            if (name === "k256") {
                prime2 = new K256();
            } else if (name === "p224") {
                prime2 = new P224();
            } else if (name === "p192") {
                prime2 = new P192();
            } else if (name === "p25519") {
                prime2 = new P25519();
            } else {
                throw new Error("Unknown prime " + name);
            }
            primes[name] = prime2;
            return prime2;
        };
        function Red(m) {
            if (typeof m === "string") {
                var prime = BN2._prime(m);
                this.m = prime.p;
                this.prime = prime;
            } else {
                assert(m.gtn(1), "modulus must be greater than 1");
                this.m = m;
                this.prime = null;
            }
        }
        Red.prototype._verify1 = function _verify1(a) {
            assert(a.negative === 0, "red works only with positives");
            assert(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
            assert((a.negative | b.negative) === 0, "red works only with positives");
            assert(a.red && a.red === b.red, "red works only with red numbers");
        };
        Red.prototype.imod = function imod(a) {
            if (this.prime) return this.prime.ireduce(a)._forceRed(this);
            move(a, a.umod(this.m)._forceRed(this));
            return a;
        };
        Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
                return a.clone();
            }
            return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
            this._verify2(a, b);
            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
            }
            return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);
            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
            }
            return res;
        };
        Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);
            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
                res.iadd(this.m);
            }
            return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);
            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
                res.iadd(this.m);
            }
            return res;
        };
        Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero()) return a.clone();
            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);
            if (mod3 === 3) {
                var pow = this.m.add(new BN2(1)).iushrn(2);
                return this.pow(a, pow);
            }
            var q = this.m.subn(1);
            var s = 0;
            while(!q.isZero() && q.andln(1) === 0){
                s++;
                q.iushrn(1);
            }
            assert(!q.isZero());
            var one = new BN2(1).toRed(this);
            var nOne = one.redNeg();
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN2(2 * z * z).toRed(this);
            while(this.pow(z, lpow).cmp(nOne) !== 0){
                z.redIAdd(nOne);
            }
            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while(t.cmp(one) !== 0){
                var tmp = t;
                for(var i = 0; tmp.cmp(one) !== 0; i++){
                    tmp = tmp.redSqr();
                }
                assert(i < m);
                var b = this.pow(c, new BN2(1).iushln(m - i - 1));
                r = r.redMul(b);
                c = b.redSqr();
                t = t.redMul(c);
                m = i;
            }
            return r;
        };
        Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
                inv.negative = 0;
                return this.imod(inv).redNeg();
            } else {
                return this.imod(inv);
            }
        };
        Red.prototype.pow = function pow(a, num) {
            if (num.isZero()) return new BN2(1).toRed(this);
            if (num.cmpn(1) === 0) return a.clone();
            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN2(1).toRed(this);
            wnd[1] = a;
            for(var i = 2; i < wnd.length; i++){
                wnd[i] = this.mul(wnd[i - 1], a);
            }
            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
                start = 26;
            }
            for(i = num.length - 1; i >= 0; i--){
                var word = num.words[i];
                for(var j = start - 1; j >= 0; j--){
                    var bit = word >> j & 1;
                    if (res !== wnd[0]) {
                        res = this.sqr(res);
                    }
                    if (bit === 0 && current === 0) {
                        currentLen = 0;
                        continue;
                    }
                    current <<= 1;
                    current |= bit;
                    currentLen++;
                    if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                    res = this.mul(res, wnd[current]);
                    currentLen = 0;
                    current = 0;
                }
                start = 26;
            }
            return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
            var r = num.umod(this.m);
            return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
        };
        BN2.mont = function mont(num) {
            return new Mont(num);
        };
        function Mont(m) {
            Red.call(this, m);
            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
                this.shift += 26 - this.shift % 26;
            }
            this.r = new BN2(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);
            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
        };
        Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
                a.words[0] = 0;
                a.length = 1;
                return a;
            }
            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
            }
            return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
            }
            return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
        };
    })(module, commonjsGlobal);
});
bn.BN;
const version = "logger/5.7.0";
let _permanentCensorErrors = false;
let _censorErrors = false;
const LogLevels = {
    debug: 1,
    default: 2,
    info: 2,
    warning: 3,
    error: 4,
    off: 5
};
let _logLevel = LogLevels["default"];
let _globalLogger = null;
function _checkNormalize() {
    try {
        const missing = [];
        [
            "NFD",
            "NFC",
            "NFKD",
            "NFKC"
        ].forEach((form)=>{
            try {
                if ("test".normalize(form) !== "test") {
                    throw new Error("bad normalize");
                }
            } catch (error) {
                missing.push(form);
            }
        });
        if (missing.length) {
            throw new Error("missing " + missing.join(", "));
        }
        if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
            throw new Error("broken implementation");
        }
    } catch (error) {
        return error.message;
    }
    return null;
}
const _normalizeError = _checkNormalize();
var LogLevel;
(function(LogLevel2) {
    LogLevel2["DEBUG"] = "DEBUG";
    LogLevel2["INFO"] = "INFO";
    LogLevel2["WARNING"] = "WARNING";
    LogLevel2["ERROR"] = "ERROR";
    LogLevel2["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function(ErrorCode2) {
    ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
    ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
    ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
    ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
    ErrorCode2["TIMEOUT"] = "TIMEOUT";
    ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
    ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
    ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
    ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
    ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
    ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
    ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
    ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
    ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
    ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
    ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
})(ErrorCode || (ErrorCode = {}));
const HEX = "0123456789abcdef";
class Logger {
    constructor(version2){
        Object.defineProperty(this, "version", {
            enumerable: true,
            value: version2,
            writable: false
        });
    }
    _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) {
            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
        }
        if (_logLevel > LogLevels[level]) {
            return;
        }
        console.log.apply(console, args);
    }
    debug(...args) {
        this._log(Logger.levels.DEBUG, args);
    }
    info(...args) {
        this._log(Logger.levels.INFO, args);
    }
    warn(...args) {
        this._log(Logger.levels.WARNING, args);
    }
    makeError(message, code, params) {
        if (_censorErrors) {
            return this.makeError("censored error", code, {});
        }
        if (!code) {
            code = Logger.errors.UNKNOWN_ERROR;
        }
        if (!params) {
            params = {};
        }
        const messageDetails = [];
        Object.keys(params).forEach((key)=>{
            const value = params[key];
            try {
                if (value instanceof Uint8Array) {
                    let hex = "";
                    for(let i = 0; i < value.length; i++){
                        hex += HEX[value[i] >> 4];
                        hex += HEX[value[i] & 15];
                    }
                    messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                } else {
                    messageDetails.push(key + "=" + JSON.stringify(value));
                }
            } catch (error2) {
                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
            }
        });
        messageDetails.push(`code=${code}`);
        messageDetails.push(`version=${this.version}`);
        const reason = message;
        let url = "";
        switch(code){
            case ErrorCode.NUMERIC_FAULT:
                {
                    url = "NUMERIC_FAULT";
                    const fault = message;
                    switch(fault){
                        case "overflow":
                        case "underflow":
                        case "division-by-zero":
                            url += "-" + fault;
                            break;
                        case "negative-power":
                        case "negative-width":
                            url += "-unsupported";
                            break;
                        case "unbound-bitwise-result":
                            url += "-unbound-result";
                            break;
                    }
                    break;
                }
            case ErrorCode.CALL_EXCEPTION:
            case ErrorCode.INSUFFICIENT_FUNDS:
            case ErrorCode.MISSING_NEW:
            case ErrorCode.NONCE_EXPIRED:
            case ErrorCode.REPLACEMENT_UNDERPRICED:
            case ErrorCode.TRANSACTION_REPLACED:
            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                url = code;
                break;
        }
        if (url) {
            message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
        }
        if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
        }
        const error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function(key) {
            error[key] = params[key];
        });
        return error;
    }
    throwError(message, code, params) {
        throw this.makeError(message, code, params);
    }
    throwArgumentError(message, name, value) {
        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
            argument: name,
            value
        });
    }
    assert(condition, message, code, params) {
        if (!!condition) {
            return;
        }
        this.throwError(message, code, params);
    }
    assertArgument(condition, message, name, value) {
        if (!!condition) {
            return;
        }
        this.throwArgumentError(message, name, value);
    }
    checkNormalize(message) {
        if (_normalizeError) {
            this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "String.prototype.normalize",
                form: _normalizeError
            });
        }
    }
    checkSafeUint53(value, message) {
        if (typeof value !== "number") {
            return;
        }
        if (message == null) {
            message = "value not safe";
        }
        if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "out-of-safe-range",
                value
            });
        }
        if (value % 1) {
            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "non-integer",
                value
            });
        }
    }
    checkArgumentCount(count, expectedCount, message) {
        if (message) {
            message = ": " + message;
        } else {
            message = "";
        }
        if (count < expectedCount) {
            this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                count,
                expectedCount
            });
        }
        if (count > expectedCount) {
            this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                count,
                expectedCount
            });
        }
    }
    checkNew(target, kind) {
        if (target === Object || target == null) {
            this.throwError("missing new", Logger.errors.MISSING_NEW, {
                name: kind.name
            });
        }
    }
    checkAbstract(target, kind) {
        if (target === kind) {
            this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, {
                name: target.name,
                operation: "new"
            });
        } else if (target === Object || target == null) {
            this.throwError("missing new", Logger.errors.MISSING_NEW, {
                name: kind.name
            });
        }
    }
    static globalLogger() {
        if (!_globalLogger) {
            _globalLogger = new Logger(version);
        }
        return _globalLogger;
    }
    static setCensorship(censorship, permanent) {
        if (!censorship && permanent) {
            this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
            });
        }
        if (_permanentCensorErrors) {
            if (!censorship) {
                return;
            }
            this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
            });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
    }
    static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
            Logger.globalLogger().warn("invalid log level - " + logLevel);
            return;
        }
        _logLevel = level;
    }
    static from(version2) {
        return new Logger(version2);
    }
}
Logger.errors = ErrorCode;
Logger.levels = LogLevel;
const version1 = "bytes/5.7.0";
const logger2 = new Logger(version1);
function isHexable(value) {
    return !!value.toHexString;
}
function addSlice(array) {
    if (array.slice) {
        return array;
    }
    array.slice = function() {
        const args = Array.prototype.slice.call(arguments);
        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
    };
    return array;
}
function isBytesLike(value) {
    return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
    if (value == null) {
        return false;
    }
    if (value.constructor === Uint8Array) {
        return true;
    }
    if (typeof value === "string") {
        return false;
    }
    if (!isInteger(value.length) || value.length < 0) {
        return false;
    }
    for(let i = 0; i < value.length; i++){
        const v = value[i];
        if (!isInteger(v) || v < 0 || v >= 256) {
            return false;
        }
    }
    return true;
}
function arrayify(value, options) {
    if (!options) {
        options = {};
    }
    if (typeof value === "number") {
        logger2.checkSafeUint53(value, "invalid arrayify value");
        const result = [];
        while(value){
            result.unshift(value & 255);
            value = parseInt(String(value / 256));
        }
        if (result.length === 0) {
            result.push(0);
        }
        return addSlice(new Uint8Array(result));
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
        value = "0x" + value;
    }
    if (isHexable(value)) {
        value = value.toHexString();
    }
    if (isHexString(value)) {
        let hex = value.substring(2);
        if (hex.length % 2) {
            if (options.hexPad === "left") {
                hex = "0" + hex;
            } else if (options.hexPad === "right") {
                hex += "0";
            } else {
                logger2.throwArgumentError("hex data is odd-length", "value", value);
            }
        }
        const result = [];
        for(let i = 0; i < hex.length; i += 2){
            result.push(parseInt(hex.substring(i, i + 2), 16));
        }
        return addSlice(new Uint8Array(result));
    }
    if (isBytes(value)) {
        return addSlice(new Uint8Array(value));
    }
    return logger2.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
    const objects = items.map((item)=>arrayify(item));
    const length = objects.reduce((accum, item)=>accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object)=>{
        result.set(object, offset);
        return offset + object.length;
    }, 0);
    return addSlice(result);
}
function stripZeros(value) {
    let result = arrayify(value);
    if (result.length === 0) {
        return result;
    }
    let start = 0;
    while(start < result.length && result[start] === 0){
        start++;
    }
    if (start) {
        result = result.slice(start);
    }
    return result;
}
function zeroPad(value, length) {
    value = arrayify(value);
    if (value.length > length) {
        logger2.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice(result);
}
function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
    }
    if (length && value.length !== 2 + 2 * length) {
        return false;
    }
    return true;
}
const HexCharacters = "0123456789abcdef";
function hexlify(value, options) {
    if (!options) {
        options = {};
    }
    if (typeof value === "number") {
        logger2.checkSafeUint53(value, "invalid hexlify value");
        let hex = "";
        while(value){
            hex = HexCharacters[value & 15] + hex;
            value = Math.floor(value / 16);
        }
        if (hex.length) {
            if (hex.length % 2) {
                hex = "0" + hex;
            }
            return "0x" + hex;
        }
        return "0x00";
    }
    if (typeof value === "bigint") {
        value = value.toString(16);
        if (value.length % 2) {
            return "0x0" + value;
        }
        return "0x" + value;
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
        value = "0x" + value;
    }
    if (isHexable(value)) {
        return value.toHexString();
    }
    if (isHexString(value)) {
        if (value.length % 2) {
            if (options.hexPad === "left") {
                value = "0x0" + value.substring(2);
            } else if (options.hexPad === "right") {
                value += "0";
            } else {
                logger2.throwArgumentError("hex data is odd-length", "value", value);
            }
        }
        return value.toLowerCase();
    }
    if (isBytes(value)) {
        let result = "0x";
        for(let i = 0; i < value.length; i++){
            let v = value[i];
            result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
        }
        return result;
    }
    return logger2.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
    if (typeof data !== "string") {
        data = hexlify(data);
    } else if (!isHexString(data) || data.length % 2) {
        return null;
    }
    return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
    if (typeof data !== "string") {
        data = hexlify(data);
    } else if (!isHexString(data) || data.length % 2) {
        logger2.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
        return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
}
function hexConcat(items) {
    let result = "0x";
    items.forEach((item)=>{
        result += hexlify(item).substring(2);
    });
    return result;
}
function hexValue(value) {
    const trimmed = hexStripZeros(hexlify(value, {
        hexPad: "left"
    }));
    if (trimmed === "0x") {
        return "0x0";
    }
    return trimmed;
}
function hexStripZeros(value) {
    if (typeof value !== "string") {
        value = hexlify(value);
    }
    if (!isHexString(value)) {
        logger2.throwArgumentError("invalid hex string", "value", value);
    }
    value = value.substring(2);
    let offset = 0;
    while(offset < value.length && value[offset] === "0"){
        offset++;
    }
    return "0x" + value.substring(offset);
}
function hexZeroPad(value, length) {
    if (typeof value !== "string") {
        value = hexlify(value);
    } else if (!isHexString(value)) {
        logger2.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
        logger2.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while(value.length < 2 * length + 2){
        value = "0x0" + value.substring(2);
    }
    return value;
}
function splitSignature(signature) {
    const result = {
        r: "0x",
        s: "0x",
        _vs: "0x",
        recoveryParam: 0,
        v: 0,
        yParityAndS: "0x",
        compact: "0x"
    };
    if (isBytesLike(signature)) {
        let bytes = arrayify(signature);
        if (bytes.length === 64) {
            result.v = 27 + (bytes[32] >> 7);
            bytes[32] &= 127;
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
        } else if (bytes.length === 65) {
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
            result.v = bytes[64];
        } else {
            logger2.throwArgumentError("invalid signature string", "signature", signature);
        }
        if (result.v < 27) {
            if (result.v === 0 || result.v === 1) {
                result.v += 27;
            } else {
                logger2.throwArgumentError("signature invalid v byte", "signature", signature);
            }
        }
        result.recoveryParam = 1 - result.v % 2;
        if (result.recoveryParam) {
            bytes[32] |= 128;
        }
        result._vs = hexlify(bytes.slice(32, 64));
    } else {
        result.r = signature.r;
        result.s = signature.s;
        result.v = signature.v;
        result.recoveryParam = signature.recoveryParam;
        result._vs = signature._vs;
        if (result._vs != null) {
            const vs2 = zeroPad(arrayify(result._vs), 32);
            result._vs = hexlify(vs2);
            const recoveryParam = vs2[0] >= 128 ? 1 : 0;
            if (result.recoveryParam == null) {
                result.recoveryParam = recoveryParam;
            } else if (result.recoveryParam !== recoveryParam) {
                logger2.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
            }
            vs2[0] &= 127;
            const s = hexlify(vs2);
            if (result.s == null) {
                result.s = s;
            } else if (result.s !== s) {
                logger2.throwArgumentError("signature v mismatch _vs", "signature", signature);
            }
        }
        if (result.recoveryParam == null) {
            if (result.v == null) {
                logger2.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
            } else if (result.v === 0 || result.v === 1) {
                result.recoveryParam = result.v;
            } else {
                result.recoveryParam = 1 - result.v % 2;
            }
        } else {
            if (result.v == null) {
                result.v = 27 + result.recoveryParam;
            } else {
                const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
                if (result.recoveryParam !== recId) {
                    logger2.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                }
            }
        }
        if (result.r == null || !isHexString(result.r)) {
            logger2.throwArgumentError("signature missing or invalid r", "signature", signature);
        } else {
            result.r = hexZeroPad(result.r, 32);
        }
        if (result.s == null || !isHexString(result.s)) {
            logger2.throwArgumentError("signature missing or invalid s", "signature", signature);
        } else {
            result.s = hexZeroPad(result.s, 32);
        }
        const vs = arrayify(result.s);
        if (vs[0] >= 128) {
            logger2.throwArgumentError("signature s out of range", "signature", signature);
        }
        if (result.recoveryParam) {
            vs[0] |= 128;
        }
        const _vs = hexlify(vs);
        if (result._vs) {
            if (!isHexString(result._vs)) {
                logger2.throwArgumentError("signature invalid _vs", "signature", signature);
            }
            result._vs = hexZeroPad(result._vs, 32);
        }
        if (result._vs == null) {
            result._vs = _vs;
        } else if (result._vs !== _vs) {
            logger2.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
        }
    }
    result.yParityAndS = result._vs;
    result.compact = result.r + result.yParityAndS.substring(2);
    return result;
}
function joinSignature(signature) {
    signature = splitSignature(signature);
    return hexlify(concat([
        signature.r,
        signature.s,
        signature.recoveryParam ? "0x1c" : "0x1b"
    ]));
}
const version2 = "bignumber/5.7.0";
var BN = bn.BN;
const logger21 = new Logger(version2);
const _constructorGuard = {};
function isBigNumberish(value) {
    return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
let _warnedToStringRadix = false;
class BigNumber {
    constructor(constructorGuard, hex){
        if (constructorGuard !== _constructorGuard) {
            logger21.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new (BigNumber)"
            });
        }
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
    }
    fromTwos(value) {
        return toBigNumber(toBN(this).fromTwos(value));
    }
    toTwos(value) {
        return toBigNumber(toBN(this).toTwos(value));
    }
    abs() {
        if (this._hex[0] === "-") {
            return BigNumber.from(this._hex.substring(1));
        }
        return this;
    }
    add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
    }
    sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
    }
    div(other) {
        const o = BigNumber.from(other);
        if (o.isZero()) {
            throwFault("division-by-zero", "div");
        }
        return toBigNumber(toBN(this).div(toBN(other)));
    }
    mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
    }
    mod(other) {
        const value = toBN(other);
        if (value.isNeg()) {
            throwFault("division-by-zero", "mod");
        }
        return toBigNumber(toBN(this).umod(value));
    }
    pow(other) {
        const value = toBN(other);
        if (value.isNeg()) {
            throwFault("negative-power", "pow");
        }
        return toBigNumber(toBN(this).pow(value));
    }
    and(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "and");
        }
        return toBigNumber(toBN(this).and(value));
    }
    or(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "or");
        }
        return toBigNumber(toBN(this).or(value));
    }
    xor(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "xor");
        }
        return toBigNumber(toBN(this).xor(value));
    }
    mask(value) {
        if (this.isNegative() || value < 0) {
            throwFault("negative-width", "mask");
        }
        return toBigNumber(toBN(this).maskn(value));
    }
    shl(value) {
        if (this.isNegative() || value < 0) {
            throwFault("negative-width", "shl");
        }
        return toBigNumber(toBN(this).shln(value));
    }
    shr(value) {
        if (this.isNegative() || value < 0) {
            throwFault("negative-width", "shr");
        }
        return toBigNumber(toBN(this).shrn(value));
    }
    eq(other) {
        return toBN(this).eq(toBN(other));
    }
    lt(other) {
        return toBN(this).lt(toBN(other));
    }
    lte(other) {
        return toBN(this).lte(toBN(other));
    }
    gt(other) {
        return toBN(this).gt(toBN(other));
    }
    gte(other) {
        return toBN(this).gte(toBN(other));
    }
    isNegative() {
        return this._hex[0] === "-";
    }
    isZero() {
        return toBN(this).isZero();
    }
    toNumber() {
        try {
            return toBN(this).toNumber();
        } catch (error) {
            throwFault("overflow", "toNumber", this.toString());
        }
        return null;
    }
    toBigInt() {
        try {
            return BigInt(this.toString());
        } catch (e) {}
        return logger21.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
            value: this.toString()
        });
    }
    toString() {
        if (arguments.length > 0) {
            if (arguments[0] === 10) {
                if (!_warnedToStringRadix) {
                    _warnedToStringRadix = true;
                    logger21.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                }
            } else if (arguments[0] === 16) {
                logger21.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
            } else {
                logger21.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
            }
        }
        return toBN(this).toString(10);
    }
    toHexString() {
        return this._hex;
    }
    toJSON(key) {
        return {
            type: "BigNumber",
            hex: this.toHexString()
        };
    }
    static from(value) {
        if (value instanceof BigNumber) {
            return value;
        }
        if (typeof value === "string") {
            if (value.match(/^-?0x[0-9a-f]+$/i)) {
                return new BigNumber(_constructorGuard, toHex(value));
            }
            if (value.match(/^-?[0-9]+$/)) {
                return new BigNumber(_constructorGuard, toHex(new BN(value)));
            }
            return logger21.throwArgumentError("invalid BigNumber string", "value", value);
        }
        if (typeof value === "number") {
            if (value % 1) {
                throwFault("underflow", "BigNumber.from", value);
            }
            if (value >= 9007199254740991 || value <= -9007199254740991) {
                throwFault("overflow", "BigNumber.from", value);
            }
            return BigNumber.from(String(value));
        }
        const anyValue = value;
        if (typeof anyValue === "bigint") {
            return BigNumber.from(anyValue.toString());
        }
        if (isBytes(anyValue)) {
            return BigNumber.from(hexlify(anyValue));
        }
        if (anyValue) {
            if (anyValue.toHexString) {
                const hex = anyValue.toHexString();
                if (typeof hex === "string") {
                    return BigNumber.from(hex);
                }
            } else {
                let hex = anyValue._hex;
                if (hex == null && anyValue.type === "BigNumber") {
                    hex = anyValue.hex;
                }
                if (typeof hex === "string") {
                    if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
                        return BigNumber.from(hex);
                    }
                }
            }
        }
        return logger21.throwArgumentError("invalid BigNumber value", "value", value);
    }
    static isBigNumber(value) {
        return !!(value && value._isBigNumber);
    }
}
function toHex(value) {
    if (typeof value !== "string") {
        return toHex(value.toString(16));
    }
    if (value[0] === "-") {
        value = value.substring(1);
        if (value[0] === "-") {
            logger21.throwArgumentError("invalid hex", "value", value);
        }
        value = toHex(value);
        if (value === "0x00") {
            return value;
        }
        return "-" + value;
    }
    if (value.substring(0, 2) !== "0x") {
        value = "0x" + value;
    }
    if (value === "0x") {
        return "0x00";
    }
    if (value.length % 2) {
        value = "0x0" + value.substring(2);
    }
    while(value.length > 4 && value.substring(0, 4) === "0x00"){
        value = "0x" + value.substring(4);
    }
    return value;
}
function toBigNumber(value) {
    return BigNumber.from(toHex(value));
}
function toBN(value) {
    const hex = BigNumber.from(value).toHexString();
    if (hex[0] === "-") {
        return new BN("-" + hex.substring(3), 16);
    }
    return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
    const params = {
        fault,
        operation
    };
    if (value != null) {
        params.value = value;
    }
    return logger21.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
    return new BN(value, 36).toString(16);
}
function _base16To36(value) {
    return new BN(value, 16).toString(36);
}
const logger$1 = new Logger(version2);
const _constructorGuard$1 = {};
const Zero = BigNumber.from(0);
const NegativeOne = BigNumber.from(-1);
function throwFault$1(message, fault, operation, value) {
    const params = {
        fault,
        operation
    };
    if (value !== void 0) {
        params.value = value;
    }
    return logger$1.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
let zeros = "0";
while(zeros.length < 256){
    zeros += zeros;
}
function getMultiplier(decimals) {
    if (typeof decimals !== "number") {
        try {
            decimals = BigNumber.from(decimals).toNumber();
        } catch (e) {}
    }
    if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
        return "1" + zeros.substring(0, decimals);
    }
    return logger$1.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
    if (decimals == null) {
        decimals = 0;
    }
    const multiplier = getMultiplier(decimals);
    value = BigNumber.from(value);
    const negative = value.lt(Zero);
    if (negative) {
        value = value.mul(NegativeOne);
    }
    let fraction = value.mod(multiplier).toString();
    while(fraction.length < multiplier.length - 1){
        fraction = "0" + fraction;
    }
    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    const whole = value.div(multiplier).toString();
    if (multiplier.length === 1) {
        value = whole;
    } else {
        value = whole + "." + fraction;
    }
    if (negative) {
        value = "-" + value;
    }
    return value;
}
function parseFixed(value, decimals) {
    if (decimals == null) {
        decimals = 0;
    }
    const multiplier = getMultiplier(decimals);
    if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
        logger$1.throwArgumentError("invalid decimal value", "value", value);
    }
    const negative = value.substring(0, 1) === "-";
    if (negative) {
        value = value.substring(1);
    }
    if (value === ".") {
        logger$1.throwArgumentError("missing value", "value", value);
    }
    const comps = value.split(".");
    if (comps.length > 2) {
        logger$1.throwArgumentError("too many decimal points", "value", value);
    }
    let whole = comps[0], fraction = comps[1];
    if (!whole) {
        whole = "0";
    }
    if (!fraction) {
        fraction = "0";
    }
    while(fraction[fraction.length - 1] === "0"){
        fraction = fraction.substring(0, fraction.length - 1);
    }
    if (fraction.length > multiplier.length - 1) {
        throwFault$1("fractional component exceeds decimals", "underflow", "parseFixed");
    }
    if (fraction === "") {
        fraction = "0";
    }
    while(fraction.length < multiplier.length - 1){
        fraction += "0";
    }
    const wholeValue = BigNumber.from(whole);
    const fractionValue = BigNumber.from(fraction);
    let wei = wholeValue.mul(multiplier).add(fractionValue);
    if (negative) {
        wei = wei.mul(NegativeOne);
    }
    return wei;
}
class FixedFormat {
    constructor(constructorGuard, signed, width, decimals){
        if (constructorGuard !== _constructorGuard$1) {
            logger$1.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
            });
        }
        this.signed = signed;
        this.width = width;
        this.decimals = decimals;
        this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        this._multiplier = getMultiplier(decimals);
        Object.freeze(this);
    }
    static from(value) {
        if (value instanceof FixedFormat) {
            return value;
        }
        if (typeof value === "number") {
            value = `fixed128x${value}`;
        }
        let signed = true;
        let width = 128;
        let decimals = 18;
        if (typeof value === "string") {
            if (value === "fixed") ;
            else if (value === "ufixed") {
                signed = false;
            } else {
                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                if (!match) {
                    logger$1.throwArgumentError("invalid fixed format", "format", value);
                }
                signed = match[1] !== "u";
                width = parseInt(match[2]);
                decimals = parseInt(match[3]);
            }
        } else if (value) {
            const check = (key, type, defaultValue)=>{
                if (value[key] == null) {
                    return defaultValue;
                }
                if (typeof value[key] !== type) {
                    logger$1.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                }
                return value[key];
            };
            signed = check("signed", "boolean", signed);
            width = check("width", "number", width);
            decimals = check("decimals", "number", decimals);
        }
        if (width % 8) {
            logger$1.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
        }
        if (decimals > 80) {
            logger$1.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
        }
        return new FixedFormat(_constructorGuard$1, signed, width, decimals);
    }
}
class FixedNumber {
    constructor(constructorGuard, hex, value, format){
        if (constructorGuard !== _constructorGuard$1) {
            logger$1.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
            });
        }
        this.format = format;
        this._hex = hex;
        this._value = value;
        this._isFixedNumber = true;
        Object.freeze(this);
    }
    _checkFormat(other) {
        if (this.format.name !== other.format.name) {
            logger$1.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
        }
    }
    addUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
    }
    subUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
    }
    mulUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
    }
    divUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
    }
    floor() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
            comps.push("0");
        }
        let result = FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (this.isNegative() && hasFraction) {
            result = result.subUnsafe(ONE.toFormat(result.format));
        }
        return result;
    }
    ceiling() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
            comps.push("0");
        }
        let result = FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (!this.isNegative() && hasFraction) {
            result = result.addUnsafe(ONE.toFormat(result.format));
        }
        return result;
    }
    round(decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        const comps = this.toString().split(".");
        if (comps.length === 1) {
            comps.push("0");
        }
        if (decimals < 0 || decimals > 80 || decimals % 1) {
            logger$1.throwArgumentError("invalid decimal count", "decimals", decimals);
        }
        if (comps[1].length <= decimals) {
            return this;
        }
        const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
        const bump = BUMP.toFormat(this.format);
        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
    }
    isZero() {
        return this._value === "0.0" || this._value === "0";
    }
    isNegative() {
        return this._value[0] === "-";
    }
    toString() {
        return this._value;
    }
    toHexString(width) {
        if (width == null) {
            return this._hex;
        }
        if (width % 8) {
            logger$1.throwArgumentError("invalid byte width", "width", width);
        }
        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
        return hexZeroPad(hex, width / 8);
    }
    toUnsafeFloat() {
        return parseFloat(this.toString());
    }
    toFormat(format) {
        return FixedNumber.fromString(this._value, format);
    }
    static fromValue(value, decimals, format) {
        if (format == null && decimals != null && !isBigNumberish(decimals)) {
            format = decimals;
            decimals = null;
        }
        if (decimals == null) {
            decimals = 0;
        }
        if (format == null) {
            format = "fixed";
        }
        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
    }
    static fromString(value, format) {
        if (format == null) {
            format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        const numeric = parseFixed(value, fixedFormat.decimals);
        if (!fixedFormat.signed && numeric.lt(Zero)) {
            throwFault$1("unsigned value cannot be negative", "overflow", "value", value);
        }
        let hex = null;
        if (fixedFormat.signed) {
            hex = numeric.toTwos(fixedFormat.width).toHexString();
        } else {
            hex = numeric.toHexString();
            hex = hexZeroPad(hex, fixedFormat.width / 8);
        }
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new FixedNumber(_constructorGuard$1, hex, decimal, fixedFormat);
    }
    static fromBytes(value, format) {
        if (format == null) {
            format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        if (arrayify(value).length > fixedFormat.width / 8) {
            throw new Error("overflow");
        }
        let numeric = BigNumber.from(value);
        if (fixedFormat.signed) {
            numeric = numeric.fromTwos(fixedFormat.width);
        }
        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new FixedNumber(_constructorGuard$1, hex, decimal, fixedFormat);
    }
    static from(value, format) {
        if (typeof value === "string") {
            return FixedNumber.fromString(value, format);
        }
        if (isBytes(value)) {
            return FixedNumber.fromBytes(value, format);
        }
        try {
            return FixedNumber.fromValue(value, 0, format);
        } catch (error) {
            if (error.code !== Logger.errors.INVALID_ARGUMENT) {
                throw error;
            }
        }
        return logger$1.throwArgumentError("invalid FixedNumber value", "value", value);
    }
    static isFixedNumber(value) {
        return !!(value && value._isFixedNumber);
    }
}
const ONE = FixedNumber.from(1);
const BUMP = FixedNumber.from("0.5");
const version3 = "properties/5.7.0";
var __awaiter = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger22 = new Logger(version3);
function defineReadOnly(object, name, value) {
    Object.defineProperty(object, name, {
        enumerable: true,
        value,
        writable: false
    });
}
function getStatic(ctor, key) {
    for(let i = 0; i < 32; i++){
        if (ctor[key]) {
            return ctor[key];
        }
        if (!ctor.prototype || typeof ctor.prototype !== "object") {
            break;
        }
        ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
}
function resolveProperties(object) {
    return __awaiter(this, void 0, void 0, function*() {
        const promises = Object.keys(object).map((key)=>{
            const value = object[key];
            return Promise.resolve(value).then((v)=>({
                    key,
                    value: v
                }));
        });
        const results = yield Promise.all(promises);
        return results.reduce((accum, result)=>{
            accum[result.key] = result.value;
            return accum;
        }, {});
    });
}
function checkProperties(object, properties) {
    if (!object || typeof object !== "object") {
        logger22.throwArgumentError("invalid object", "object", object);
    }
    Object.keys(object).forEach((key)=>{
        if (!properties[key]) {
            logger22.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
        }
    });
}
function shallowCopy(object) {
    const result = {};
    for(const key in object){
        result[key] = object[key];
    }
    return result;
}
const opaque = {
    bigint: true,
    boolean: true,
    function: true,
    number: true,
    string: true
};
function _isFrozen(object) {
    if (object === void 0 || object === null || opaque[typeof object]) {
        return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
        if (!Object.isFrozen(object)) {
            return false;
        }
        const keys = Object.keys(object);
        for(let i = 0; i < keys.length; i++){
            let value = null;
            try {
                value = object[keys[i]];
            } catch (error) {
                continue;
            }
            if (!_isFrozen(value)) {
                return false;
            }
        }
        return true;
    }
    return logger22.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function _deepCopy(object) {
    if (_isFrozen(object)) {
        return object;
    }
    if (Array.isArray(object)) {
        return Object.freeze(object.map((item)=>deepCopy(item)));
    }
    if (typeof object === "object") {
        const result = {};
        for(const key in object){
            const value = object[key];
            if (value === void 0) {
                continue;
            }
            defineReadOnly(result, key, deepCopy(value));
        }
        return result;
    }
    return logger22.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
    return _deepCopy(object);
}
class Description {
    constructor(info){
        for(const key in info){
            this[key] = deepCopy(info[key]);
        }
    }
}
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
var globalContext;
if (typeof window !== "undefined") {
    globalContext = window;
} else if (typeof self !== "undefined") {
    globalContext = self;
} else {
    globalContext = {};
}
if (typeof globalContext.setTimeout === "function") {
    cachedSetTimeout = setTimeout;
}
if (typeof globalContext.clearTimeout === "function") {
    cachedClearTimeout = clearTimeout;
}
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0);
    }
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        return clearTimeout(marker);
    }
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            return cachedClearTimeout.call(null, marker);
        } catch (e2) {
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}
function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len){
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for(var i = 1; i < arguments.length; i++){
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
}
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
var title = "browser";
var platform = "browser";
var browser = true;
var argv = [];
var version4 = "";
var versions = {};
var release = {};
var config = {};
function noop() {}
var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;
function binding(name) {
    throw new Error("process.binding is not supported");
}
function cwd() {
    return "/";
}
function chdir(dir) {
    throw new Error("process.chdir is not supported");
}
function umask() {
    return 0;
}
var performance = globalContext.performance || {};
var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
    return new Date().getTime();
};
function hrtime(previousTimestamp) {
    var clocktime = performanceNow.call(performance) * 1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor(clocktime % 1 * 1e9);
    if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds < 0) {
            seconds--;
            nanoseconds += 1e9;
        }
    }
    return [
        seconds,
        nanoseconds
    ];
}
var startTime = new Date();
function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1e3;
}
var process = {
    nextTick,
    title,
    browser,
    env: {
        NODE_ENV: "production"
    },
    argv,
    version: version4,
    versions,
    on,
    addListener,
    once,
    off,
    removeListener,
    removeAllListeners,
    emit,
    binding,
    cwd,
    chdir,
    umask,
    hrtime,
    platform,
    release,
    config,
    uptime
};
var commonjsGlobal1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule1(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path, base) {
            return commonjsRequire1(path, base === void 0 || base === null ? module.path : base);
        }
    }, fn(module, module.exports), module.exports;
}
function commonjsRequire1() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var sha3 = createCommonjsModule1(function(module) {
    (function() {
        var INPUT_ERROR = "input is invalid type";
        var FINALIZE_ERROR = "finalize already called";
        var WINDOW = typeof window === "object";
        var root = WINDOW ? window : {};
        if (root.JS_SHA3_NO_WINDOW) {
            WINDOW = false;
        }
        var WEB_WORKER = !WINDOW && typeof self === "object";
        var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
        if (NODE_JS) {
            root = commonjsGlobal1;
        } else if (WEB_WORKER) {
            root = self;
        }
        var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module.exports;
        var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
        var HEX_CHARS = "0123456789abcdef".split("");
        var SHAKE_PADDING = [
            31,
            7936,
            2031616,
            520093696
        ];
        var CSHAKE_PADDING = [
            4,
            1024,
            262144,
            67108864
        ];
        var KECCAK_PADDING = [
            1,
            256,
            65536,
            16777216
        ];
        var PADDING = [
            6,
            1536,
            393216,
            100663296
        ];
        var SHIFT = [
            0,
            8,
            16,
            24
        ];
        var RC = [
            1,
            0,
            32898,
            0,
            32906,
            2147483648,
            2147516416,
            2147483648,
            32907,
            0,
            2147483649,
            0,
            2147516545,
            2147483648,
            32777,
            2147483648,
            138,
            0,
            136,
            0,
            2147516425,
            0,
            2147483658,
            0,
            2147516555,
            0,
            139,
            2147483648,
            32905,
            2147483648,
            32771,
            2147483648,
            32770,
            2147483648,
            128,
            2147483648,
            32778,
            0,
            2147483658,
            2147483648,
            2147516545,
            2147483648,
            32896,
            2147483648,
            2147483649,
            0,
            2147516424,
            2147483648
        ];
        var BITS = [
            224,
            256,
            384,
            512
        ];
        var SHAKE_BITS = [
            128,
            256
        ];
        var OUTPUT_TYPES = [
            "hex",
            "buffer",
            "arrayBuffer",
            "array",
            "digest"
        ];
        var CSHAKE_BYTEPAD = {
            "128": 168,
            "256": 136
        };
        if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
            Array.isArray = function(obj) {
                return Object.prototype.toString.call(obj) === "[object Array]";
            };
        }
        if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
            ArrayBuffer.isView = function(obj) {
                return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
            };
        }
        var createOutputMethod = function(bits2, padding, outputType) {
            return function(message) {
                return new Keccak(bits2, padding, bits2).update(message)[outputType]();
            };
        };
        var createShakeOutputMethod = function(bits2, padding, outputType) {
            return function(message, outputBits) {
                return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
            };
        };
        var createCshakeOutputMethod = function(bits2, padding, outputType) {
            return function(message, outputBits, n, s) {
                return methods["cshake" + bits2].update(message, outputBits, n, s)[outputType]();
            };
        };
        var createKmacOutputMethod = function(bits2, padding, outputType) {
            return function(key, message, outputBits, s) {
                return methods["kmac" + bits2].update(key, message, outputBits, s)[outputType]();
            };
        };
        var createOutputMethods = function(method, createMethod2, bits2, padding) {
            for(var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2){
                var type = OUTPUT_TYPES[i2];
                method[type] = createMethod2(bits2, padding, type);
            }
            return method;
        };
        var createMethod = function(bits2, padding) {
            var method = createOutputMethod(bits2, padding, "hex");
            method.create = function() {
                return new Keccak(bits2, padding, bits2);
            };
            method.update = function(message) {
                return method.create().update(message);
            };
            return createOutputMethods(method, createOutputMethod, bits2, padding);
        };
        var createShakeMethod = function(bits2, padding) {
            var method = createShakeOutputMethod(bits2, padding, "hex");
            method.create = function(outputBits) {
                return new Keccak(bits2, padding, outputBits);
            };
            method.update = function(message, outputBits) {
                return method.create(outputBits).update(message);
            };
            return createOutputMethods(method, createShakeOutputMethod, bits2, padding);
        };
        var createCshakeMethod = function(bits2, padding) {
            var w = CSHAKE_BYTEPAD[bits2];
            var method = createCshakeOutputMethod(bits2, padding, "hex");
            method.create = function(outputBits, n, s) {
                if (!n && !s) {
                    return methods["shake" + bits2].create(outputBits);
                } else {
                    return new Keccak(bits2, padding, outputBits).bytepad([
                        n,
                        s
                    ], w);
                }
            };
            method.update = function(message, outputBits, n, s) {
                return method.create(outputBits, n, s).update(message);
            };
            return createOutputMethods(method, createCshakeOutputMethod, bits2, padding);
        };
        var createKmacMethod = function(bits2, padding) {
            var w = CSHAKE_BYTEPAD[bits2];
            var method = createKmacOutputMethod(bits2, padding, "hex");
            method.create = function(key, outputBits, s) {
                return new Kmac(bits2, padding, outputBits).bytepad([
                    "KMAC",
                    s
                ], w).bytepad([
                    key
                ], w);
            };
            method.update = function(key, message, outputBits, s) {
                return method.create(key, outputBits, s).update(message);
            };
            return createOutputMethods(method, createKmacOutputMethod, bits2, padding);
        };
        var algorithms = [
            {
                name: "keccak",
                padding: KECCAK_PADDING,
                bits: BITS,
                createMethod
            },
            {
                name: "sha3",
                padding: PADDING,
                bits: BITS,
                createMethod
            },
            {
                name: "shake",
                padding: SHAKE_PADDING,
                bits: SHAKE_BITS,
                createMethod: createShakeMethod
            },
            {
                name: "cshake",
                padding: CSHAKE_PADDING,
                bits: SHAKE_BITS,
                createMethod: createCshakeMethod
            },
            {
                name: "kmac",
                padding: CSHAKE_PADDING,
                bits: SHAKE_BITS,
                createMethod: createKmacMethod
            }
        ];
        var methods = {}, methodNames = [];
        for(var i = 0; i < algorithms.length; ++i){
            var algorithm = algorithms[i];
            var bits = algorithm.bits;
            for(var j = 0; j < bits.length; ++j){
                var methodName = algorithm.name + "_" + bits[j];
                methodNames.push(methodName);
                methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
                if (algorithm.name !== "sha3") {
                    var newMethodName = algorithm.name + bits[j];
                    methodNames.push(newMethodName);
                    methods[newMethodName] = methods[methodName];
                }
            }
        }
        function Keccak(bits2, padding, outputBits) {
            this.blocks = [];
            this.s = [];
            this.padding = padding;
            this.outputBits = outputBits;
            this.reset = true;
            this.finalized = false;
            this.block = 0;
            this.start = 0;
            this.blockCount = 1600 - (bits2 << 1) >> 5;
            this.byteCount = this.blockCount << 2;
            this.outputBlocks = outputBits >> 5;
            this.extraBytes = (outputBits & 31) >> 3;
            for(var i2 = 0; i2 < 50; ++i2){
                this.s[i2] = 0;
            }
        }
        Keccak.prototype.update = function(message) {
            if (this.finalized) {
                throw new Error(FINALIZE_ERROR);
            }
            var notString, type = typeof message;
            if (type !== "string") {
                if (type === "object") {
                    if (message === null) {
                        throw new Error(INPUT_ERROR);
                    } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
                        message = new Uint8Array(message);
                    } else if (!Array.isArray(message)) {
                        if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                            throw new Error(INPUT_ERROR);
                        }
                    }
                } else {
                    throw new Error(INPUT_ERROR);
                }
                notString = true;
            }
            var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
            while(index < length){
                if (this.reset) {
                    this.reset = false;
                    blocks[0] = this.block;
                    for(i2 = 1; i2 < blockCount + 1; ++i2){
                        blocks[i2] = 0;
                    }
                }
                if (notString) {
                    for(i2 = this.start; index < length && i2 < byteCount; ++index){
                        blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
                    }
                } else {
                    for(i2 = this.start; index < length && i2 < byteCount; ++index){
                        code = message.charCodeAt(index);
                        if (code < 128) {
                            blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
                        } else if (code < 2048) {
                            blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                            blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                        } else if (code < 55296 || code >= 57344) {
                            blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                            blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                            blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                        } else {
                            code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                            blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                            blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                            blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                            blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                        }
                    }
                }
                this.lastByteIndex = i2;
                if (i2 >= byteCount) {
                    this.start = i2 - byteCount;
                    this.block = blocks[blockCount];
                    for(i2 = 0; i2 < blockCount; ++i2){
                        s[i2] ^= blocks[i2];
                    }
                    f(s);
                    this.reset = true;
                } else {
                    this.start = i2;
                }
            }
            return this;
        };
        Keccak.prototype.encode = function(x, right) {
            var o = x & 255, n = 1;
            var bytes = [
                o
            ];
            x = x >> 8;
            o = x & 255;
            while(o > 0){
                bytes.unshift(o);
                x = x >> 8;
                o = x & 255;
                ++n;
            }
            if (right) {
                bytes.push(n);
            } else {
                bytes.unshift(n);
            }
            this.update(bytes);
            return bytes.length;
        };
        Keccak.prototype.encodeString = function(str) {
            var notString, type = typeof str;
            if (type !== "string") {
                if (type === "object") {
                    if (str === null) {
                        throw new Error(INPUT_ERROR);
                    } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
                        str = new Uint8Array(str);
                    } else if (!Array.isArray(str)) {
                        if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                            throw new Error(INPUT_ERROR);
                        }
                    }
                } else {
                    throw new Error(INPUT_ERROR);
                }
                notString = true;
            }
            var bytes = 0, length = str.length;
            if (notString) {
                bytes = length;
            } else {
                for(var i2 = 0; i2 < str.length; ++i2){
                    var code = str.charCodeAt(i2);
                    if (code < 128) {
                        bytes += 1;
                    } else if (code < 2048) {
                        bytes += 2;
                    } else if (code < 55296 || code >= 57344) {
                        bytes += 3;
                    } else {
                        code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
                        bytes += 4;
                    }
                }
            }
            bytes += this.encode(bytes * 8);
            this.update(str);
            return bytes;
        };
        Keccak.prototype.bytepad = function(strs, w) {
            var bytes = this.encode(w);
            for(var i2 = 0; i2 < strs.length; ++i2){
                bytes += this.encodeString(strs[i2]);
            }
            var paddingBytes = w - bytes % w;
            var zeros = [];
            zeros.length = paddingBytes;
            this.update(zeros);
            return this;
        };
        Keccak.prototype.finalize = function() {
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
            blocks[i2 >> 2] |= this.padding[i2 & 3];
            if (this.lastByteIndex === this.byteCount) {
                blocks[0] = blocks[blockCount];
                for(i2 = 1; i2 < blockCount + 1; ++i2){
                    blocks[i2] = 0;
                }
            }
            blocks[blockCount - 1] |= 2147483648;
            for(i2 = 0; i2 < blockCount; ++i2){
                s[i2] ^= blocks[i2];
            }
            f(s);
        };
        Keccak.prototype.toString = Keccak.prototype.hex = function() {
            this.finalize();
            var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
            var hex = "", block;
            while(j2 < outputBlocks){
                for(i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2){
                    block = s[i2];
                    hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
                }
                if (j2 % blockCount === 0) {
                    f(s);
                    i2 = 0;
                }
            }
            if (extraBytes) {
                block = s[i2];
                hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
                if (extraBytes > 1) {
                    hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
                }
                if (extraBytes > 2) {
                    hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
                }
            }
            return hex;
        };
        Keccak.prototype.arrayBuffer = function() {
            this.finalize();
            var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
            var bytes = this.outputBits >> 3;
            var buffer;
            if (extraBytes) {
                buffer = new ArrayBuffer(outputBlocks + 1 << 2);
            } else {
                buffer = new ArrayBuffer(bytes);
            }
            var array = new Uint32Array(buffer);
            while(j2 < outputBlocks){
                for(i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2){
                    array[j2] = s[i2];
                }
                if (j2 % blockCount === 0) {
                    f(s);
                }
            }
            if (extraBytes) {
                array[i2] = s[i2];
                buffer = buffer.slice(0, bytes);
            }
            return buffer;
        };
        Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
        Keccak.prototype.digest = Keccak.prototype.array = function() {
            this.finalize();
            var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
            var array = [], offset, block;
            while(j2 < outputBlocks){
                for(i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2){
                    offset = j2 << 2;
                    block = s[i2];
                    array[offset] = block & 255;
                    array[offset + 1] = block >> 8 & 255;
                    array[offset + 2] = block >> 16 & 255;
                    array[offset + 3] = block >> 24 & 255;
                }
                if (j2 % blockCount === 0) {
                    f(s);
                }
            }
            if (extraBytes) {
                offset = j2 << 2;
                block = s[i2];
                array[offset] = block & 255;
                if (extraBytes > 1) {
                    array[offset + 1] = block >> 8 & 255;
                }
                if (extraBytes > 2) {
                    array[offset + 2] = block >> 16 & 255;
                }
            }
            return array;
        };
        function Kmac(bits2, padding, outputBits) {
            Keccak.call(this, bits2, padding, outputBits);
        }
        Kmac.prototype = new Keccak();
        Kmac.prototype.finalize = function() {
            this.encode(this.outputBits, true);
            return Keccak.prototype.finalize.call(this);
        };
        var f = function(s) {
            var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
            for(n = 0; n < 48; n += 2){
                c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
                c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
                c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
                c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
                c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
                c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
                c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
                c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
                c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
                c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
                h = c8 ^ (c2 << 1 | c3 >>> 31);
                l = c9 ^ (c3 << 1 | c2 >>> 31);
                s[0] ^= h;
                s[1] ^= l;
                s[10] ^= h;
                s[11] ^= l;
                s[20] ^= h;
                s[21] ^= l;
                s[30] ^= h;
                s[31] ^= l;
                s[40] ^= h;
                s[41] ^= l;
                h = c0 ^ (c4 << 1 | c5 >>> 31);
                l = c1 ^ (c5 << 1 | c4 >>> 31);
                s[2] ^= h;
                s[3] ^= l;
                s[12] ^= h;
                s[13] ^= l;
                s[22] ^= h;
                s[23] ^= l;
                s[32] ^= h;
                s[33] ^= l;
                s[42] ^= h;
                s[43] ^= l;
                h = c2 ^ (c6 << 1 | c7 >>> 31);
                l = c3 ^ (c7 << 1 | c6 >>> 31);
                s[4] ^= h;
                s[5] ^= l;
                s[14] ^= h;
                s[15] ^= l;
                s[24] ^= h;
                s[25] ^= l;
                s[34] ^= h;
                s[35] ^= l;
                s[44] ^= h;
                s[45] ^= l;
                h = c4 ^ (c8 << 1 | c9 >>> 31);
                l = c5 ^ (c9 << 1 | c8 >>> 31);
                s[6] ^= h;
                s[7] ^= l;
                s[16] ^= h;
                s[17] ^= l;
                s[26] ^= h;
                s[27] ^= l;
                s[36] ^= h;
                s[37] ^= l;
                s[46] ^= h;
                s[47] ^= l;
                h = c6 ^ (c0 << 1 | c1 >>> 31);
                l = c7 ^ (c1 << 1 | c0 >>> 31);
                s[8] ^= h;
                s[9] ^= l;
                s[18] ^= h;
                s[19] ^= l;
                s[28] ^= h;
                s[29] ^= l;
                s[38] ^= h;
                s[39] ^= l;
                s[48] ^= h;
                s[49] ^= l;
                b0 = s[0];
                b1 = s[1];
                b32 = s[11] << 4 | s[10] >>> 28;
                b33 = s[10] << 4 | s[11] >>> 28;
                b14 = s[20] << 3 | s[21] >>> 29;
                b15 = s[21] << 3 | s[20] >>> 29;
                b46 = s[31] << 9 | s[30] >>> 23;
                b47 = s[30] << 9 | s[31] >>> 23;
                b28 = s[40] << 18 | s[41] >>> 14;
                b29 = s[41] << 18 | s[40] >>> 14;
                b20 = s[2] << 1 | s[3] >>> 31;
                b21 = s[3] << 1 | s[2] >>> 31;
                b2 = s[13] << 12 | s[12] >>> 20;
                b3 = s[12] << 12 | s[13] >>> 20;
                b34 = s[22] << 10 | s[23] >>> 22;
                b35 = s[23] << 10 | s[22] >>> 22;
                b16 = s[33] << 13 | s[32] >>> 19;
                b17 = s[32] << 13 | s[33] >>> 19;
                b48 = s[42] << 2 | s[43] >>> 30;
                b49 = s[43] << 2 | s[42] >>> 30;
                b40 = s[5] << 30 | s[4] >>> 2;
                b41 = s[4] << 30 | s[5] >>> 2;
                b22 = s[14] << 6 | s[15] >>> 26;
                b23 = s[15] << 6 | s[14] >>> 26;
                b4 = s[25] << 11 | s[24] >>> 21;
                b5 = s[24] << 11 | s[25] >>> 21;
                b36 = s[34] << 15 | s[35] >>> 17;
                b37 = s[35] << 15 | s[34] >>> 17;
                b18 = s[45] << 29 | s[44] >>> 3;
                b19 = s[44] << 29 | s[45] >>> 3;
                b10 = s[6] << 28 | s[7] >>> 4;
                b11 = s[7] << 28 | s[6] >>> 4;
                b42 = s[17] << 23 | s[16] >>> 9;
                b43 = s[16] << 23 | s[17] >>> 9;
                b24 = s[26] << 25 | s[27] >>> 7;
                b25 = s[27] << 25 | s[26] >>> 7;
                b6 = s[36] << 21 | s[37] >>> 11;
                b7 = s[37] << 21 | s[36] >>> 11;
                b38 = s[47] << 24 | s[46] >>> 8;
                b39 = s[46] << 24 | s[47] >>> 8;
                b30 = s[8] << 27 | s[9] >>> 5;
                b31 = s[9] << 27 | s[8] >>> 5;
                b12 = s[18] << 20 | s[19] >>> 12;
                b13 = s[19] << 20 | s[18] >>> 12;
                b44 = s[29] << 7 | s[28] >>> 25;
                b45 = s[28] << 7 | s[29] >>> 25;
                b26 = s[38] << 8 | s[39] >>> 24;
                b27 = s[39] << 8 | s[38] >>> 24;
                b8 = s[48] << 14 | s[49] >>> 18;
                b9 = s[49] << 14 | s[48] >>> 18;
                s[0] = b0 ^ ~b2 & b4;
                s[1] = b1 ^ ~b3 & b5;
                s[10] = b10 ^ ~b12 & b14;
                s[11] = b11 ^ ~b13 & b15;
                s[20] = b20 ^ ~b22 & b24;
                s[21] = b21 ^ ~b23 & b25;
                s[30] = b30 ^ ~b32 & b34;
                s[31] = b31 ^ ~b33 & b35;
                s[40] = b40 ^ ~b42 & b44;
                s[41] = b41 ^ ~b43 & b45;
                s[2] = b2 ^ ~b4 & b6;
                s[3] = b3 ^ ~b5 & b7;
                s[12] = b12 ^ ~b14 & b16;
                s[13] = b13 ^ ~b15 & b17;
                s[22] = b22 ^ ~b24 & b26;
                s[23] = b23 ^ ~b25 & b27;
                s[32] = b32 ^ ~b34 & b36;
                s[33] = b33 ^ ~b35 & b37;
                s[42] = b42 ^ ~b44 & b46;
                s[43] = b43 ^ ~b45 & b47;
                s[4] = b4 ^ ~b6 & b8;
                s[5] = b5 ^ ~b7 & b9;
                s[14] = b14 ^ ~b16 & b18;
                s[15] = b15 ^ ~b17 & b19;
                s[24] = b24 ^ ~b26 & b28;
                s[25] = b25 ^ ~b27 & b29;
                s[34] = b34 ^ ~b36 & b38;
                s[35] = b35 ^ ~b37 & b39;
                s[44] = b44 ^ ~b46 & b48;
                s[45] = b45 ^ ~b47 & b49;
                s[6] = b6 ^ ~b8 & b0;
                s[7] = b7 ^ ~b9 & b1;
                s[16] = b16 ^ ~b18 & b10;
                s[17] = b17 ^ ~b19 & b11;
                s[26] = b26 ^ ~b28 & b20;
                s[27] = b27 ^ ~b29 & b21;
                s[36] = b36 ^ ~b38 & b30;
                s[37] = b37 ^ ~b39 & b31;
                s[46] = b46 ^ ~b48 & b40;
                s[47] = b47 ^ ~b49 & b41;
                s[8] = b8 ^ ~b0 & b2;
                s[9] = b9 ^ ~b1 & b3;
                s[18] = b18 ^ ~b10 & b12;
                s[19] = b19 ^ ~b11 & b13;
                s[28] = b28 ^ ~b20 & b22;
                s[29] = b29 ^ ~b21 & b23;
                s[38] = b38 ^ ~b30 & b32;
                s[39] = b39 ^ ~b31 & b33;
                s[48] = b48 ^ ~b40 & b42;
                s[49] = b49 ^ ~b41 & b43;
                s[0] ^= RC[n];
                s[1] ^= RC[n + 1];
            }
        };
        if (COMMON_JS) {
            module.exports = methods;
        } else {
            for(i = 0; i < methodNames.length; ++i){
                root[methodNames[i]] = methods[methodNames[i]];
            }
        }
    })();
});
sha3.cshake128;
sha3.cshake256;
sha3.cshake_128;
sha3.cshake_256;
sha3.keccak224;
sha3.keccak256;
sha3.keccak384;
sha3.keccak512;
sha3.keccak_224;
sha3.keccak_256;
sha3.keccak_384;
sha3.keccak_512;
sha3.kmac128;
sha3.kmac256;
sha3.kmac_128;
sha3.kmac_256;
sha3.sha3_224;
sha3.sha3_256;
sha3.sha3_384;
sha3.sha3_512;
sha3.shake128;
sha3.shake256;
sha3.shake_128;
sha3.shake_256;
function keccak256(data) {
    return "0x" + sha3.keccak_256(arrayify(data));
}
const version5 = "rlp/5.7.0";
const logger23 = new Logger(version5);
function arrayifyInteger(value) {
    const result = [];
    while(value){
        result.unshift(value & 255);
        value >>= 8;
    }
    return result;
}
function unarrayifyInteger(data, offset, length) {
    let result = 0;
    for(let i = 0; i < length; i++){
        result = result * 256 + data[offset + i];
    }
    return result;
}
function _encode(object) {
    if (Array.isArray(object)) {
        let payload = [];
        object.forEach(function(child) {
            payload = payload.concat(_encode(child));
        });
        if (payload.length <= 55) {
            payload.unshift(192 + payload.length);
            return payload;
        }
        const length2 = arrayifyInteger(payload.length);
        length2.unshift(247 + length2.length);
        return length2.concat(payload);
    }
    if (!isBytesLike(object)) {
        logger23.throwArgumentError("RLP object must be BytesLike", "object", object);
    }
    const data = Array.prototype.slice.call(arrayify(object));
    if (data.length === 1 && data[0] <= 127) {
        return data;
    } else if (data.length <= 55) {
        data.unshift(128 + data.length);
        return data;
    }
    const length = arrayifyInteger(data.length);
    length.unshift(183 + length.length);
    return length.concat(data);
}
function encode(object) {
    return hexlify(_encode(object));
}
function _decodeChildren(data, offset, childOffset, length) {
    const result = [];
    while(childOffset < offset + 1 + length){
        const decoded = _decode(data, childOffset);
        result.push(decoded.result);
        childOffset += decoded.consumed;
        if (childOffset > offset + 1 + length) {
            logger23.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
        }
    }
    return {
        consumed: 1 + length,
        result
    };
}
function _decode(data, offset) {
    if (data.length === 0) {
        logger23.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    if (data[offset] >= 248) {
        const lengthLength = data[offset] - 247;
        if (offset + 1 + lengthLength > data.length) {
            logger23.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length > data.length) {
            logger23.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
    } else if (data[offset] >= 192) {
        const length = data[offset] - 192;
        if (offset + 1 + length > data.length) {
            logger23.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        return _decodeChildren(data, offset, offset + 1, length);
    } else if (data[offset] >= 184) {
        const lengthLength = data[offset] - 183;
        if (offset + 1 + lengthLength > data.length) {
            logger23.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length > data.length) {
            logger23.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
        return {
            consumed: 1 + lengthLength + length,
            result
        };
    } else if (data[offset] >= 128) {
        const length = data[offset] - 128;
        if (offset + 1 + length > data.length) {
            logger23.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        const result = hexlify(data.slice(offset + 1, offset + 1 + length));
        return {
            consumed: 1 + length,
            result
        };
    }
    return {
        consumed: 1,
        result: hexlify(data[offset])
    };
}
function decode1(data) {
    const bytes2 = arrayify(data);
    const decoded = _decode(bytes2, 0);
    if (decoded.consumed !== bytes2.length) {
        logger23.throwArgumentError("invalid rlp data", "data", data);
    }
    return decoded.result;
}
const mod = function() {
    return {
        decode: decode1,
        encode: encode,
        default: null
    };
}();
const version6 = "address/5.7.0";
const logger24 = new Logger(version6);
function getChecksumAddress(address) {
    if (!isHexString(address, 20)) {
        logger24.throwArgumentError("invalid address", "address", address);
    }
    address = address.toLowerCase();
    const chars = address.substring(2).split("");
    const expanded = new Uint8Array(40);
    for(let i = 0; i < 40; i++){
        expanded[i] = chars[i].charCodeAt(0);
    }
    const hashed = arrayify(keccak256(expanded));
    for(let i = 0; i < 40; i += 2){
        if (hashed[i >> 1] >> 4 >= 8) {
            chars[i] = chars[i].toUpperCase();
        }
        if ((hashed[i >> 1] & 15) >= 8) {
            chars[i + 1] = chars[i + 1].toUpperCase();
        }
    }
    return "0x" + chars.join("");
}
function log10(x) {
    if (Math.log10) {
        return Math.log10(x);
    }
    return Math.log(x) / Math.LN10;
}
const ibanLookup = {};
for(let i = 0; i < 10; i++){
    ibanLookup[String(i)] = String(i);
}
for(let i = 0; i < 26; i++){
    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
const safeDigits = Math.floor(log10(9007199254740991));
function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    let expanded = address.split("").map((c)=>{
        return ibanLookup[c];
    }).join("");
    while(expanded.length >= safeDigits){
        let block = expanded.substring(0, safeDigits);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum = String(98 - parseInt(expanded, 10) % 97);
    while(checksum.length < 2){
        checksum = "0" + checksum;
    }
    return checksum;
}
function getAddress(address) {
    let result = null;
    if (typeof address !== "string") {
        logger24.throwArgumentError("invalid address", "address", address);
    }
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        if (address.substring(0, 2) !== "0x") {
            address = "0x" + address;
        }
        result = getChecksumAddress(address);
        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
            logger24.throwArgumentError("bad address checksum", "address", address);
        }
    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        if (address.substring(2, 4) !== ibanChecksum(address)) {
            logger24.throwArgumentError("bad icap checksum", "address", address);
        }
        result = _base36To16(address.substring(4));
        while(result.length < 40){
            result = "0" + result;
        }
        result = getChecksumAddress("0x" + result);
    } else {
        logger24.throwArgumentError("invalid address", "address", address);
    }
    return result;
}
function isAddress(address) {
    try {
        getAddress(address);
        return true;
    } catch (error) {}
    return false;
}
function getIcapAddress(address) {
    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
    while(base36.length < 30){
        base36 = "0" + base36;
    }
    return "XE" + ibanChecksum("XE00" + base36) + base36;
}
function getContractAddress(transaction) {
    let from = null;
    try {
        from = getAddress(transaction.from);
    } catch (error) {
        logger24.throwArgumentError("missing from address", "transaction", transaction);
    }
    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
    return getAddress(hexDataSlice(keccak256(encode([
        from,
        nonce
    ])), 12));
}
function getCreate2Address(from, salt, initCodeHash) {
    if (hexDataLength(salt) !== 32) {
        logger24.throwArgumentError("salt must be 32 bytes", "salt", salt);
    }
    if (hexDataLength(initCodeHash) !== 32) {
        logger24.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
    }
    return getAddress(hexDataSlice(keccak256(concat([
        "0xff",
        getAddress(from),
        salt,
        initCodeHash
    ])), 12));
}
const AddressZero = "0x0000000000000000000000000000000000000000";
const NegativeOne1 = BigNumber.from(-1);
const Zero1 = BigNumber.from(0);
const One = BigNumber.from(1);
const Two = BigNumber.from(2);
const WeiPerEther = BigNumber.from("1000000000000000000");
const MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
const MinInt256 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
const MaxInt256 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
const EtherSymbol = "\u039E";
const mod1 = function() {
    return {
        AddressZero: AddressZero,
        EtherSymbol: EtherSymbol,
        HashZero: HashZero,
        MaxInt256: MaxInt256,
        MaxUint256: MaxUint256,
        MinInt256: MinInt256,
        NegativeOne: NegativeOne1,
        One: One,
        Two: Two,
        WeiPerEther: WeiPerEther,
        Zero: Zero1,
        default: null
    };
}();
const version7 = "strings/5.7.0";
const logger25 = new Logger(version7);
var UnicodeNormalizationForm;
(function(UnicodeNormalizationForm2) {
    UnicodeNormalizationForm2["current"] = "";
    UnicodeNormalizationForm2["NFC"] = "NFC";
    UnicodeNormalizationForm2["NFD"] = "NFD";
    UnicodeNormalizationForm2["NFKC"] = "NFKC";
    UnicodeNormalizationForm2["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
var Utf8ErrorReason;
(function(Utf8ErrorReason2) {
    Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
    Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
    Utf8ErrorReason2["OVERRUN"] = "string overrun";
    Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
    Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
    Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
    Utf8ErrorReason2["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
function errorFunc(reason, offset, bytes3, output, badCodepoint) {
    return logger25.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes3);
}
function ignoreFunc(reason, offset, bytes3, output, badCodepoint) {
    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
        let i = 0;
        for(let o = offset + 1; o < bytes3.length; o++){
            if (bytes3[o] >> 6 !== 2) {
                break;
            }
            i++;
        }
        return i;
    }
    if (reason === Utf8ErrorReason.OVERRUN) {
        return bytes3.length - offset - 1;
    }
    return 0;
}
function replaceFunc(reason, offset, bytes3, output, badCodepoint) {
    if (reason === Utf8ErrorReason.OVERLONG) {
        output.push(badCodepoint);
        return 0;
    }
    output.push(65533);
    return ignoreFunc(reason, offset, bytes3);
}
const Utf8ErrorFuncs = Object.freeze({
    error: errorFunc,
    ignore: ignoreFunc,
    replace: replaceFunc
});
function getUtf8CodePoints(bytes3, onError) {
    if (onError == null) {
        onError = Utf8ErrorFuncs.error;
    }
    bytes3 = arrayify(bytes3);
    const result = [];
    let i = 0;
    while(i < bytes3.length){
        const c = bytes3[i++];
        if (c >> 7 === 0) {
            result.push(c);
            continue;
        }
        let extraLength = null;
        let overlongMask = null;
        if ((c & 224) === 192) {
            extraLength = 1;
            overlongMask = 127;
        } else if ((c & 240) === 224) {
            extraLength = 2;
            overlongMask = 2047;
        } else if ((c & 248) === 240) {
            extraLength = 3;
            overlongMask = 65535;
        } else {
            if ((c & 192) === 128) {
                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes3, result);
            } else {
                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes3, result);
            }
            continue;
        }
        if (i - 1 + extraLength >= bytes3.length) {
            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes3, result);
            continue;
        }
        let res = c & (1 << 8 - extraLength - 1) - 1;
        for(let j = 0; j < extraLength; j++){
            let nextChar = bytes3[i];
            if ((nextChar & 192) != 128) {
                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes3, result);
                res = null;
                break;
            }
            res = res << 6 | nextChar & 63;
            i++;
        }
        if (res === null) {
            continue;
        }
        if (res > 1114111) {
            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes3, result, res);
            continue;
        }
        if (res >= 55296 && res <= 57343) {
            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes3, result, res);
            continue;
        }
        if (res <= overlongMask) {
            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes3, result, res);
            continue;
        }
        result.push(res);
    }
    return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
    if (form != UnicodeNormalizationForm.current) {
        logger25.checkNormalize();
        str = str.normalize(form);
    }
    let result = [];
    for(let i = 0; i < str.length; i++){
        const c = str.charCodeAt(i);
        if (c < 128) {
            result.push(c);
        } else if (c < 2048) {
            result.push(c >> 6 | 192);
            result.push(c & 63 | 128);
        } else if ((c & 64512) == 55296) {
            i++;
            const c2 = str.charCodeAt(i);
            if (i >= str.length || (c2 & 64512) !== 56320) {
                throw new Error("invalid utf-8 string");
            }
            const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
            result.push(pair >> 18 | 240);
            result.push(pair >> 12 & 63 | 128);
            result.push(pair >> 6 & 63 | 128);
            result.push(pair & 63 | 128);
        } else {
            result.push(c >> 12 | 224);
            result.push(c >> 6 & 63 | 128);
            result.push(c & 63 | 128);
        }
    }
    return arrayify(result);
}
function escapeChar(value) {
    const hex = "0000" + value.toString(16);
    return "\\u" + hex.substring(hex.length - 4);
}
function _toEscapedUtf8String(bytes3, onError) {
    return '"' + getUtf8CodePoints(bytes3, onError).map((codePoint)=>{
        if (codePoint < 256) {
            switch(codePoint){
                case 8:
                    return "\\b";
                case 9:
                    return "\\t";
                case 10:
                    return "\\n";
                case 13:
                    return "\\r";
                case 34:
                    return '\\"';
                case 92:
                    return "\\\\";
            }
            if (codePoint >= 32 && codePoint < 127) {
                return String.fromCharCode(codePoint);
            }
        }
        if (codePoint <= 65535) {
            return escapeChar(codePoint);
        }
        codePoint -= 65536;
        return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
    }).join("") + '"';
}
function _toUtf8String(codePoints) {
    return codePoints.map((codePoint)=>{
        if (codePoint <= 65535) {
            return String.fromCharCode(codePoint);
        }
        codePoint -= 65536;
        return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
    }).join("");
}
function toUtf8String(bytes3, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes3, onError));
}
function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
    return getUtf8CodePoints(toUtf8Bytes(str, form));
}
function formatBytes32String(text) {
    const bytes3 = toUtf8Bytes(text);
    if (bytes3.length > 31) {
        throw new Error("bytes32 string must be less than 32 bytes");
    }
    return hexlify(concat([
        bytes3,
        HashZero
    ]).slice(0, 32));
}
function parseBytes32String(bytes3) {
    const data = arrayify(bytes3);
    if (data.length !== 32) {
        throw new Error("invalid bytes32 - not 32 bytes long");
    }
    if (data[31] !== 0) {
        throw new Error("invalid bytes32 string - no null terminator");
    }
    let length = 31;
    while(data[length - 1] === 0){
        length--;
    }
    return toUtf8String(data.slice(0, length));
}
function bytes2(data) {
    if (data.length % 4 !== 0) {
        throw new Error("bad data");
    }
    let result = [];
    for(let i = 0; i < data.length; i += 4){
        result.push(parseInt(data.substring(i, i + 4), 16));
    }
    return result;
}
function createTable(data, func) {
    if (!func) {
        func = function(value) {
            return [
                parseInt(value, 16)
            ];
        };
    }
    let lo = 0;
    let result = {};
    data.split(",").forEach((pair)=>{
        let comps = pair.split(":");
        lo += parseInt(comps[0], 16);
        result[lo] = func(comps[1]);
    });
    return result;
}
function createRangeTable(data) {
    let hi = 0;
    return data.split(",").map((v)=>{
        let comps = v.split("-");
        if (comps.length === 1) {
            comps[1] = "0";
        } else if (comps[1] === "") {
            comps[1] = "1";
        }
        let lo = hi + parseInt(comps[0], 16);
        hi = parseInt(comps[1], 16);
        return {
            l: lo,
            h: hi
        };
    });
}
function matchMap(value, ranges) {
    let lo = 0;
    for(let i = 0; i < ranges.length; i++){
        let range = ranges[i];
        lo += range.l;
        if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
            if (range.e && range.e.indexOf(value - lo) !== -1) {
                continue;
            }
            return range;
        }
    }
    return null;
}
const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v)=>parseInt(v, 16));
const Table_B_2_ranges = [
    {
        h: 25,
        s: 32,
        l: 65
    },
    {
        h: 30,
        s: 32,
        e: [
            23
        ],
        l: 127
    },
    {
        h: 54,
        s: 1,
        e: [
            48
        ],
        l: 64,
        d: 2
    },
    {
        h: 14,
        s: 1,
        l: 57,
        d: 2
    },
    {
        h: 44,
        s: 1,
        l: 17,
        d: 2
    },
    {
        h: 10,
        s: 1,
        e: [
            2,
            6,
            8
        ],
        l: 61,
        d: 2
    },
    {
        h: 16,
        s: 1,
        l: 68,
        d: 2
    },
    {
        h: 84,
        s: 1,
        e: [
            18,
            24,
            66
        ],
        l: 19,
        d: 2
    },
    {
        h: 26,
        s: 32,
        e: [
            17
        ],
        l: 435
    },
    {
        h: 22,
        s: 1,
        l: 71,
        d: 2
    },
    {
        h: 15,
        s: 80,
        l: 40
    },
    {
        h: 31,
        s: 32,
        l: 16
    },
    {
        h: 32,
        s: 1,
        l: 80,
        d: 2
    },
    {
        h: 52,
        s: 1,
        l: 42,
        d: 2
    },
    {
        h: 12,
        s: 1,
        l: 55,
        d: 2
    },
    {
        h: 40,
        s: 1,
        e: [
            38
        ],
        l: 15,
        d: 2
    },
    {
        h: 14,
        s: 1,
        l: 48,
        d: 2
    },
    {
        h: 37,
        s: 48,
        l: 49
    },
    {
        h: 148,
        s: 1,
        l: 6351,
        d: 2
    },
    {
        h: 88,
        s: 1,
        l: 160,
        d: 2
    },
    {
        h: 15,
        s: 16,
        l: 704
    },
    {
        h: 25,
        s: 26,
        l: 854
    },
    {
        h: 25,
        s: 32,
        l: 55915
    },
    {
        h: 37,
        s: 40,
        l: 1247
    },
    {
        h: 25,
        s: -119711,
        l: 53248
    },
    {
        h: 25,
        s: -119763,
        l: 52
    },
    {
        h: 25,
        s: -119815,
        l: 52
    },
    {
        h: 25,
        s: -119867,
        e: [
            1,
            4,
            5,
            7,
            8,
            11,
            12,
            17
        ],
        l: 52
    },
    {
        h: 25,
        s: -119919,
        l: 52
    },
    {
        h: 24,
        s: -119971,
        e: [
            2,
            7,
            8,
            17
        ],
        l: 52
    },
    {
        h: 24,
        s: -120023,
        e: [
            2,
            7,
            13,
            15,
            16,
            17
        ],
        l: 52
    },
    {
        h: 25,
        s: -120075,
        l: 52
    },
    {
        h: 25,
        s: -120127,
        l: 52
    },
    {
        h: 25,
        s: -120179,
        l: 52
    },
    {
        h: 25,
        s: -120231,
        l: 52
    },
    {
        h: 25,
        s: -120283,
        l: 52
    },
    {
        h: 25,
        s: -120335,
        l: 52
    },
    {
        h: 24,
        s: -119543,
        e: [
            17
        ],
        l: 56
    },
    {
        h: 24,
        s: -119601,
        e: [
            17
        ],
        l: 58
    },
    {
        h: 24,
        s: -119659,
        e: [
            17
        ],
        l: 58
    },
    {
        h: 24,
        s: -119717,
        e: [
            17
        ],
        l: 58
    },
    {
        h: 24,
        s: -119775,
        e: [
            17
        ],
        l: 58
    }
];
const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
function flatten(values) {
    return values.reduce((accum, value)=>{
        value.forEach((value2)=>{
            accum.push(value2);
        });
        return accum;
    }, []);
}
function _nameprepTableA1(codepoint) {
    return !!matchMap(codepoint, Table_A_1_ranges);
}
function _nameprepTableB2(codepoint) {
    let range = matchMap(codepoint, Table_B_2_ranges);
    if (range) {
        return [
            codepoint + range.s
        ];
    }
    let codes = Table_B_2_lut_abs[codepoint];
    if (codes) {
        return codes;
    }
    let shift = Table_B_2_lut_rel[codepoint];
    if (shift) {
        return [
            codepoint + shift[0]
        ];
    }
    let complex = Table_B_2_complex[codepoint];
    if (complex) {
        return complex;
    }
    return null;
}
function _nameprepTableC(codepoint) {
    return !!matchMap(codepoint, Table_C_ranges);
}
function nameprep(value) {
    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
        return value.toLowerCase();
    }
    let codes = toUtf8CodePoints(value);
    codes = flatten(codes.map((code)=>{
        if (Table_B_1_flags.indexOf(code) >= 0) {
            return [];
        }
        if (code >= 65024 && code <= 65039) {
            return [];
        }
        let codesTableB2 = _nameprepTableB2(code);
        if (codesTableB2) {
            return codesTableB2;
        }
        return [
            code
        ];
    }));
    codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
    codes.forEach((code)=>{
        if (_nameprepTableC(code)) {
            throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
        }
    });
    codes.forEach((code)=>{
        if (_nameprepTableA1(code)) {
            throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
        }
    });
    let name = _toUtf8String(codes);
    if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
        throw new Error("invalid hyphen");
    }
    return name;
}
function decode2(textData) {
    textData = atob(textData);
    const data = [];
    for(let i = 0; i < textData.length; i++){
        data.push(textData.charCodeAt(i));
    }
    return arrayify(data);
}
function encode1(data) {
    data = arrayify(data);
    let textData = "";
    for(let i = 0; i < data.length; i++){
        textData += String.fromCharCode(data[i]);
    }
    return btoa(textData);
}
const mod2 = function() {
    return {
        decode: decode2,
        encode: encode1,
        default: null
    };
}();
function id(text) {
    return keccak256(toUtf8Bytes(text));
}
const version8 = "hash/5.7.0";
function flat(array, depth) {
    if (depth == null) {
        depth = 1;
    }
    const result = [];
    const forEach = result.forEach;
    const flatDeep = function(arr, depth2) {
        forEach.call(arr, function(val) {
            if (depth2 > 0 && Array.isArray(val)) {
                flatDeep(val, depth2 - 1);
            } else {
                result.push(val);
            }
        });
    };
    flatDeep(array, depth);
    return result;
}
function fromEntries(array) {
    const result = {};
    for(let i = 0; i < array.length; i++){
        const value = array[i];
        result[value[0]] = value[1];
    }
    return result;
}
function decode_arithmetic(bytes2) {
    let pos = 0;
    function u16() {
        return bytes2[pos++] << 8 | bytes2[pos++];
    }
    let symbol_count = u16();
    let total = 1;
    let acc = [
        0,
        1
    ];
    for(let i = 1; i < symbol_count; i++){
        acc.push(total += u16());
    }
    let skip = u16();
    let pos_payload = pos;
    pos += skip;
    let read_width = 0;
    let read_buffer = 0;
    function read_bit() {
        if (read_width == 0) {
            read_buffer = read_buffer << 8 | bytes2[pos++];
            read_width = 8;
        }
        return read_buffer >> --read_width & 1;
    }
    const FULL = Math.pow(2, 31);
    const HALF = FULL >>> 1;
    const QRTR = HALF >> 1;
    const MASK = FULL - 1;
    let register = 0;
    for(let i = 0; i < 31; i++)register = register << 1 | read_bit();
    let symbols = [];
    let low = 0;
    let range = FULL;
    while(true){
        let value = Math.floor(((register - low + 1) * total - 1) / range);
        let start = 0;
        let end = symbol_count;
        while(end - start > 1){
            let mid = start + end >>> 1;
            if (value < acc[mid]) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (start == 0) break;
        symbols.push(start);
        let a = low + Math.floor(range * acc[start] / total);
        let b = low + Math.floor(range * acc[start + 1] / total) - 1;
        while(((a ^ b) & HALF) == 0){
            register = register << 1 & MASK | read_bit();
            a = a << 1 & MASK;
            b = b << 1 & MASK | 1;
        }
        while(a & ~b & QRTR){
            register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
            a = a << 1 ^ HALF;
            b = (b ^ HALF) << 1 | HALF | 1;
        }
        low = a;
        range = 1 + b - a;
    }
    let offset = symbol_count - 4;
    return symbols.map((x)=>{
        switch(x - offset){
            case 3:
                return offset + 65792 + (bytes2[pos_payload++] << 16 | bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
            case 2:
                return offset + 256 + (bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
            case 1:
                return offset + bytes2[pos_payload++];
            default:
                return x - 1;
        }
    });
}
function read_payload(v) {
    let pos = 0;
    return ()=>v[pos++];
}
function read_compressed_payload(bytes2) {
    return read_payload(decode_arithmetic(bytes2));
}
function signed(i) {
    return i & 1 ? ~i >> 1 : i >> 1;
}
function read_counts(n, next) {
    let v = Array(n);
    for(let i = 0; i < n; i++)v[i] = 1 + next();
    return v;
}
function read_ascending(n, next) {
    let v = Array(n);
    for(let i = 0, x = -1; i < n; i++)v[i] = x += 1 + next();
    return v;
}
function read_deltas(n, next) {
    let v = Array(n);
    for(let i = 0, x = 0; i < n; i++)v[i] = x += signed(next());
    return v;
}
function read_member_array(next, lookup) {
    let v = read_ascending(next(), next);
    let n = next();
    let vX = read_ascending(n, next);
    let vN = read_counts(n, next);
    for(let i = 0; i < n; i++){
        for(let j = 0; j < vN[i]; j++){
            v.push(vX[i] + j);
        }
    }
    return lookup ? v.map((x)=>lookup[x]) : v;
}
function read_mapped_map(next) {
    let ret = [];
    while(true){
        let w = next();
        if (w == 0) break;
        ret.push(read_linear_table(w, next));
    }
    while(true){
        let w = next() - 1;
        if (w < 0) break;
        ret.push(read_replacement_table(w, next));
    }
    return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
    let v = [];
    while(true){
        let i = next();
        if (i == 0) break;
        v.push(i);
    }
    return v;
}
function read_transposed(n, w, next) {
    let m = Array(n).fill(void 0).map(()=>[]);
    for(let i = 0; i < w; i++){
        read_deltas(n, next).forEach((x, j)=>m[j].push(x));
    }
    return m;
}
function read_linear_table(w, next) {
    let dx = 1 + next();
    let dy = next();
    let vN = read_zero_terminated_array(next);
    let m = read_transposed(vN.length, 1 + w, next);
    return flat(m.map((v, i)=>{
        const x = v[0], ys = v.slice(1);
        return Array(vN[i]).fill(void 0).map((_, j)=>{
            let j_dy = j * dy;
            return [
                x + j * dx,
                ys.map((y)=>y + j_dy)
            ];
        });
    }));
}
function read_replacement_table(w, next) {
    let n = 1 + next();
    let m = read_transposed(n, 1 + w, next);
    return m.map((v)=>[
            v[0],
            v.slice(1)
        ]);
}
function read_emoji_trie(next) {
    let sorted = read_member_array(next).sort((a, b)=>a - b);
    return read();
    function read() {
        let branches = [];
        while(true){
            let keys = read_member_array(next, sorted);
            if (keys.length == 0) break;
            branches.push({
                set: new Set(keys),
                node: read()
            });
        }
        branches.sort((a, b)=>b.set.size - a.set.size);
        let temp = next();
        let valid = temp % 3;
        temp = temp / 3 | 0;
        let fe0f = !!(temp & 1);
        temp >>= 1;
        let save = temp == 1;
        let check = temp == 2;
        return {
            branches,
            valid,
            fe0f,
            save,
            check
        };
    }
}
function getData() {
    return read_compressed_payload(decode2(""));
}
const r = getData();
const VALID = new Set(read_member_array(r));
const IGNORED = new Set(read_member_array(r));
const MAPPED = read_mapped_map(r);
const EMOJI_ROOT = read_emoji_trie(r);
function explode_cp(name) {
    return toUtf8CodePoints(name);
}
function filter_fe0f(cps) {
    return cps.filter((cp)=>cp != 65039);
}
function ens_normalize_post_check(name) {
    for (let label of name.split(".")){
        let cps = explode_cp(label);
        try {
            for(let i = cps.lastIndexOf(95) - 1; i >= 0; i--){
                if (cps[i] !== 95) {
                    throw new Error(`underscore only allowed at start`);
                }
            }
            if (cps.length >= 4 && cps.every((cp)=>cp < 128) && cps[2] === 45 && cps[3] === 45) {
                throw new Error(`invalid label extension`);
            }
        } catch (err) {
            throw new Error(`Invalid label "${label}": ${err.message}`);
        }
    }
    return name;
}
function ens_normalize(name) {
    return ens_normalize_post_check(normalize(name, filter_fe0f));
}
function normalize(name, emoji_filter) {
    let input = explode_cp(name).reverse();
    let output = [];
    while(input.length){
        let emoji = consume_emoji_reversed(input);
        if (emoji) {
            output.push(...emoji_filter(emoji));
            continue;
        }
        let cp = input.pop();
        if (VALID.has(cp)) {
            output.push(cp);
            continue;
        }
        if (IGNORED.has(cp)) {
            continue;
        }
        let cps = MAPPED[cp];
        if (cps) {
            output.push(...cps);
            continue;
        }
        throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);
    }
    return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));
}
function nfc(s) {
    return s.normalize("NFC");
}
function consume_emoji_reversed(cps, eaten) {
    var _a;
    let node = EMOJI_ROOT;
    let emoji;
    let saved;
    let stack = [];
    let pos = cps.length;
    if (eaten) eaten.length = 0;
    while(pos){
        let cp = cps[--pos];
        node = (_a = node.branches.find((x)=>x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;
        if (!node) break;
        if (node.save) {
            saved = cp;
        } else if (node.check) {
            if (cp === saved) break;
        }
        stack.push(cp);
        if (node.fe0f) {
            stack.push(65039);
            if (pos > 0 && cps[pos - 1] == 65039) pos--;
        }
        if (node.valid) {
            emoji = stack.slice();
            if (node.valid == 2) emoji.splice(1, 1);
            if (eaten) eaten.push(...cps.slice(pos).reverse());
            cps.length = pos;
        }
    }
    return emoji;
}
const logger26 = new Logger(version8);
const Zeros = new Uint8Array(32);
Zeros.fill(0);
function checkComponent(comp) {
    if (comp.length === 0) {
        throw new Error("invalid ENS name; empty component");
    }
    return comp;
}
function ensNameSplit(name) {
    const bytes2 = toUtf8Bytes(ens_normalize(name));
    const comps = [];
    if (name.length === 0) {
        return comps;
    }
    let last = 0;
    for(let i = 0; i < bytes2.length; i++){
        const d = bytes2[i];
        if (d === 46) {
            comps.push(checkComponent(bytes2.slice(last, i)));
            last = i + 1;
        }
    }
    if (last >= bytes2.length) {
        throw new Error("invalid ENS name; empty component");
    }
    comps.push(checkComponent(bytes2.slice(last)));
    return comps;
}
function isValidName(name) {
    try {
        return ensNameSplit(name).length !== 0;
    } catch (error) {}
    return false;
}
function namehash(name) {
    if (typeof name !== "string") {
        logger26.throwArgumentError("invalid ENS name; not a string", "name", name);
    }
    let result = Zeros;
    const comps = ensNameSplit(name);
    while(comps.length){
        result = keccak256(concat([
            result,
            keccak256(comps.pop())
        ]));
    }
    return hexlify(result);
}
function dnsEncode(name) {
    return hexlify(concat(ensNameSplit(name).map((comp)=>{
        if (comp.length > 63) {
            throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
        }
        const bytes2 = new Uint8Array(comp.length + 1);
        bytes2.set(comp, 1);
        bytes2[0] = bytes2.length - 1;
        return bytes2;
    }))) + "00";
}
const messagePrefix = "Ethereum Signed Message:\n";
function hashMessage(message) {
    if (typeof message === "string") {
        message = toUtf8Bytes(message);
    }
    return keccak256(concat([
        toUtf8Bytes(messagePrefix),
        toUtf8Bytes(String(message.length)),
        message
    ]));
}
var __awaiter1 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger$11 = new Logger(version8);
const padding = new Uint8Array(32);
padding.fill(0);
const NegativeOne2 = BigNumber.from(-1);
const Zero2 = BigNumber.from(0);
const One1 = BigNumber.from(1);
const MaxUint2561 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function hexPadRight(value) {
    const bytes2 = arrayify(value);
    const padOffset = bytes2.length % 32;
    if (padOffset) {
        return hexConcat([
            bytes2,
            padding.slice(padOffset)
        ]);
    }
    return hexlify(bytes2);
}
const hexTrue = hexZeroPad(One1.toHexString(), 32);
const hexFalse = hexZeroPad(Zero2.toHexString(), 32);
const domainFieldTypes = {
    name: "string",
    version: "string",
    chainId: "uint256",
    verifyingContract: "address",
    salt: "bytes32"
};
const domainFieldNames = [
    "name",
    "version",
    "chainId",
    "verifyingContract",
    "salt"
];
function checkString(key) {
    return function(value) {
        if (typeof value !== "string") {
            logger$11.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
        }
        return value;
    };
}
const domainChecks = {
    name: checkString("name"),
    version: checkString("version"),
    chainId: function(value) {
        try {
            return BigNumber.from(value).toString();
        } catch (error) {}
        return logger$11.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
    },
    verifyingContract: function(value) {
        try {
            return getAddress(value).toLowerCase();
        } catch (error) {}
        return logger$11.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
    },
    salt: function(value) {
        try {
            const bytes2 = arrayify(value);
            if (bytes2.length !== 32) {
                throw new Error("bad length");
            }
            return hexlify(bytes2);
        } catch (error) {}
        return logger$11.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
    }
};
function getBaseEncoder(type) {
    {
        const match = type.match(/^(u?)int(\d*)$/);
        if (match) {
            const signed2 = match[1] === "";
            const width = parseInt(match[2] || "256");
            if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
                logger$11.throwArgumentError("invalid numeric width", "type", type);
            }
            const boundsUpper = MaxUint2561.mask(signed2 ? width - 1 : width);
            const boundsLower = signed2 ? boundsUpper.add(One1).mul(NegativeOne2) : Zero2;
            return function(value) {
                const v = BigNumber.from(value);
                if (v.lt(boundsLower) || v.gt(boundsUpper)) {
                    logger$11.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
                }
                return hexZeroPad(v.toTwos(256).toHexString(), 32);
            };
        }
    }
    {
        const match = type.match(/^bytes(\d+)$/);
        if (match) {
            const width = parseInt(match[1]);
            if (width === 0 || width > 32 || match[1] !== String(width)) {
                logger$11.throwArgumentError("invalid bytes width", "type", type);
            }
            return function(value) {
                const bytes2 = arrayify(value);
                if (bytes2.length !== width) {
                    logger$11.throwArgumentError(`invalid length for ${type}`, "value", value);
                }
                return hexPadRight(value);
            };
        }
    }
    switch(type){
        case "address":
            return function(value) {
                return hexZeroPad(getAddress(value), 32);
            };
        case "bool":
            return function(value) {
                return !value ? hexFalse : hexTrue;
            };
        case "bytes":
            return function(value) {
                return keccak256(value);
            };
        case "string":
            return function(value) {
                return id(value);
            };
    }
    return null;
}
function encodeType(name, fields) {
    return `${name}(${fields.map(({ name: name2, type })=>type + " " + name2).join(",")})`;
}
class TypedDataEncoder {
    constructor(types){
        defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
        defineReadOnly(this, "_encoderCache", {});
        defineReadOnly(this, "_types", {});
        const links = {};
        const parents = {};
        const subtypes = {};
        Object.keys(types).forEach((type)=>{
            links[type] = {};
            parents[type] = [];
            subtypes[type] = {};
        });
        for(const name in types){
            const uniqueNames = {};
            types[name].forEach((field)=>{
                if (uniqueNames[field.name]) {
                    logger$11.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                }
                uniqueNames[field.name] = true;
                const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                if (baseType === name) {
                    logger$11.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                }
                const encoder = getBaseEncoder(baseType);
                if (encoder) {
                    return;
                }
                if (!parents[baseType]) {
                    logger$11.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
                }
                parents[baseType].push(name);
                links[name][baseType] = true;
            });
        }
        const primaryTypes = Object.keys(parents).filter((n)=>parents[n].length === 0);
        if (primaryTypes.length === 0) {
            logger$11.throwArgumentError("missing primary type", "types", types);
        } else if (primaryTypes.length > 1) {
            logger$11.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t)=>JSON.stringify(t)).join(", ")}`, "types", types);
        }
        defineReadOnly(this, "primaryType", primaryTypes[0]);
        function checkCircular(type, found) {
            if (found[type]) {
                logger$11.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
            }
            found[type] = true;
            Object.keys(links[type]).forEach((child)=>{
                if (!parents[child]) {
                    return;
                }
                checkCircular(child, found);
                Object.keys(found).forEach((subtype)=>{
                    subtypes[subtype][child] = true;
                });
            });
            delete found[type];
        }
        checkCircular(this.primaryType, {});
        for(const name in subtypes){
            const st = Object.keys(subtypes[name]);
            st.sort();
            this._types[name] = encodeType(name, types[name]) + st.map((t)=>encodeType(t, types[t])).join("");
        }
    }
    getEncoder(type) {
        let encoder = this._encoderCache[type];
        if (!encoder) {
            encoder = this._encoderCache[type] = this._getEncoder(type);
        }
        return encoder;
    }
    _getEncoder(type) {
        {
            const encoder = getBaseEncoder(type);
            if (encoder) {
                return encoder;
            }
        }
        const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
        if (match) {
            const subtype = match[1];
            const subEncoder = this.getEncoder(subtype);
            const length = parseInt(match[3]);
            return (value)=>{
                if (length >= 0 && value.length !== length) {
                    logger$11.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                }
                let result = value.map(subEncoder);
                if (this._types[subtype]) {
                    result = result.map(keccak256);
                }
                return keccak256(hexConcat(result));
            };
        }
        const fields = this.types[type];
        if (fields) {
            const encodedType = id(this._types[type]);
            return (value)=>{
                const values = fields.map(({ name, type: type2 })=>{
                    const result = this.getEncoder(type2)(value[name]);
                    if (this._types[type2]) {
                        return keccak256(result);
                    }
                    return result;
                });
                values.unshift(encodedType);
                return hexConcat(values);
            };
        }
        return logger$11.throwArgumentError(`unknown type: ${type}`, "type", type);
    }
    encodeType(name) {
        const result = this._types[name];
        if (!result) {
            logger$11.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
        }
        return result;
    }
    encodeData(type, value) {
        return this.getEncoder(type)(value);
    }
    hashStruct(name, value) {
        return keccak256(this.encodeData(name, value));
    }
    encode(value) {
        return this.encodeData(this.primaryType, value);
    }
    hash(value) {
        return this.hashStruct(this.primaryType, value);
    }
    _visit(type, value, callback) {
        {
            const encoder = getBaseEncoder(type);
            if (encoder) {
                return callback(type, value);
            }
        }
        const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
        if (match) {
            const subtype = match[1];
            const length = parseInt(match[3]);
            if (length >= 0 && value.length !== length) {
                logger$11.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
            }
            return value.map((v)=>this._visit(subtype, v, callback));
        }
        const fields = this.types[type];
        if (fields) {
            return fields.reduce((accum, { name, type: type2 })=>{
                accum[name] = this._visit(type2, value[name], callback);
                return accum;
            }, {});
        }
        return logger$11.throwArgumentError(`unknown type: ${type}`, "type", type);
    }
    visit(value, callback) {
        return this._visit(this.primaryType, value, callback);
    }
    static from(types) {
        return new TypedDataEncoder(types);
    }
    static getPrimaryType(types) {
        return TypedDataEncoder.from(types).primaryType;
    }
    static hashStruct(name, types, value) {
        return TypedDataEncoder.from(types).hashStruct(name, value);
    }
    static hashDomain(domain) {
        const domainFields = [];
        for(const name in domain){
            const type = domainFieldTypes[name];
            if (!type) {
                logger$11.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
            }
            domainFields.push({
                name,
                type
            });
        }
        domainFields.sort((a, b)=>{
            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
        });
        return TypedDataEncoder.hashStruct("EIP712Domain", {
            EIP712Domain: domainFields
        }, domain);
    }
    static encode(domain, types, value) {
        return hexConcat([
            "0x1901",
            TypedDataEncoder.hashDomain(domain),
            TypedDataEncoder.from(types).hash(value)
        ]);
    }
    static hash(domain, types, value) {
        return keccak256(TypedDataEncoder.encode(domain, types, value));
    }
    static resolveNames(domain, types, value, resolveName) {
        return __awaiter1(this, void 0, void 0, function*() {
            domain = shallowCopy(domain);
            const ensCache = {};
            if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
                ensCache[domain.verifyingContract] = "0x";
            }
            const encoder = TypedDataEncoder.from(types);
            encoder.visit(value, (type, value2)=>{
                if (type === "address" && !isHexString(value2, 20)) {
                    ensCache[value2] = "0x";
                }
                return value2;
            });
            for(const name in ensCache){
                ensCache[name] = yield resolveName(name);
            }
            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                domain.verifyingContract = ensCache[domain.verifyingContract];
            }
            value = encoder.visit(value, (type, value2)=>{
                if (type === "address" && ensCache[value2]) {
                    return ensCache[value2];
                }
                return value2;
            });
            return {
                domain,
                value
            };
        });
    }
    static getPayload(domain, types, value) {
        TypedDataEncoder.hashDomain(domain);
        const domainValues = {};
        const domainTypes = [];
        domainFieldNames.forEach((name)=>{
            const value2 = domain[name];
            if (value2 == null) {
                return;
            }
            domainValues[name] = domainChecks[name](value2);
            domainTypes.push({
                name,
                type: domainFieldTypes[name]
            });
        });
        const encoder = TypedDataEncoder.from(types);
        const typesWithDomain = shallowCopy(types);
        if (typesWithDomain.EIP712Domain) {
            logger$11.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
        } else {
            typesWithDomain.EIP712Domain = domainTypes;
        }
        encoder.encode(value);
        return {
            types: typesWithDomain,
            domain: domainValues,
            primaryType: encoder.primaryType,
            message: encoder.visit(value, (type, value2)=>{
                if (type.match(/^bytes(\d*)/)) {
                    return hexlify(arrayify(value2));
                }
                if (type.match(/^u?int/)) {
                    return BigNumber.from(value2).toString();
                }
                switch(type){
                    case "address":
                        return value2.toLowerCase();
                    case "bool":
                        return !!value2;
                    case "string":
                        if (typeof value2 !== "string") {
                            logger$11.throwArgumentError(`invalid string`, "value", value2);
                        }
                        return value2;
                }
                return logger$11.throwArgumentError("unsupported type", "type", type);
            })
        };
    }
}
const version9 = "abi/5.7.0";
const logger27 = new Logger(version9);
const _constructorGuard1 = {};
let ModifiersBytes = {
    calldata: true,
    memory: true,
    storage: true
};
let ModifiersNest = {
    calldata: true,
    memory: true
};
function checkModifier(type, name) {
    if (type === "bytes" || type === "string") {
        if (ModifiersBytes[name]) {
            return true;
        }
    } else if (type === "address") {
        if (name === "payable") {
            return true;
        }
    } else if (type.indexOf("[") >= 0 || type === "tuple") {
        if (ModifiersNest[name]) {
            return true;
        }
    }
    if (ModifiersBytes[name] || name === "payable") {
        logger27.throwArgumentError("invalid modifier", "name", name);
    }
    return false;
}
function parseParamType(param, allowIndexed) {
    let originalParam = param;
    function throwError(i) {
        logger27.throwArgumentError(`unexpected character at position ${i}`, "param", param);
    }
    param = param.replace(/\s/g, " ");
    function newNode(parent2) {
        let node2 = {
            type: "",
            name: "",
            parent: parent2,
            state: {
                allowType: true
            }
        };
        if (allowIndexed) {
            node2.indexed = false;
        }
        return node2;
    }
    let parent = {
        type: "",
        name: "",
        state: {
            allowType: true
        }
    };
    let node = parent;
    for(let i = 0; i < param.length; i++){
        let c = param[i];
        switch(c){
            case "(":
                if (node.state.allowType && node.type === "") {
                    node.type = "tuple";
                } else if (!node.state.allowParams) {
                    throwError(i);
                }
                node.state.allowType = false;
                node.type = verifyType(node.type);
                node.components = [
                    newNode(node)
                ];
                node = node.components[0];
                break;
            case ")":
                delete node.state;
                if (node.name === "indexed") {
                    if (!allowIndexed) {
                        throwError(i);
                    }
                    node.indexed = true;
                    node.name = "";
                }
                if (checkModifier(node.type, node.name)) {
                    node.name = "";
                }
                node.type = verifyType(node.type);
                let child = node;
                node = node.parent;
                if (!node) {
                    throwError(i);
                }
                delete child.parent;
                node.state.allowParams = false;
                node.state.allowName = true;
                node.state.allowArray = true;
                break;
            case ",":
                delete node.state;
                if (node.name === "indexed") {
                    if (!allowIndexed) {
                        throwError(i);
                    }
                    node.indexed = true;
                    node.name = "";
                }
                if (checkModifier(node.type, node.name)) {
                    node.name = "";
                }
                node.type = verifyType(node.type);
                let sibling = newNode(node.parent);
                node.parent.components.push(sibling);
                delete node.parent;
                node = sibling;
                break;
            case " ":
                if (node.state.allowType) {
                    if (node.type !== "") {
                        node.type = verifyType(node.type);
                        delete node.state.allowType;
                        node.state.allowName = true;
                        node.state.allowParams = true;
                    }
                }
                if (node.state.allowName) {
                    if (node.name !== "") {
                        if (node.name === "indexed") {
                            if (!allowIndexed) {
                                throwError(i);
                            }
                            if (node.indexed) {
                                throwError(i);
                            }
                            node.indexed = true;
                            node.name = "";
                        } else if (checkModifier(node.type, node.name)) {
                            node.name = "";
                        } else {
                            node.state.allowName = false;
                        }
                    }
                }
                break;
            case "[":
                if (!node.state.allowArray) {
                    throwError(i);
                }
                node.type += c;
                node.state.allowArray = false;
                node.state.allowName = false;
                node.state.readArray = true;
                break;
            case "]":
                if (!node.state.readArray) {
                    throwError(i);
                }
                node.type += c;
                node.state.readArray = false;
                node.state.allowArray = true;
                node.state.allowName = true;
                break;
            default:
                if (node.state.allowType) {
                    node.type += c;
                    node.state.allowParams = true;
                    node.state.allowArray = true;
                } else if (node.state.allowName) {
                    node.name += c;
                    delete node.state.allowArray;
                } else if (node.state.readArray) {
                    node.type += c;
                } else {
                    throwError(i);
                }
        }
    }
    if (node.parent) {
        logger27.throwArgumentError("unexpected eof", "param", param);
    }
    delete parent.state;
    if (node.name === "indexed") {
        if (!allowIndexed) {
            throwError(originalParam.length - 7);
        }
        if (node.indexed) {
            throwError(originalParam.length - 7);
        }
        node.indexed = true;
        node.name = "";
    } else if (checkModifier(node.type, node.name)) {
        node.name = "";
    }
    parent.type = verifyType(parent.type);
    return parent;
}
function populate(object, params) {
    for(let key in params){
        defineReadOnly(object, key, params[key]);
    }
}
const FormatTypes = Object.freeze({
    sighash: "sighash",
    minimal: "minimal",
    full: "full",
    json: "json"
});
const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
class ParamType {
    constructor(constructorGuard, params){
        if (constructorGuard !== _constructorGuard1) {
            logger27.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new ParamType()"
            });
        }
        populate(this, params);
        let match = this.type.match(paramTypeArray);
        if (match) {
            populate(this, {
                arrayLength: parseInt(match[2] || "-1"),
                arrayChildren: ParamType.fromObject({
                    type: match[1],
                    components: this.components
                }),
                baseType: "array"
            });
        } else {
            populate(this, {
                arrayLength: null,
                arrayChildren: null,
                baseType: this.components != null ? "tuple" : this.type
            });
        }
        this._isParamType = true;
        Object.freeze(this);
    }
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            logger27.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            let result2 = {
                type: this.baseType === "tuple" ? "tuple" : this.type,
                name: this.name || void 0
            };
            if (typeof this.indexed === "boolean") {
                result2.indexed = this.indexed;
            }
            if (this.components) {
                result2.components = this.components.map((comp)=>JSON.parse(comp.format(format)));
            }
            return JSON.stringify(result2);
        }
        let result = "";
        if (this.baseType === "array") {
            result += this.arrayChildren.format(format);
            result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        } else {
            if (this.baseType === "tuple") {
                if (format !== FormatTypes.sighash) {
                    result += this.type;
                }
                result += "(" + this.components.map((comp)=>comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
            } else {
                result += this.type;
            }
        }
        if (format !== FormatTypes.sighash) {
            if (this.indexed === true) {
                result += " indexed";
            }
            if (format === FormatTypes.full && this.name) {
                result += " " + this.name;
            }
        }
        return result;
    }
    static from(value, allowIndexed) {
        if (typeof value === "string") {
            return ParamType.fromString(value, allowIndexed);
        }
        return ParamType.fromObject(value);
    }
    static fromObject(value) {
        if (ParamType.isParamType(value)) {
            return value;
        }
        return new ParamType(_constructorGuard1, {
            name: value.name || null,
            type: verifyType(value.type),
            indexed: value.indexed == null ? null : !!value.indexed,
            components: value.components ? value.components.map(ParamType.fromObject) : null
        });
    }
    static fromString(value, allowIndexed) {
        function ParamTypify(node) {
            return ParamType.fromObject({
                name: node.name,
                type: node.type,
                indexed: node.indexed,
                components: node.components
            });
        }
        return ParamTypify(parseParamType(value, !!allowIndexed));
    }
    static isParamType(value) {
        return !!(value != null && value._isParamType);
    }
}
function parseParams(value, allowIndex) {
    return splitNesting(value).map((param)=>ParamType.fromString(param, allowIndex));
}
class Fragment {
    constructor(constructorGuard, params){
        if (constructorGuard !== _constructorGuard1) {
            logger27.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new Fragment()"
            });
        }
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
    }
    static from(value) {
        if (Fragment.isFragment(value)) {
            return value;
        }
        if (typeof value === "string") {
            return Fragment.fromString(value);
        }
        return Fragment.fromObject(value);
    }
    static fromObject(value) {
        if (Fragment.isFragment(value)) {
            return value;
        }
        switch(value.type){
            case "function":
                return FunctionFragment.fromObject(value);
            case "event":
                return EventFragment.fromObject(value);
            case "constructor":
                return ConstructorFragment.fromObject(value);
            case "error":
                return ErrorFragment.fromObject(value);
            case "fallback":
            case "receive":
                return null;
        }
        return logger27.throwArgumentError("invalid fragment object", "value", value);
    }
    static fromString(value) {
        value = value.replace(/\s/g, " ");
        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value = value.trim();
        if (value.split(" ")[0] === "event") {
            return EventFragment.fromString(value.substring(5).trim());
        } else if (value.split(" ")[0] === "function") {
            return FunctionFragment.fromString(value.substring(8).trim());
        } else if (value.split("(")[0].trim() === "constructor") {
            return ConstructorFragment.fromString(value.trim());
        } else if (value.split(" ")[0] === "error") {
            return ErrorFragment.fromString(value.substring(5).trim());
        }
        return logger27.throwArgumentError("unsupported fragment", "value", value);
    }
    static isFragment(value) {
        return !!(value && value._isFragment);
    }
}
class EventFragment extends Fragment {
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            logger27.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            return JSON.stringify({
                type: "event",
                anonymous: this.anonymous,
                name: this.name,
                inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))
            });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
            result += "event ";
        }
        result += this.name + "(" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
            if (this.anonymous) {
                result += "anonymous ";
            }
        }
        return result.trim();
    }
    static from(value) {
        if (typeof value === "string") {
            return EventFragment.fromString(value);
        }
        return EventFragment.fromObject(value);
    }
    static fromObject(value) {
        if (EventFragment.isEventFragment(value)) {
            return value;
        }
        if (value.type !== "event") {
            logger27.throwArgumentError("invalid event object", "value", value);
        }
        const params = {
            name: verifyIdentifier(value.name),
            anonymous: value.anonymous,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            type: "event"
        };
        return new EventFragment(_constructorGuard1, params);
    }
    static fromString(value) {
        let match = value.match(regexParen);
        if (!match) {
            logger27.throwArgumentError("invalid event string", "value", value);
        }
        let anonymous = false;
        match[3].split(" ").forEach((modifier)=>{
            switch(modifier.trim()){
                case "anonymous":
                    anonymous = true;
                    break;
                case "":
                    break;
                default:
                    logger27.warn("unknown modifier: " + modifier);
            }
        });
        return EventFragment.fromObject({
            name: match[1].trim(),
            anonymous,
            inputs: parseParams(match[2], true),
            type: "event"
        });
    }
    static isEventFragment(value) {
        return value && value._isFragment && value.type === "event";
    }
}
function parseGas(value, params) {
    params.gas = null;
    let comps = value.split("@");
    if (comps.length !== 1) {
        if (comps.length > 2) {
            logger27.throwArgumentError("invalid human-readable ABI signature", "value", value);
        }
        if (!comps[1].match(/^[0-9]+$/)) {
            logger27.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
        }
        params.gas = BigNumber.from(comps[1]);
        return comps[0];
    }
    return value;
}
function parseModifiers(value, params) {
    params.constant = false;
    params.payable = false;
    params.stateMutability = "nonpayable";
    value.split(" ").forEach((modifier)=>{
        switch(modifier.trim()){
            case "constant":
                params.constant = true;
                break;
            case "payable":
                params.payable = true;
                params.stateMutability = "payable";
                break;
            case "nonpayable":
                params.payable = false;
                params.stateMutability = "nonpayable";
                break;
            case "pure":
                params.constant = true;
                params.stateMutability = "pure";
                break;
            case "view":
                params.constant = true;
                params.stateMutability = "view";
                break;
            case "external":
            case "public":
            case "":
                break;
            default:
                console.log("unknown modifier: " + modifier);
        }
    });
}
function verifyState(value) {
    let result = {
        constant: false,
        payable: true,
        stateMutability: "payable"
    };
    if (value.stateMutability != null) {
        result.stateMutability = value.stateMutability;
        result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
        if (value.constant != null) {
            if (!!value.constant !== result.constant) {
                logger27.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
            }
        }
        result.payable = result.stateMutability === "payable";
        if (value.payable != null) {
            if (!!value.payable !== result.payable) {
                logger27.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
            }
        }
    } else if (value.payable != null) {
        result.payable = !!value.payable;
        if (value.constant == null && !result.payable && value.type !== "constructor") {
            logger27.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        result.constant = !!value.constant;
        if (result.constant) {
            result.stateMutability = "view";
        } else {
            result.stateMutability = result.payable ? "payable" : "nonpayable";
        }
        if (result.payable && result.constant) {
            logger27.throwArgumentError("cannot have constant payable function", "value", value);
        }
    } else if (value.constant != null) {
        result.constant = !!value.constant;
        result.payable = !result.constant;
        result.stateMutability = result.constant ? "view" : "payable";
    } else if (value.type !== "constructor") {
        logger27.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    return result;
}
class ConstructorFragment extends Fragment {
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            logger27.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            return JSON.stringify({
                type: "constructor",
                stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
                payable: this.payable,
                gas: this.gas ? this.gas.toNumber() : void 0,
                inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))
            });
        }
        if (format === FormatTypes.sighash) {
            logger27.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "format(sighash)"
            });
        }
        let result = "constructor(" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
        }
        return result.trim();
    }
    static from(value) {
        if (typeof value === "string") {
            return ConstructorFragment.fromString(value);
        }
        return ConstructorFragment.fromObject(value);
    }
    static fromObject(value) {
        if (ConstructorFragment.isConstructorFragment(value)) {
            return value;
        }
        if (value.type !== "constructor") {
            logger27.throwArgumentError("invalid constructor object", "value", value);
        }
        let state = verifyState(value);
        if (state.constant) {
            logger27.throwArgumentError("constructor cannot be constant", "value", value);
        }
        const params = {
            name: null,
            type: value.type,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new ConstructorFragment(_constructorGuard1, params);
    }
    static fromString(value) {
        let params = {
            type: "constructor"
        };
        value = parseGas(value, params);
        let parens = value.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") {
            logger27.throwArgumentError("invalid constructor string", "value", value);
        }
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return ConstructorFragment.fromObject(params);
    }
    static isConstructorFragment(value) {
        return value && value._isFragment && value.type === "constructor";
    }
}
class FunctionFragment extends ConstructorFragment {
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            logger27.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            return JSON.stringify({
                type: "function",
                name: this.name,
                constant: this.constant,
                stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
                payable: this.payable,
                gas: this.gas ? this.gas.toNumber() : void 0,
                inputs: this.inputs.map((input)=>JSON.parse(input.format(format))),
                outputs: this.outputs.map((output)=>JSON.parse(output.format(format)))
            });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
            result += "function ";
        }
        result += this.name + "(" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
            if (this.stateMutability) {
                if (this.stateMutability !== "nonpayable") {
                    result += this.stateMutability + " ";
                }
            } else if (this.constant) {
                result += "view ";
            }
            if (this.outputs && this.outputs.length) {
                result += "returns (" + this.outputs.map((output)=>output.format(format)).join(", ") + ") ";
            }
            if (this.gas != null) {
                result += "@" + this.gas.toString() + " ";
            }
        }
        return result.trim();
    }
    static from(value) {
        if (typeof value === "string") {
            return FunctionFragment.fromString(value);
        }
        return FunctionFragment.fromObject(value);
    }
    static fromObject(value) {
        if (FunctionFragment.isFunctionFragment(value)) {
            return value;
        }
        if (value.type !== "function") {
            logger27.throwArgumentError("invalid function object", "value", value);
        }
        let state = verifyState(value);
        const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            constant: state.constant,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new FunctionFragment(_constructorGuard1, params);
    }
    static fromString(value) {
        let params = {
            type: "function"
        };
        value = parseGas(value, params);
        let comps = value.split(" returns ");
        if (comps.length > 2) {
            logger27.throwArgumentError("invalid function string", "value", value);
        }
        let parens = comps[0].match(regexParen);
        if (!parens) {
            logger27.throwArgumentError("invalid function signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
            verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        if (comps.length > 1) {
            let returns = comps[1].match(regexParen);
            if (returns[1].trim() != "" || returns[3].trim() != "") {
                logger27.throwArgumentError("unexpected tokens", "value", value);
            }
            params.outputs = parseParams(returns[2], false);
        } else {
            params.outputs = [];
        }
        return FunctionFragment.fromObject(params);
    }
    static isFunctionFragment(value) {
        return value && value._isFragment && value.type === "function";
    }
}
function checkForbidden(fragment) {
    const sig = fragment.format();
    if (sig === "Error(string)" || sig === "Panic(uint256)") {
        logger27.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
    }
    return fragment;
}
class ErrorFragment extends Fragment {
    format(format) {
        if (!format) {
            format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
            logger27.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
            return JSON.stringify({
                type: "error",
                name: this.name,
                inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))
            });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
            result += "error ";
        }
        result += this.name + "(" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        return result.trim();
    }
    static from(value) {
        if (typeof value === "string") {
            return ErrorFragment.fromString(value);
        }
        return ErrorFragment.fromObject(value);
    }
    static fromObject(value) {
        if (ErrorFragment.isErrorFragment(value)) {
            return value;
        }
        if (value.type !== "error") {
            logger27.throwArgumentError("invalid error object", "value", value);
        }
        const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
        };
        return checkForbidden(new ErrorFragment(_constructorGuard1, params));
    }
    static fromString(value) {
        let params = {
            type: "error"
        };
        let parens = value.match(regexParen);
        if (!parens) {
            logger27.throwArgumentError("invalid error signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
            verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(ErrorFragment.fromObject(params));
    }
    static isErrorFragment(value) {
        return value && value._isFragment && value.type === "error";
    }
}
function verifyType(type) {
    if (type.match(/^uint($|[^1-9])/)) {
        type = "uint256" + type.substring(4);
    } else if (type.match(/^int($|[^1-9])/)) {
        type = "int256" + type.substring(3);
    }
    return type;
}
const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
function verifyIdentifier(value) {
    if (!value || !value.match(regexIdentifier)) {
        logger27.throwArgumentError(`invalid identifier "${value}"`, "value", value);
    }
    return value;
}
const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
function splitNesting(value) {
    value = value.trim();
    let result = [];
    let accum = "";
    let depth = 0;
    for(let offset = 0; offset < value.length; offset++){
        let c = value[offset];
        if (c === "," && depth === 0) {
            result.push(accum);
            accum = "";
        } else {
            accum += c;
            if (c === "(") {
                depth++;
            } else if (c === ")") {
                depth--;
                if (depth === -1) {
                    logger27.throwArgumentError("unbalanced parenthesis", "value", value);
                }
            }
        }
    }
    if (accum) {
        result.push(accum);
    }
    return result;
}
const logger$12 = new Logger(version9);
function checkResultErrors(result) {
    const errors = [];
    const checkErrors = function(path, object) {
        if (!Array.isArray(object)) {
            return;
        }
        for(let key in object){
            const childPath = path.slice();
            childPath.push(key);
            try {
                checkErrors(childPath, object[key]);
            } catch (error) {
                errors.push({
                    path: childPath,
                    error
                });
            }
        }
    };
    checkErrors([], result);
    return errors;
}
class Coder {
    constructor(name, type, localName, dynamic){
        this.name = name;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
    }
    _throwError(message, value) {
        logger$12.throwArgumentError(message, this.localName, value);
    }
}
class Writer {
    constructor(wordSize){
        defineReadOnly(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
    }
    get data() {
        return hexConcat(this._data);
    }
    get length() {
        return this._dataLength;
    }
    _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
    }
    appendWriter(writer) {
        return this._writeData(concat(writer._data));
    }
    writeBytes(value) {
        let bytes2 = arrayify(value);
        const paddingOffset = bytes2.length % this.wordSize;
        if (paddingOffset) {
            bytes2 = concat([
                bytes2,
                this._padding.slice(paddingOffset)
            ]);
        }
        return this._writeData(bytes2);
    }
    _getValue(value) {
        let bytes2 = arrayify(BigNumber.from(value));
        if (bytes2.length > this.wordSize) {
            logger$12.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                length: this.wordSize,
                offset: bytes2.length
            });
        }
        if (bytes2.length % this.wordSize) {
            bytes2 = concat([
                this._padding.slice(bytes2.length % this.wordSize),
                bytes2
            ]);
        }
        return bytes2;
    }
    writeValue(value) {
        return this._writeData(this._getValue(value));
    }
    writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value)=>{
            this._data[offset] = this._getValue(value);
        };
    }
}
class Reader {
    constructor(data, wordSize, coerceFunc, allowLoose){
        defineReadOnly(this, "_data", arrayify(data));
        defineReadOnly(this, "wordSize", wordSize || 32);
        defineReadOnly(this, "_coerceFunc", coerceFunc);
        defineReadOnly(this, "allowLoose", allowLoose);
        this._offset = 0;
    }
    get data() {
        return hexlify(this._data);
    }
    get consumed() {
        return this._offset;
    }
    static coerce(name, value) {
        let match = name.match("^u?int([0-9]+)$");
        if (match && parseInt(match[1]) <= 48) {
            value = value.toNumber();
        }
        return value;
    }
    coerce(name, value) {
        if (this._coerceFunc) {
            return this._coerceFunc(name, value);
        }
        return Reader.coerce(name, value);
    }
    _peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
            if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                alignedLength = length;
            } else {
                logger$12.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                    length: this._data.length,
                    offset: this._offset + alignedLength
                });
            }
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
    }
    subReader(offset) {
        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
    }
    readBytes(length, loose) {
        let bytes2 = this._peekBytes(0, length, !!loose);
        this._offset += bytes2.length;
        return bytes2.slice(0, length);
    }
    readValue() {
        return BigNumber.from(this.readBytes(this.wordSize));
    }
}
class AddressCoder extends Coder {
    constructor(localName){
        super("address", "address", localName, false);
    }
    defaultValue() {
        return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, value) {
        try {
            value = getAddress(value);
        } catch (error) {
            this._throwError(error.message, value);
        }
        return writer.writeValue(value);
    }
    decode(reader) {
        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
    }
}
class AnonymousCoder extends Coder {
    constructor(coder){
        super(coder.name, coder.type, void 0, coder.dynamic);
        this.coder = coder;
    }
    defaultValue() {
        return this.coder.defaultValue();
    }
    encode(writer, value) {
        return this.coder.encode(writer, value);
    }
    decode(reader) {
        return this.coder.decode(reader);
    }
}
const logger$2 = new Logger(version9);
function pack(writer, coders, values) {
    let arrayValues = null;
    if (Array.isArray(values)) {
        arrayValues = values;
    } else if (values && typeof values === "object") {
        let unique = {};
        arrayValues = coders.map((coder)=>{
            const name = coder.localName;
            if (!name) {
                logger$2.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
                    argument: "values",
                    coder,
                    value: values
                });
            }
            if (unique[name]) {
                logger$2.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
                    argument: "values",
                    coder,
                    value: values
                });
            }
            unique[name] = true;
            return values[name];
        });
    } else {
        logger$2.throwArgumentError("invalid tuple value", "tuple", values);
    }
    if (coders.length !== arrayValues.length) {
        logger$2.throwArgumentError("types/value length mismatch", "tuple", values);
    }
    let staticWriter = new Writer(writer.wordSize);
    let dynamicWriter = new Writer(writer.wordSize);
    let updateFuncs = [];
    coders.forEach((coder, index)=>{
        let value = arrayValues[index];
        if (coder.dynamic) {
            let dynamicOffset = dynamicWriter.length;
            coder.encode(dynamicWriter, value);
            let updateFunc = staticWriter.writeUpdatableValue();
            updateFuncs.push((baseOffset)=>{
                updateFunc(baseOffset + dynamicOffset);
            });
        } else {
            coder.encode(staticWriter, value);
        }
    });
    updateFuncs.forEach((func)=>{
        func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
}
function unpack(reader, coders) {
    let values = [];
    let baseReader = reader.subReader(0);
    coders.forEach((coder)=>{
        let value = null;
        if (coder.dynamic) {
            let offset = reader.readValue();
            let offsetReader = baseReader.subReader(offset.toNumber());
            try {
                value = coder.decode(offsetReader);
            } catch (error) {
                if (error.code === Logger.errors.BUFFER_OVERRUN) {
                    throw error;
                }
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
            }
        } else {
            try {
                value = coder.decode(reader);
            } catch (error) {
                if (error.code === Logger.errors.BUFFER_OVERRUN) {
                    throw error;
                }
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
            }
        }
        if (value != void 0) {
            values.push(value);
        }
    });
    const uniqueNames = coders.reduce((accum, coder)=>{
        const name = coder.localName;
        if (name) {
            if (!accum[name]) {
                accum[name] = 0;
            }
            accum[name]++;
        }
        return accum;
    }, {});
    coders.forEach((coder, index)=>{
        let name = coder.localName;
        if (!name || uniqueNames[name] !== 1) {
            return;
        }
        if (name === "length") {
            name = "_length";
        }
        if (values[name] != null) {
            return;
        }
        const value = values[index];
        if (value instanceof Error) {
            Object.defineProperty(values, name, {
                enumerable: true,
                get: ()=>{
                    throw value;
                }
            });
        } else {
            values[name] = value;
        }
    });
    for(let i = 0; i < values.length; i++){
        const value = values[i];
        if (value instanceof Error) {
            Object.defineProperty(values, i, {
                enumerable: true,
                get: ()=>{
                    throw value;
                }
            });
        }
    }
    return Object.freeze(values);
}
class ArrayCoder extends Coder {
    constructor(coder, length, localName){
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length;
    }
    defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for(let i = 0; i < this.length; i++){
            result.push(defaultChild);
        }
        return result;
    }
    encode(writer, value) {
        if (!Array.isArray(value)) {
            this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
            count = value.length;
            writer.writeValue(value.length);
        }
        logger$2.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for(let i = 0; i < value.length; i++){
            coders.push(this.coder);
        }
        return pack(writer, coders, value);
    }
    decode(reader) {
        let count = this.length;
        if (count === -1) {
            count = reader.readValue().toNumber();
            if (count * 32 > reader._data.length) {
                logger$2.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
                    length: reader._data.length,
                    count
                });
            }
        }
        let coders = [];
        for(let i = 0; i < count; i++){
            coders.push(new AnonymousCoder(this.coder));
        }
        return reader.coerce(this.name, unpack(reader, coders));
    }
}
class BooleanCoder extends Coder {
    constructor(localName){
        super("bool", "bool", localName, false);
    }
    defaultValue() {
        return false;
    }
    encode(writer, value) {
        return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
    }
}
class DynamicBytesCoder extends Coder {
    constructor(type, localName){
        super(type, type, localName, true);
    }
    defaultValue() {
        return "0x";
    }
    encode(writer, value) {
        value = arrayify(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
    }
    decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
    }
}
class BytesCoder extends DynamicBytesCoder {
    constructor(localName){
        super("bytes", localName);
    }
    decode(reader) {
        return reader.coerce(this.name, hexlify(super.decode(reader)));
    }
}
class FixedBytesCoder extends Coder {
    constructor(size, localName){
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        this.size = size;
    }
    defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, value) {
        let data = arrayify(value);
        if (data.length !== this.size) {
            this._throwError("incorrect data length", value);
        }
        return writer.writeBytes(data);
    }
    decode(reader) {
        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
    }
}
class NullCoder extends Coder {
    constructor(localName){
        super("null", "", localName, false);
    }
    defaultValue() {
        return null;
    }
    encode(writer, value) {
        if (value != null) {
            this._throwError("not null", value);
        }
        return writer.writeBytes([]);
    }
    decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
    }
}
class NumberCoder extends Coder {
    constructor(size, signed, localName){
        const name = (signed ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        this.size = size;
        this.signed = signed;
    }
    defaultValue() {
        return 0;
    }
    encode(writer, value) {
        let v = BigNumber.from(value);
        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
        if (this.signed) {
            let bounds = maxUintValue.mask(this.size * 8 - 1);
            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne1))) {
                this._throwError("value out-of-bounds", value);
            }
        } else if (v.lt(Zero1) || v.gt(maxUintValue.mask(this.size * 8))) {
            this._throwError("value out-of-bounds", value);
        }
        v = v.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) {
            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        }
        return writer.writeValue(v);
    }
    decode(reader) {
        let value = reader.readValue().mask(this.size * 8);
        if (this.signed) {
            value = value.fromTwos(this.size * 8);
        }
        return reader.coerce(this.name, value);
    }
}
class StringCoder extends DynamicBytesCoder {
    constructor(localName){
        super("string", localName);
    }
    defaultValue() {
        return "";
    }
    encode(writer, value) {
        return super.encode(writer, toUtf8Bytes(value));
    }
    decode(reader) {
        return toUtf8String(super.decode(reader));
    }
}
class TupleCoder extends Coder {
    constructor(coders, localName){
        let dynamic = false;
        const types = [];
        coders.forEach((coder)=>{
            if (coder.dynamic) {
                dynamic = true;
            }
            types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        this.coders = coders;
    }
    defaultValue() {
        const values = [];
        this.coders.forEach((coder)=>{
            values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder)=>{
            const name = coder.localName;
            if (name) {
                if (!accum[name]) {
                    accum[name] = 0;
                }
                accum[name]++;
            }
            return accum;
        }, {});
        this.coders.forEach((coder, index)=>{
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
                return;
            }
            if (name === "length") {
                name = "_length";
            }
            if (values[name] != null) {
                return;
            }
            values[name] = values[index];
        });
        return Object.freeze(values);
    }
    encode(writer, value) {
        return pack(writer, this.coders, value);
    }
    decode(reader) {
        return reader.coerce(this.name, unpack(reader, this.coders));
    }
}
const logger$3 = new Logger(version9);
const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
class AbiCoder {
    constructor(coerceFunc){
        defineReadOnly(this, "coerceFunc", coerceFunc || null);
    }
    _getCoder(param) {
        switch(param.baseType){
            case "address":
                return new AddressCoder(param.name);
            case "bool":
                return new BooleanCoder(param.name);
            case "string":
                return new StringCoder(param.name);
            case "bytes":
                return new BytesCoder(param.name);
            case "array":
                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
            case "tuple":
                return new TupleCoder((param.components || []).map((component)=>{
                    return this._getCoder(component);
                }), param.name);
            case "":
                return new NullCoder(param.name);
        }
        let match = param.type.match(paramTypeNumber);
        if (match) {
            let size = parseInt(match[2] || "256");
            if (size === 0 || size > 256 || size % 8 !== 0) {
                logger$3.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
            }
            return new NumberCoder(size / 8, match[1] === "int", param.name);
        }
        match = param.type.match(paramTypeBytes);
        if (match) {
            let size = parseInt(match[1]);
            if (size === 0 || size > 32) {
                logger$3.throwArgumentError("invalid bytes length", "param", param);
            }
            return new FixedBytesCoder(size, param.name);
        }
        return logger$3.throwArgumentError("invalid type", "type", param.type);
    }
    _getWordSize() {
        return 32;
    }
    _getReader(data, allowLoose) {
        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
    }
    _getWriter() {
        return new Writer(this._getWordSize());
    }
    getDefaultValue(types) {
        const coders = types.map((type)=>this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.defaultValue();
    }
    encode(types, values) {
        if (types.length !== values.length) {
            logger$3.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
                count: {
                    types: types.length,
                    values: values.length
                },
                value: {
                    types,
                    values
                }
            });
        }
        const coders = types.map((type)=>this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
    }
    decode(types, data, loose) {
        const coders = types.map((type)=>this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.decode(this._getReader(arrayify(data), loose));
    }
}
const defaultAbiCoder = new AbiCoder();
const logger$4 = new Logger(version9);
class LogDescription extends Description {
}
class TransactionDescription extends Description {
}
class ErrorDescription extends Description {
}
class Indexed extends Description {
    static isIndexed(value) {
        return !!(value && value._isIndexed);
    }
}
const BuiltinErrors = {
    "0x08c379a0": {
        signature: "Error(string)",
        name: "Error",
        inputs: [
            "string"
        ],
        reason: true
    },
    "0x4e487b71": {
        signature: "Panic(uint256)",
        name: "Panic",
        inputs: [
            "uint256"
        ]
    }
};
function wrapAccessError(property, error) {
    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
    wrap.error = error;
    return wrap;
}
class Interface {
    constructor(fragments){
        let abi = [];
        if (typeof fragments === "string") {
            abi = JSON.parse(fragments);
        } else {
            abi = fragments;
        }
        defineReadOnly(this, "fragments", abi.map((fragment)=>{
            return Fragment.from(fragment);
        }).filter((fragment)=>fragment != null));
        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "errors", {});
        defineReadOnly(this, "events", {});
        defineReadOnly(this, "structs", {});
        this.fragments.forEach((fragment)=>{
            let bucket = null;
            switch(fragment.type){
                case "constructor":
                    if (this.deploy) {
                        logger$4.warn("duplicate definition - constructor");
                        return;
                    }
                    defineReadOnly(this, "deploy", fragment);
                    return;
                case "function":
                    bucket = this.functions;
                    break;
                case "event":
                    bucket = this.events;
                    break;
                case "error":
                    bucket = this.errors;
                    break;
                default:
                    return;
            }
            let signature = fragment.format();
            if (bucket[signature]) {
                logger$4.warn("duplicate definition - " + signature);
                return;
            }
            bucket[signature] = fragment;
        });
        if (!this.deploy) {
            defineReadOnly(this, "deploy", ConstructorFragment.from({
                payable: false,
                type: "constructor"
            }));
        }
        defineReadOnly(this, "_isInterface", true);
    }
    format(format) {
        if (!format) {
            format = FormatTypes.full;
        }
        if (format === FormatTypes.sighash) {
            logger$4.throwArgumentError("interface does not support formatting sighash", "format", format);
        }
        const abi = this.fragments.map((fragment)=>fragment.format(format));
        if (format === FormatTypes.json) {
            return JSON.stringify(abi.map((j)=>JSON.parse(j)));
        }
        return abi;
    }
    static getAbiCoder() {
        return defaultAbiCoder;
    }
    static getAddress(address2) {
        return getAddress(address2);
    }
    static getSighash(fragment) {
        return hexDataSlice(id(fragment.format()), 0, 4);
    }
    static getEventTopic(eventFragment) {
        return id(eventFragment.format());
    }
    getFunction(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
            for(const name in this.functions){
                if (nameOrSignatureOrSighash === this.getSighash(name)) {
                    return this.functions[name];
                }
            }
            logger$4.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            const name = nameOrSignatureOrSighash.trim();
            const matching = Object.keys(this.functions).filter((f)=>f.split("(")[0] === name);
            if (matching.length === 0) {
                logger$4.throwArgumentError("no matching function", "name", name);
            } else if (matching.length > 1) {
                logger$4.throwArgumentError("multiple matching functions", "name", name);
            }
            return this.functions[matching[0]];
        }
        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
            logger$4.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        }
        return result;
    }
    getEvent(nameOrSignatureOrTopic) {
        if (isHexString(nameOrSignatureOrTopic)) {
            const topichash = nameOrSignatureOrTopic.toLowerCase();
            for(const name in this.events){
                if (topichash === this.getEventTopic(name)) {
                    return this.events[name];
                }
            }
            logger$4.throwArgumentError("no matching event", "topichash", topichash);
        }
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
            const name = nameOrSignatureOrTopic.trim();
            const matching = Object.keys(this.events).filter((f)=>f.split("(")[0] === name);
            if (matching.length === 0) {
                logger$4.throwArgumentError("no matching event", "name", name);
            } else if (matching.length > 1) {
                logger$4.throwArgumentError("multiple matching events", "name", name);
            }
            return this.events[matching[0]];
        }
        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
        if (!result) {
            logger$4.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        }
        return result;
    }
    getError(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
            const getSighash = getStatic(this.constructor, "getSighash");
            for(const name in this.errors){
                const error = this.errors[name];
                if (nameOrSignatureOrSighash === getSighash(error)) {
                    return this.errors[name];
                }
            }
            logger$4.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            const name = nameOrSignatureOrSighash.trim();
            const matching = Object.keys(this.errors).filter((f)=>f.split("(")[0] === name);
            if (matching.length === 0) {
                logger$4.throwArgumentError("no matching error", "name", name);
            } else if (matching.length > 1) {
                logger$4.throwArgumentError("multiple matching errors", "name", name);
            }
            return this.errors[matching[0]];
        }
        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
            logger$4.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        }
        return result;
    }
    getSighash(fragment) {
        if (typeof fragment === "string") {
            try {
                fragment = this.getFunction(fragment);
            } catch (error) {
                try {
                    fragment = this.getError(fragment);
                } catch (_) {
                    throw error;
                }
            }
        }
        return getStatic(this.constructor, "getSighash")(fragment);
    }
    getEventTopic(eventFragment) {
        if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
        }
        return getStatic(this.constructor, "getEventTopic")(eventFragment);
    }
    _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
    }
    _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
    }
    encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
    }
    decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
            fragment = this.getError(fragment);
        }
        const bytes2 = arrayify(data);
        if (hexlify(bytes2.slice(0, 4)) !== this.getSighash(fragment)) {
            logger$4.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes2));
        }
        return this._decodeParams(fragment.inputs, bytes2.slice(4));
    }
    encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
            fragment = this.getError(fragment);
        }
        return hexlify(concat([
            this.getSighash(fragment),
            this._encodeParams(fragment.inputs, values || [])
        ]));
    }
    decodeFunctionData(functionFragment, data) {
        if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
        }
        const bytes2 = arrayify(data);
        if (hexlify(bytes2.slice(0, 4)) !== this.getSighash(functionFragment)) {
            logger$4.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes2));
        }
        return this._decodeParams(functionFragment.inputs, bytes2.slice(4));
    }
    encodeFunctionData(functionFragment, values) {
        if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(concat([
            this.getSighash(functionFragment),
            this._encodeParams(functionFragment.inputs, values || [])
        ]));
    }
    decodeFunctionResult(functionFragment, data) {
        if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
        }
        let bytes2 = arrayify(data);
        let reason = null;
        let message = "";
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch(bytes2.length % this._abiCoder._getWordSize()){
            case 0:
                try {
                    return this._abiCoder.decode(functionFragment.outputs, bytes2);
                } catch (error) {}
                break;
            case 4:
                {
                    const selector = hexlify(bytes2.slice(0, 4));
                    const builtin = BuiltinErrors[selector];
                    if (builtin) {
                        errorArgs = this._abiCoder.decode(builtin.inputs, bytes2.slice(4));
                        errorName = builtin.name;
                        errorSignature = builtin.signature;
                        if (builtin.reason) {
                            reason = errorArgs[0];
                        }
                        if (errorName === "Error") {
                            message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
                        } else if (errorName === "Panic") {
                            message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
                        }
                    } else {
                        try {
                            const error = this.getError(selector);
                            errorArgs = this._abiCoder.decode(error.inputs, bytes2.slice(4));
                            errorName = error.name;
                            errorSignature = error.format();
                        } catch (error) {}
                    }
                    break;
                }
        }
        return logger$4.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
            method: functionFragment.format(),
            data: hexlify(data),
            errorArgs,
            errorName,
            errorSignature,
            reason
        });
    }
    encodeFunctionResult(functionFragment, values) {
        if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
    }
    encodeFilterTopics(eventFragment, values) {
        if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
        }
        if (values.length > eventFragment.inputs.length) {
            logger$4.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
                argument: "values",
                value: values
            });
        }
        let topics = [];
        if (!eventFragment.anonymous) {
            topics.push(this.getEventTopic(eventFragment));
        }
        const encodeTopic = (param, value)=>{
            if (param.type === "string") {
                return id(value);
            } else if (param.type === "bytes") {
                return keccak256(hexlify(value));
            }
            if (param.type === "bool" && typeof value === "boolean") {
                value = value ? "0x01" : "0x00";
            }
            if (param.type.match(/^u?int/)) {
                value = BigNumber.from(value).toHexString();
            }
            if (param.type === "address") {
                this._abiCoder.encode([
                    "address"
                ], [
                    value
                ]);
            }
            return hexZeroPad(hexlify(value), 32);
        };
        values.forEach((value, index)=>{
            let param = eventFragment.inputs[index];
            if (!param.indexed) {
                if (value != null) {
                    logger$4.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
                }
                return;
            }
            if (value == null) {
                topics.push(null);
            } else if (param.baseType === "array" || param.baseType === "tuple") {
                logger$4.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
            } else if (Array.isArray(value)) {
                topics.push(value.map((value2)=>encodeTopic(param, value2)));
            } else {
                topics.push(encodeTopic(param, value));
            }
        });
        while(topics.length && topics[topics.length - 1] === null){
            topics.pop();
        }
        return topics;
    }
    encodeEventLog(eventFragment, values) {
        if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) {
            topics.push(this.getEventTopic(eventFragment));
        }
        if (values.length !== eventFragment.inputs.length) {
            logger$4.throwArgumentError("event arguments/values mismatch", "values", values);
        }
        eventFragment.inputs.forEach((param, index)=>{
            const value = values[index];
            if (param.indexed) {
                if (param.type === "string") {
                    topics.push(id(value));
                } else if (param.type === "bytes") {
                    topics.push(keccak256(value));
                } else if (param.baseType === "tuple" || param.baseType === "array") {
                    throw new Error("not implemented");
                } else {
                    topics.push(this._abiCoder.encode([
                        param.type
                    ], [
                        value
                    ]));
                }
            } else {
                dataTypes.push(param);
                dataValues.push(value);
            }
        });
        return {
            data: this._abiCoder.encode(dataTypes, dataValues),
            topics
        };
    }
    decodeEventLog(eventFragment, data, topics) {
        if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
        }
        if (topics != null && !eventFragment.anonymous) {
            let topicHash = this.getEventTopic(eventFragment);
            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                logger$4.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, {
                    argument: "topics[0]",
                    expected: topicHash,
                    value: topics[0]
                });
            }
            topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index)=>{
            if (param.indexed) {
                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                    indexed.push(ParamType.fromObject({
                        type: "bytes32",
                        name: param.name
                    }));
                    dynamic.push(true);
                } else {
                    indexed.push(param);
                    dynamic.push(false);
                }
            } else {
                nonIndexed.push(param);
                dynamic.push(false);
            }
        });
        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index)=>{
            if (param.indexed) {
                if (resultIndexed == null) {
                    result[index] = new Indexed({
                        _isIndexed: true,
                        hash: null
                    });
                } else if (dynamic[index]) {
                    result[index] = new Indexed({
                        _isIndexed: true,
                        hash: resultIndexed[indexedIndex++]
                    });
                } else {
                    try {
                        result[index] = resultIndexed[indexedIndex++];
                    } catch (error) {
                        result[index] = error;
                    }
                }
            } else {
                try {
                    result[index] = resultNonIndexed[nonIndexedIndex++];
                } catch (error) {
                    result[index] = error;
                }
            }
            if (param.name && result[param.name] == null) {
                const value = result[index];
                if (value instanceof Error) {
                    Object.defineProperty(result, param.name, {
                        enumerable: true,
                        get: ()=>{
                            throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
                        }
                    });
                } else {
                    result[param.name] = value;
                }
            }
        });
        for(let i = 0; i < result.length; i++){
            const value = result[i];
            if (value instanceof Error) {
                Object.defineProperty(result, i, {
                    enumerable: true,
                    get: ()=>{
                        throw wrapAccessError(`index ${i}`, value);
                    }
                });
            }
        }
        return Object.freeze(result);
    }
    parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) {
            return null;
        }
        return new TransactionDescription({
            args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
            functionFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment),
            value: BigNumber.from(tx.value || "0")
        });
    }
    parseLog(log) {
        let fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
            return null;
        }
        return new LogDescription({
            eventFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            topic: this.getEventTopic(fragment),
            args: this.decodeEventLog(fragment, log.data, log.topics)
        });
    }
    parseError(data) {
        const hexData = hexlify(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) {
            return null;
        }
        return new ErrorDescription({
            args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
            errorFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment)
        });
    }
    static isInterface(value) {
        return !!(value && value._isInterface);
    }
}
const version10 = "abstract-provider/5.7.0";
var __awaiter2 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger28 = new Logger(version10);
class ForkEvent extends Description {
    static isForkEvent(value) {
        return !!(value && value._isForkEvent);
    }
}
class Provider {
    constructor(){
        logger28.checkAbstract(new.target, Provider);
        defineReadOnly(this, "_isProvider", true);
    }
    getFeeData() {
        return __awaiter2(this, void 0, void 0, function*() {
            const { block, gasPrice } = yield resolveProperties({
                block: this.getBlock("latest"),
                gasPrice: this.getGasPrice().catch((error)=>{
                    return null;
                })
            });
            let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
            if (block && block.baseFeePerGas) {
                lastBaseFeePerGas = block.baseFeePerGas;
                maxPriorityFeePerGas = BigNumber.from("1500000000");
                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
            }
            return {
                lastBaseFeePerGas,
                maxFeePerGas,
                maxPriorityFeePerGas,
                gasPrice
            };
        });
    }
    addListener(eventName, listener) {
        return this.on(eventName, listener);
    }
    removeListener(eventName, listener) {
        return this.off(eventName, listener);
    }
    static isProvider(value) {
        return !!(value && value._isProvider);
    }
}
const version11 = "abstract-signer/5.7.0";
var __awaiter3 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger29 = new Logger(version11);
const allowedTransactionKeys = [
    "accessList",
    "ccipReadEnabled",
    "chainId",
    "customData",
    "data",
    "from",
    "gasLimit",
    "gasPrice",
    "maxFeePerGas",
    "maxPriorityFeePerGas",
    "nonce",
    "to",
    "type",
    "value"
];
const forwardErrors = [
    Logger.errors.INSUFFICIENT_FUNDS,
    Logger.errors.NONCE_EXPIRED,
    Logger.errors.REPLACEMENT_UNDERPRICED
];
class Signer {
    constructor(){
        logger29.checkAbstract(new.target, Signer);
        defineReadOnly(this, "_isSigner", true);
    }
    getBalance(blockTag) {
        return __awaiter3(this, void 0, void 0, function*() {
            this._checkProvider("getBalance");
            return yield this.provider.getBalance(this.getAddress(), blockTag);
        });
    }
    getTransactionCount(blockTag) {
        return __awaiter3(this, void 0, void 0, function*() {
            this._checkProvider("getTransactionCount");
            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
        });
    }
    estimateGas(transaction) {
        return __awaiter3(this, void 0, void 0, function*() {
            this._checkProvider("estimateGas");
            const tx = yield resolveProperties(this.checkTransaction(transaction));
            return yield this.provider.estimateGas(tx);
        });
    }
    call(transaction, blockTag) {
        return __awaiter3(this, void 0, void 0, function*() {
            this._checkProvider("call");
            const tx = yield resolveProperties(this.checkTransaction(transaction));
            return yield this.provider.call(tx, blockTag);
        });
    }
    sendTransaction(transaction) {
        return __awaiter3(this, void 0, void 0, function*() {
            this._checkProvider("sendTransaction");
            const tx = yield this.populateTransaction(transaction);
            const signedTx = yield this.signTransaction(tx);
            return yield this.provider.sendTransaction(signedTx);
        });
    }
    getChainId() {
        return __awaiter3(this, void 0, void 0, function*() {
            this._checkProvider("getChainId");
            const network = yield this.provider.getNetwork();
            return network.chainId;
        });
    }
    getGasPrice() {
        return __awaiter3(this, void 0, void 0, function*() {
            this._checkProvider("getGasPrice");
            return yield this.provider.getGasPrice();
        });
    }
    getFeeData() {
        return __awaiter3(this, void 0, void 0, function*() {
            this._checkProvider("getFeeData");
            return yield this.provider.getFeeData();
        });
    }
    resolveName(name) {
        return __awaiter3(this, void 0, void 0, function*() {
            this._checkProvider("resolveName");
            return yield this.provider.resolveName(name);
        });
    }
    checkTransaction(transaction) {
        for(const key in transaction){
            if (allowedTransactionKeys.indexOf(key) === -1) {
                logger29.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
            }
        }
        const tx = shallowCopy(transaction);
        if (tx.from == null) {
            tx.from = this.getAddress();
        } else {
            tx.from = Promise.all([
                Promise.resolve(tx.from),
                this.getAddress()
            ]).then((result)=>{
                if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                    logger29.throwArgumentError("from address mismatch", "transaction", transaction);
                }
                return result[0];
            });
        }
        return tx;
    }
    populateTransaction(transaction) {
        return __awaiter3(this, void 0, void 0, function*() {
            const tx = yield resolveProperties(this.checkTransaction(transaction));
            if (tx.to != null) {
                tx.to = Promise.resolve(tx.to).then((to)=>__awaiter3(this, void 0, void 0, function*() {
                        if (to == null) {
                            return null;
                        }
                        const address = yield this.resolveName(to);
                        if (address == null) {
                            logger29.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                        }
                        return address;
                    }));
                tx.to.catch((error)=>{});
            }
            const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                logger29.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
            } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                logger29.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
            }
            if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) {
                tx.type = 2;
            } else if (tx.type === 0 || tx.type === 1) {
                if (tx.gasPrice == null) {
                    tx.gasPrice = this.getGasPrice();
                }
            } else {
                const feeData = yield this.getFeeData();
                if (tx.type == null) {
                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                        tx.type = 2;
                        if (tx.gasPrice != null) {
                            const gasPrice = tx.gasPrice;
                            delete tx.gasPrice;
                            tx.maxFeePerGas = gasPrice;
                            tx.maxPriorityFeePerGas = gasPrice;
                        } else {
                            if (tx.maxFeePerGas == null) {
                                tx.maxFeePerGas = feeData.maxFeePerGas;
                            }
                            if (tx.maxPriorityFeePerGas == null) {
                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                            }
                        }
                    } else if (feeData.gasPrice != null) {
                        if (hasEip1559) {
                            logger29.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "populateTransaction"
                            });
                        }
                        if (tx.gasPrice == null) {
                            tx.gasPrice = feeData.gasPrice;
                        }
                        tx.type = 0;
                    } else {
                        logger29.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "signer.getFeeData"
                        });
                    }
                } else if (tx.type === 2) {
                    if (tx.maxFeePerGas == null) {
                        tx.maxFeePerGas = feeData.maxFeePerGas;
                    }
                    if (tx.maxPriorityFeePerGas == null) {
                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                    }
                }
            }
            if (tx.nonce == null) {
                tx.nonce = this.getTransactionCount("pending");
            }
            if (tx.gasLimit == null) {
                tx.gasLimit = this.estimateGas(tx).catch((error)=>{
                    if (forwardErrors.indexOf(error.code) >= 0) {
                        throw error;
                    }
                    return logger29.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                        error,
                        tx
                    });
                });
            }
            if (tx.chainId == null) {
                tx.chainId = this.getChainId();
            } else {
                tx.chainId = Promise.all([
                    Promise.resolve(tx.chainId),
                    this.getChainId()
                ]).then((results)=>{
                    if (results[1] !== 0 && results[0] !== results[1]) {
                        logger29.throwArgumentError("chainId address mismatch", "transaction", transaction);
                    }
                    return results[0];
                });
            }
            return yield resolveProperties(tx);
        });
    }
    _checkProvider(operation) {
        if (!this.provider) {
            logger29.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: operation || "_checkProvider"
            });
        }
    }
    static isSigner(value) {
        return !!(value && value._isSigner);
    }
}
class VoidSigner extends Signer {
    constructor(address, provider){
        super();
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "provider", provider || null);
    }
    getAddress() {
        return Promise.resolve(this.address);
    }
    _fail(message, operation) {
        return Promise.resolve().then(()=>{
            logger29.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {
                operation
            });
        });
    }
    signMessage(message) {
        return this._fail("VoidSigner cannot sign messages", "signMessage");
    }
    signTransaction(transaction) {
        return this._fail("VoidSigner cannot sign transactions", "signTransaction");
    }
    _signTypedData(domain, types, value) {
        return this._fail("VoidSigner cannot sign typed data", "signTypedData");
    }
    connect(provider) {
        return new VoidSigner(this.address, provider);
    }
}
var minimalisticAssert = assert1;
function assert1(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
assert1.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};
minimalisticAssert.equal;
function createCommonjsModule2(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path, base) {
            return commonjsRequire2(path, base === void 0 || base === null ? module.path : base);
        }
    }, fn(module, module.exports), module.exports;
}
function commonjsRequire2() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var inherits_browser = createCommonjsModule2(function(module) {
    if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
            }
        };
    } else {
        module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function() {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
            }
        };
    }
});
function createCommonjsModule3(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path, base) {
            return commonjsRequire3(path, base === void 0 || base === null ? module.path : base);
        }
    }, fn(module, module.exports), module.exports;
}
function commonjsRequire3() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var inherits_1 = inherits_browser;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 64512) !== 55296) {
        return false;
    }
    if (i < 0 || i + 1 >= msg.length) {
        return false;
    }
    return (msg.charCodeAt(i + 1) & 64512) === 56320;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === "string") {
        if (!enc) {
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) {
                    res[p++] = c;
                } else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else {
        for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    }
    return res;
}
var toArray_1 = toArray;
function toHex1(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
var toHex_1 = toHex1;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
}
var htonl_1 = htonl;
function toHex32(msg, endian) {
    var res = "";
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === "little") w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
var toHex32_1 = toHex32;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
var zero2_1 = zero2;
function zero8(word) {
    if (word.length === 7) return "0" + word;
    else if (word.length === 6) return "00" + word;
    else if (word.length === 5) return "000" + word;
    else if (word.length === 4) return "0000" + word;
    else if (word.length === 3) return "00000" + word;
    else if (word.length === 2) return "000000" + word;
    else if (word.length === 1) return "0000000" + word;
    else return word;
}
var zero8_1 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    minimalisticAssert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
var join32_1 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 255;
            res[k + 2] = m >>> 8 & 255;
            res[k + 3] = m & 255;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 255;
            res[k + 1] = m >>> 8 & 255;
            res[k] = m & 255;
        }
    }
    return res;
}
var split32_1 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
var rotr32_1 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
var rotl32_1 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
var sum32_1 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
var sum32_3_1 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
var sum32_4_1 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
var sum32_5_1 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
var sum64_1 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
var sum64_hi_1 = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
var sum64_lo_1 = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
var sum64_4_hi_1 = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
var sum64_4_lo_1 = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
var sum64_5_hi_1 = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
var sum64_5_lo_1 = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r2 = al << 32 - num | ah >>> num;
    return r2 >>> 0;
}
var rotr64_hi_1 = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
}
var rotr64_lo_1 = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
var shr64_hi_1 = shr64_hi;
function shr64_lo(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
}
var shr64_lo_1 = shr64_lo;
var utils = {
    inherits: inherits_1,
    toArray: toArray_1,
    toHex: toHex_1,
    htonl: htonl_1,
    toHex32: toHex32_1,
    zero2: zero2_1,
    zero8: zero8_1,
    join32: join32_1,
    split32: split32_1,
    rotr32: rotr32_1,
    rotl32: rotl32_1,
    sum32: sum32_1,
    sum32_3: sum32_3_1,
    sum32_4: sum32_4_1,
    sum32_5: sum32_5_1,
    sum64: sum64_1,
    sum64_hi: sum64_hi_1,
    sum64_lo: sum64_lo_1,
    sum64_4_hi: sum64_4_hi_1,
    sum64_4_lo: sum64_4_lo_1,
    sum64_5_hi: sum64_5_hi_1,
    sum64_5_lo: sum64_5_lo_1,
    rotr64_hi: rotr64_hi_1,
    rotr64_lo: rotr64_lo_1,
    shr64_hi: shr64_hi_1,
    shr64_lo: shr64_lo_1
};
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
var BlockHash_1 = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r2 = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r2, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r2, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    minimalisticAssert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for(var i = 1; i < k; i++)res[i] = 0;
    len <<= 3;
    if (this.endian === "big") {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
    } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};
var common = {
    BlockHash: BlockHash_1
};
var rotr32$1 = utils.rotr32;
function ft_1(s2, x, y, z) {
    if (s2 === 0) return ch32(x, y, z);
    if (s2 === 1 || s2 === 3) return p32(x, y, z);
    if (s2 === 2) return maj32(x, y, z);
}
var ft_1_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
var ch32_1 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
var maj32_1 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
var p32_1 = p32;
function s0_256(x) {
    return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
}
var s0_256_1 = s0_256;
function s1_256(x) {
    return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
}
var s1_256_1 = s1_256;
function g0_256(x) {
    return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ x >>> 3;
}
var g0_256_1 = g0_256;
function g1_256(x) {
    return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ x >>> 10;
}
var g1_256_1 = g1_256;
var common$1 = {
    ft_1: ft_1_1,
    ch32: ch32_1,
    maj32: maj32_1,
    p32: p32_1,
    s0_256: s0_256_1,
    s1_256: s1_256_1,
    g0_256: g0_256_1,
    g1_256: g1_256_1
};
var rotl32$1 = utils.rotl32;
var sum32$1 = utils.sum32;
var sum32_5$1 = utils.sum32_5;
var ft_1$1 = common$1.ft_1;
var BlockHash$1 = common.BlockHash;
var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash$1.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash$1);
var _1 = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s2 = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s2, b, c, d), e, W[i], sha1_K[s2]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
};
SHA1.prototype._digest = function digest2(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};
var sum32$2 = utils.sum32;
var sum32_4$1 = utils.sum32_4;
var sum32_5$2 = utils.sum32_5;
var ch32$1 = common$1.ch32;
var maj32$1 = common$1.maj32;
var s0_256$1 = common$1.s0_256;
var s1_256$1 = common$1.s1_256;
var g0_256$1 = common$1.g0_256;
var g1_256$1 = common$1.g1_256;
var BlockHash$2 = common.BlockHash;
var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash$2.call(this);
    this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash$2);
var _256 = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update2(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f2 = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    minimalisticAssert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f2, g), this.k[i], W[i]);
        var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));
        h = g;
        g = f2;
        f2 = e;
        e = sum32$2(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$2(T1, T2);
    }
    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
    this.h[5] = sum32$2(this.h[5], f2);
    this.h[6] = sum32$2(this.h[6], g);
    this.h[7] = sum32$2(this.h[7], h);
};
SHA256.prototype._digest = function digest3(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    _256.call(this);
    this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
    ];
}
utils.inherits(SHA224, _256);
var _224 = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest4(enc) {
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
    else return utils.split32(this.h.slice(0, 7), "big");
};
var rotr64_hi$1 = utils.rotr64_hi;
var rotr64_lo$1 = utils.rotr64_lo;
var shr64_hi$1 = utils.shr64_hi;
var shr64_lo$1 = utils.shr64_lo;
var sum64$1 = utils.sum64;
var sum64_hi$1 = utils.sum64_hi;
var sum64_lo$1 = utils.sum64_lo;
var sum64_4_hi$1 = utils.sum64_4_hi;
var sum64_4_lo$1 = utils.sum64_4_lo;
var sum64_5_hi$1 = utils.sum64_5_hi;
var sum64_5_lo$1 = utils.sum64_5_lo;
var BlockHash$3 = common.BlockHash;
var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash$3.call(this);
    this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash$3);
var _512 = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update3(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    minimalisticAssert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
        el = sum64_lo$1(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64$1(this.h, 0, ah, al);
    sum64$1(this.h, 2, bh, bl);
    sum64$1(this.h, 4, ch, cl);
    sum64$1(this.h, 6, dh, dl);
    sum64$1(this.h, 8, eh, el);
    sum64$1(this.h, 10, fh, fl);
    sum64$1(this.h, 12, gh, gl);
    sum64$1(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest5(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ ~xh & zh;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ ~xl & zl;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ xh & zh ^ yh & zh;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ xl & zl ^ yl & zl;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 28);
    var c1_hi = rotr64_hi$1(xl, xh, 2);
    var c2_hi = rotr64_hi$1(xl, xh, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 28);
    var c1_lo = rotr64_lo$1(xl, xh, 2);
    var c2_lo = rotr64_lo$1(xl, xh, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 14);
    var c1_hi = rotr64_hi$1(xh, xl, 18);
    var c2_hi = rotr64_hi$1(xl, xh, 9);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 14);
    var c1_lo = rotr64_lo$1(xh, xl, 18);
    var c2_lo = rotr64_lo$1(xl, xh, 9);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 1);
    var c1_hi = rotr64_hi$1(xh, xl, 8);
    var c2_hi = shr64_hi$1(xh, xl, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 1);
    var c1_lo = rotr64_lo$1(xh, xl, 8);
    var c2_lo = shr64_lo$1(xh, xl, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 19);
    var c1_hi = rotr64_hi$1(xl, xh, 29);
    var c2_hi = shr64_hi$1(xh, xl, 6);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 19);
    var c1_lo = rotr64_lo$1(xl, xh, 29);
    var c2_lo = shr64_lo$1(xh, xl, 6);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0) r2 += 4294967296;
    return r2;
}
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    _512.call(this);
    this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
    ];
}
utils.inherits(SHA384, _512);
var _384 = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest6(enc) {
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
    else return utils.split32(this.h.slice(0, 12), "big");
};
var sha1 = _1;
var sha224 = _224;
var sha256 = _256;
var sha384 = _384;
var sha512 = _512;
var sha = {
    sha1,
    sha224,
    sha256,
    sha384,
    sha512
};
var rotl32$2 = utils.rotl32;
var sum32$3 = utils.sum32;
var sum32_3$1 = utils.sum32_3;
var sum32_4$2 = utils.sum32_4;
var BlockHash$4 = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash$4.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.endian = "little";
}
utils.inherits(RIPEMD160, BlockHash$4);
var ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update2(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32$3(rotl32$2(sum32_4$2(A, f(j, B, C, D), msg[r1[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32$2(C, 10);
        C = B;
        B = T;
        T = sum32$3(rotl32$2(sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32$2(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3$1(this.h[1], C, Dh);
    this.h[1] = sum32_3$1(this.h[2], D, Eh);
    this.h[2] = sum32_3$1(this.h[3], E, Ah);
    this.h[3] = sum32_3$1(this.h[4], A, Bh);
    this.h[4] = sum32_3$1(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest7(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "little");
    else return utils.split32(this.h, "little");
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0;
    else if (j <= 31) return 1518500249;
    else if (j <= 47) return 1859775393;
    else if (j <= 63) return 2400959708;
    else return 2840853838;
}
function Kh(j) {
    if (j <= 15) return 1352829926;
    else if (j <= 31) return 1548603684;
    else if (j <= 47) return 1836072691;
    else if (j <= 63) return 2053994217;
    else return 0;
}
var r1 = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var ripemd = {
    ripemd160
};
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
var hmac = Hmac;
Hmac.prototype._init = function init(key) {
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    minimalisticAssert(key.length <= this.blockSize);
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 54;
    this.inner = new this.Hash().update(key);
    for(i = 0; i < key.length; i++)key[i] ^= 106;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update3(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest8(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};
var hash_1 = createCommonjsModule3(function(module, exports) {
    var hash = exports;
    hash.utils = utils;
    hash.common = common;
    hash.sha = sha;
    hash.ripemd = ripemd;
    hash.hmac = hmac;
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
});
function createCommonjsModule4(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path, base2) {
            return commonjsRequire4(path, base2 === void 0 || base2 === null ? module.path : base2);
        }
    }, fn(module, module.exports), module.exports;
}
function commonjsRequire4() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var minimalisticAssert1 = assert2;
function assert2(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
assert2.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};
var utils_1 = createCommonjsModule4(function(module, exports) {
    var utils = exports;
    function toArray(msg, enc) {
        if (Array.isArray(msg)) return msg.slice();
        if (!msg) return [];
        var res = [];
        if (typeof msg !== "string") {
            for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
            return res;
        }
        if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        } else {
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                var hi = c >> 8;
                var lo = c & 255;
                if (hi) res.push(hi, lo);
                else res.push(lo);
            }
        }
        return res;
    }
    utils.toArray = toArray;
    function zero2(word) {
        if (word.length === 1) return "0" + word;
        else return word;
    }
    utils.zero2 = zero2;
    function toHex(msg) {
        var res = "";
        for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
        return res;
    }
    utils.toHex = toHex;
    utils.encode = function encode2(arr, enc) {
        if (enc === "hex") return toHex(arr);
        else return arr;
    };
});
var utils_1$1 = createCommonjsModule4(function(module, exports) {
    var utils = exports;
    utils.assert = minimalisticAssert1;
    utils.toArray = utils_1.toArray;
    utils.zero2 = utils_1.zero2;
    utils.toHex = utils_1.toHex;
    utils.encode = utils_1.encode;
    function getNAF2(num, w, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        naf.fill(0);
        var ws = 1 << w + 1;
        var k = num.clone();
        for(var i = 0; i < naf.length; i++){
            var z;
            var mod = k.andln(ws - 1);
            if (k.isOdd()) {
                if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
                else z = mod;
                k.isubn(z);
            } else {
                z = 0;
            }
            naf[i] = z;
            k.iushrn(1);
        }
        return naf;
    }
    utils.getNAF = getNAF2;
    function getJSF2(k1, k2) {
        var jsf = [
            [],
            []
        ];
        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        var m8;
        while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
            var m14 = k1.andln(3) + d1 & 3;
            var m24 = k2.andln(3) + d2 & 3;
            if (m14 === 3) m14 = -1;
            if (m24 === 3) m24 = -1;
            var u1;
            if ((m14 & 1) === 0) {
                u1 = 0;
            } else {
                m8 = k1.andln(7) + d1 & 7;
                if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
                else u1 = m14;
            }
            jsf[0].push(u1);
            var u2;
            if ((m24 & 1) === 0) {
                u2 = 0;
            } else {
                m8 = k2.andln(7) + d2 & 7;
                if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
                else u2 = m24;
            }
            jsf[1].push(u2);
            if (2 * d1 === u1 + 1) d1 = 1 - d1;
            if (2 * d2 === u2 + 1) d2 = 1 - d2;
            k1.iushrn(1);
            k2.iushrn(1);
        }
        return jsf;
    }
    utils.getJSF = getJSF2;
    function cachedProperty(obj, name, computer) {
        var key2 = "_" + name;
        obj.prototype[name] = function cachedProperty2() {
            return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
        };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes2) {
        return typeof bytes2 === "string" ? utils.toArray(bytes2, "hex") : bytes2;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes2) {
        return new bn(bytes2, "hex", "le");
    }
    utils.intFromLE = intFromLE;
});
var getNAF = utils_1$1.getNAF;
var getJSF = utils_1$1.getJSF;
var assert$1 = utils_1$1.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new bn(conf.p, 16);
    this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);
    this.zero = new bn(0).toRed(this.red);
    this.one = new bn(1).toRed(this.red);
    this.two = new bn(2).toRed(this.red);
    this.n = conf.n && new bn(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
    } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
var base = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$1(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert$1(z !== 0);
        if (p.type === "affine") {
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
            if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
            else acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
    }
    return p.type === "affine" ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            null,
            null,
            points[b]
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            -1,
            -5,
            -7,
            0,
            7,
            5,
            1,
            3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
};
BasePoint.prototype.validate = function validate2() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes2, enc) {
    bytes2 = utils_1$1.toArray(bytes2, enc);
    var len = this.p.byteLength();
    if ((bytes2[0] === 4 || bytes2[0] === 6 || bytes2[0] === 7) && bytes2.length - 1 === 2 * len) {
        if (bytes2[0] === 6) assert$1(bytes2[bytes2.length - 1] % 2 === 0);
        else if (bytes2[0] === 7) assert$1(bytes2[bytes2.length - 1] % 2 === 1);
        var res = this.point(bytes2.slice(1, 1 + len), bytes2.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes2[0] === 2 || bytes2[0] === 3) && bytes2.length - 1 === len) {
        return this.pointFromX(bytes2.slice(1, 1 + len), bytes2[0] === 3);
    }
    throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact) return [
        this.getY().isEven() ? 2 : 3
    ].concat(x);
    return [
        4
    ].concat(x, this.getY().toArray("be", len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils_1$1.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl3 = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl3);
    return {
        wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};
var inherits_browser1 = createCommonjsModule4(function(module) {
    if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
            }
        };
    } else {
        module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function() {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
            }
        };
    }
});
var assert$2 = utils_1$1.assert;
function ShortCurve(conf) {
    base.call(this, "short", conf);
    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits_browser1(ShortCurve, base);
var short_1 = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    var beta;
    var lambda;
    if (conf.beta) {
        beta = new bn(conf.beta, 16).toRed(this.red);
    } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
        lambda = new bn(conf.lambda, 16);
    } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
        } else {
            lambda = lambdas[1];
            assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    var basis;
    if (conf.basis) {
        basis = conf.basis.map(function(vec) {
            return {
                a: new bn(vec.a, 16),
                b: new bn(vec.b, 16)
            };
        });
    } else {
        basis = this._getEndoBasis(lambda);
    }
    return {
        beta,
        lambda,
        basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : bn.mont(num);
    var tinv = new bn(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u = lambda;
    var v = this.n.clone();
    var x1 = new bn(1);
    var y1 = new bn(0);
    var x2 = new bn(0);
    var y2 = new bn(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) {
            break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1,
        k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate3(point3) {
    if (point3.inf) return true;
    var x = point3.x;
    var y = point3.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    base.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits_browser1(Point, base.BasePoint);
ShortCurve.prototype.point = function point2(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta2() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string") obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;
    function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    if (this.inf) return p;
    if (p.inf) return this;
    if (this.eq(p)) return this.dbl();
    if (this.neg().eq(p)) return this.curve.point(null, null);
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new bn(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq2(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    base.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new bn(0);
    } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        this.z = new bn(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits_browser1(JPoint, base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg2() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add2(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    if (this.isInfinity()) return p.toJ();
    if (p.isInfinity()) return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp2(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl2() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
    } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
    } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m = xx.redAdd(xx).redIAdd(xx);
    var mm = m.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul2(k, kbase) {
    k = new bn(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq3(p) {
    if (p.type === "affine") return this.eq(p.toJ());
    if (this === p) return true;
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect2() {
    if (this.isInfinity()) return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function isInfinity2() {
    return this.z.cmpn(0) === 0;
};
var curve_1 = createCommonjsModule4(function(module, exports) {
    var curve = exports;
    curve.base = base;
    curve.short = short_1;
    curve.mont = null;
    curve.edwards = null;
});
var curves_1 = createCommonjsModule4(function(module, exports) {
    var curves = exports;
    var assert2 = utils_1$1.assert;
    function PresetCurve(options) {
        if (options.type === "short") this.curve = new curve_1.short(options);
        else if (options.type === "edwards") this.curve = new curve_1.edwards(options);
        else this.curve = new curve_1.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert2(this.g.validate(), "Invalid curve");
        assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
        Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            get: function() {
                var curve = new PresetCurve(options);
                Object.defineProperty(curves, name, {
                    configurable: true,
                    enumerable: true,
                    value: curve
                });
                return curve;
            }
        });
    }
    defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: hash_1.sha256,
        gRed: false,
        g: [
            "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
            "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
    });
    defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: hash_1.sha256,
        gRed: false,
        g: [
            "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
            "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
    });
    defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: hash_1.sha256,
        gRed: false,
        g: [
            "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
            "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
    });
    defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: hash_1.sha384,
        gRed: false,
        g: [
            "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
            "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
    });
    defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: hash_1.sha512,
        gRed: false,
        g: [
            "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
            "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
    });
    defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash_1.sha256,
        gRed: false,
        g: [
            "9"
        ]
    });
    defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash_1.sha256,
        gRed: false,
        g: [
            "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
            "6666666666666666666666666666666666666666666666666666666666666658"
        ]
    });
    var pre;
    try {
        pre = null.crash();
    } catch (e) {
        pre = void 0;
    }
    defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: hash_1.sha256,
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
            {
                a: "3086d221a7d46bcde86c90e49284eb15",
                b: "-e4437ed6010e88286f547fa90abfe4c3"
            },
            {
                a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                b: "3086d221a7d46bcde86c90e49284eb15"
            }
        ],
        gRed: false,
        g: [
            "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            pre
        ]
    });
});
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
    minimalisticAssert1(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
}
var hmacDrbg = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0;
        this.V[i] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
};
HmacDRBG.prototype._hmac = function hmac() {
    return new hash_1.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        1
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
    if (typeof entropyEnc !== "string") {
        addEnc = add3;
        add3 = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils_1.toArray(entropy, entropyEnc);
    add3 = utils_1.toArray(add3, addEnc);
    minimalisticAssert1(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add3 || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
    if (typeof enc !== "string") {
        addEnc = add3;
        add3 = enc;
        enc = null;
    }
    if (add3) {
        add3 = utils_1.toArray(add3, addEnc || "hex");
        this._update(add3);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add3);
    this._reseed++;
    return utils_1.encode(res, enc);
};
var assert$3 = utils_1$1.assert;
function KeyPair(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
var key = KeyPair;
KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec2, {
        pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec2, {
        priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate4() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
    };
    if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === "string") {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex") return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new bn(key2, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
    if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
            assert$3(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
            assert$3(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key2, enc);
};
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
        assert$3(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
};
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature2) {
    return this.ec.verify(msg, signature2, this);
};
KeyPair.prototype.inspect = function inspect3() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};
var assert$4 = utils_1$1.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert$4(options.r && options.s, "Signature without r or s");
    this.r = new bn(options.r, 16);
    this.s = new bn(options.s, 16);
    if (options.recoveryParam === void 0) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
var signature = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) {
        return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
        return false;
    }
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    if (val <= 127) {
        return false;
    }
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 128) && i < len){
        i++;
    }
    if (i === 0) {
        return buf;
    }
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils_1$1.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 48) {
        return false;
    }
    var len = getLength(data, p);
    if (len === false) {
        return false;
    }
    if (len + p.place !== data.length) {
        return false;
    }
    if (data[p.place++] !== 2) {
        return false;
    }
    var rlen = getLength(data, p);
    if (rlen === false) {
        return false;
    }
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 2) {
        return false;
    }
    var slen = getLength(data, p);
    if (slen === false) {
        return false;
    }
    if (data.length !== slen + p.place) {
        return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 128) {
            r = r.slice(1);
        } else {
            return false;
        }
    }
    if (s[0] === 0) {
        if (s[1] & 128) {
            s = s.slice(1);
        } else {
            return false;
        }
    }
    this.r = new bn(r);
    this.s = new bn(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 128) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while(--octets){
        arr.push(len >>> (octets << 3) & 255);
    }
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    if (r[0] & 128) r = [
        0
    ].concat(r);
    if (s[0] & 128) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 128)){
        s = s.slice(1);
    }
    var arr = [
        2
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(2);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        48
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils_1$1.encode(res, enc);
};
var rand = function() {
    throw new Error("unsupported");
};
var assert$5 = utils_1$1.assert;
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    if (typeof options === "string") {
        assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), "Unknown curve " + options);
        options = curves_1[options];
    }
    if (options instanceof curves_1.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
}
var ec = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new key(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
    });
    var bytes2 = this.n.byteLength();
    var ns2 = this.n.sub(new bn(2));
    for(;;){
        var priv = new bn(drbg.generate(bytes2));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign2(msg, key2, enc, options) {
    if (typeof enc === "object") {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key2 = this.keyFromPrivate(key2, enc);
    msg = this._truncateToN(new bn(msg, 16));
    var bytes2 = this.n.byteLength();
    var bkey = key2.getPrivate().toArray("be", bytes2);
    var nonce = msg.toArray("be", bytes2);
    var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
    });
    var ns1 = this.n.sub(new bn(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new bn(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key2.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new signature({
            r,
            s,
            recoveryParam
        });
    }
};
EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
    msg = this._truncateToN(new bn(msg, 16));
    key2 = this.keyFromPublic(key2, enc);
    signature$1 = new signature(signature$1, "hex");
    var r = signature$1.r;
    var s = signature$1.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key2.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    p = this.g.jmulAdd(u1, key2.getPublic(), u2);
    if (p.isInfinity()) return false;
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
    assert$5((3 & j) === j, "The recovery param is more than two bits");
    signature$1 = new signature(signature$1, enc);
    var n = this.n;
    var e = new bn(msg);
    var r = signature$1.r;
    var s = signature$1.s;
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature$1.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
    signature$1 = new signature(signature$1, enc);
    if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature$1, i);
        } catch (e2) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error("Unable to find valid recovery factor");
};
var elliptic_1 = createCommonjsModule4(function(module, exports) {
    var elliptic = exports;
    elliptic.version = ({
        version: "6.5.4"
    }).version;
    elliptic.utils = utils_1$1;
    elliptic.rand = function() {
        throw new Error("unsupported");
    };
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;
    elliptic.ec = ec;
    elliptic.eddsa = null;
});
var EC$1 = elliptic_1.ec;
const version12 = "signing-key/5.7.0";
const logger210 = new Logger(version12);
let _curve = null;
function getCurve() {
    if (!_curve) {
        _curve = new EC$1("secp256k1");
    }
    return _curve;
}
class SigningKey {
    constructor(privateKey){
        defineReadOnly(this, "curve", "secp256k1");
        defineReadOnly(this, "privateKey", hexlify(privateKey));
        if (hexDataLength(this.privateKey) !== 32) {
            logger210.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
        }
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
        defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
        defineReadOnly(this, "_isSigningKey", true);
    }
    _addPoint(other) {
        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
        const p1 = getCurve().keyFromPublic(arrayify(other));
        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    }
    signDigest(digest) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const digestBytes = arrayify(digest);
        if (digestBytes.length !== 32) {
            logger210.throwArgumentError("bad digest length", "digest", digest);
        }
        const signature2 = keyPair2.sign(digestBytes, {
            canonical: true
        });
        return splitSignature({
            recoveryParam: signature2.recoveryParam,
            r: hexZeroPad("0x" + signature2.r.toString(16), 32),
            s: hexZeroPad("0x" + signature2.s.toString(16), 32)
        });
    }
    computeSharedSecret(otherKey) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
        return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
    }
    static isSigningKey(value) {
        return !!(value && value._isSigningKey);
    }
}
function recoverPublicKey(digest, signature2) {
    const sig = splitSignature(signature2);
    const rs = {
        r: arrayify(sig.r),
        s: arrayify(sig.s)
    };
    return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key2, compressed) {
    const bytes2 = arrayify(key2);
    if (bytes2.length === 32) {
        const signingKey = new SigningKey(bytes2);
        if (compressed) {
            return "0x" + getCurve().keyFromPrivate(bytes2).getPublic(true, "hex");
        }
        return signingKey.publicKey;
    } else if (bytes2.length === 33) {
        if (compressed) {
            return hexlify(bytes2);
        }
        return "0x" + getCurve().keyFromPublic(bytes2).getPublic(false, "hex");
    } else if (bytes2.length === 65) {
        if (!compressed) {
            return hexlify(bytes2);
        }
        return "0x" + getCurve().keyFromPublic(bytes2).getPublic(true, "hex");
    }
    return logger210.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
const version13 = "transactions/5.7.0";
const logger211 = new Logger(version13);
var TransactionTypes;
(function(TransactionTypes2) {
    TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
    TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
    TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
})(TransactionTypes || (TransactionTypes = {}));
function handleAddress(value) {
    if (value === "0x") {
        return null;
    }
    return getAddress(value);
}
function handleNumber(value) {
    if (value === "0x") {
        return Zero1;
    }
    return BigNumber.from(value);
}
const transactionFields = [
    {
        name: "nonce",
        maxLength: 32,
        numeric: true
    },
    {
        name: "gasPrice",
        maxLength: 32,
        numeric: true
    },
    {
        name: "gasLimit",
        maxLength: 32,
        numeric: true
    },
    {
        name: "to",
        length: 20
    },
    {
        name: "value",
        maxLength: 32,
        numeric: true
    },
    {
        name: "data"
    }
];
const allowedTransactionKeys1 = {
    chainId: true,
    data: true,
    gasLimit: true,
    gasPrice: true,
    nonce: true,
    to: true,
    type: true,
    value: true
};
function computeAddress(key) {
    const publicKey = computePublicKey(key);
    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest, signature) {
    return computeAddress(recoverPublicKey(arrayify(digest), signature));
}
function formatNumber(value, name) {
    const result = stripZeros(BigNumber.from(value).toHexString());
    if (result.length > 32) {
        logger211.throwArgumentError("invalid length for " + name, "transaction:" + name, value);
    }
    return result;
}
function accessSetify(addr, storageKeys) {
    return {
        address: getAddress(addr),
        storageKeys: (storageKeys || []).map((storageKey, index)=>{
            if (hexDataLength(storageKey) !== 32) {
                logger211.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
            }
            return storageKey.toLowerCase();
        })
    };
}
function accessListify(value) {
    if (Array.isArray(value)) {
        return value.map((set, index)=>{
            if (Array.isArray(set)) {
                if (set.length > 2) {
                    logger211.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
                }
                return accessSetify(set[0], set[1]);
            }
            return accessSetify(set.address, set.storageKeys);
        });
    }
    const result = Object.keys(value).map((addr)=>{
        const storageKeys = value[addr].reduce((accum, storageKey)=>{
            accum[storageKey] = true;
            return accum;
        }, {});
        return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b)=>a.address.localeCompare(b.address));
    return result;
}
function formatAccessList(value) {
    return accessListify(value).map((set)=>[
            set.address,
            set.storageKeys
        ]);
}
function _serializeEip1559(transaction, signature) {
    if (transaction.gasPrice != null) {
        const gasPrice = BigNumber.from(transaction.gasPrice);
        const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
        if (!gasPrice.eq(maxFeePerGas)) {
            logger211.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                gasPrice,
                maxFeePerGas
            });
        }
    }
    const fields = [
        formatNumber(transaction.chainId || 0, "chainId"),
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        transaction.to != null ? getAddress(transaction.to) : "0x",
        formatNumber(transaction.value || 0, "value"),
        transaction.data || "0x",
        formatAccessList(transaction.accessList || [])
    ];
    if (signature) {
        const sig = splitSignature(signature);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push(stripZeros(sig.r));
        fields.push(stripZeros(sig.s));
    }
    return hexConcat([
        "0x02",
        encode(fields)
    ]);
}
function _serializeEip2930(transaction, signature) {
    const fields = [
        formatNumber(transaction.chainId || 0, "chainId"),
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(transaction.gasPrice || 0, "gasPrice"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        transaction.to != null ? getAddress(transaction.to) : "0x",
        formatNumber(transaction.value || 0, "value"),
        transaction.data || "0x",
        formatAccessList(transaction.accessList || [])
    ];
    if (signature) {
        const sig = splitSignature(signature);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push(stripZeros(sig.r));
        fields.push(stripZeros(sig.s));
    }
    return hexConcat([
        "0x01",
        encode(fields)
    ]);
}
function _serialize(transaction, signature) {
    checkProperties(transaction, allowedTransactionKeys1);
    const raw = [];
    transactionFields.forEach(function(fieldInfo) {
        let value = transaction[fieldInfo.name] || [];
        const options = {};
        if (fieldInfo.numeric) {
            options.hexPad = "left";
        }
        value = arrayify(hexlify(value, options));
        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
            logger211.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
        }
        if (fieldInfo.maxLength) {
            value = stripZeros(value);
            if (value.length > fieldInfo.maxLength) {
                logger211.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
            }
        }
        raw.push(hexlify(value));
    });
    let chainId = 0;
    if (transaction.chainId != null) {
        chainId = transaction.chainId;
        if (typeof chainId !== "number") {
            logger211.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
        }
    } else if (signature && !isBytesLike(signature) && signature.v > 28) {
        chainId = Math.floor((signature.v - 35) / 2);
    }
    if (chainId !== 0) {
        raw.push(hexlify(chainId));
        raw.push("0x");
        raw.push("0x");
    }
    if (!signature) {
        return encode(raw);
    }
    const sig = splitSignature(signature);
    let v = 27 + sig.recoveryParam;
    if (chainId !== 0) {
        raw.pop();
        raw.pop();
        raw.pop();
        v += chainId * 2 + 8;
        if (sig.v > 28 && sig.v !== v) {
            logger211.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
    } else if (sig.v !== v) {
        logger211.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
    }
    raw.push(hexlify(v));
    raw.push(stripZeros(arrayify(sig.r)));
    raw.push(stripZeros(arrayify(sig.s)));
    return encode(raw);
}
function serialize(transaction, signature) {
    if (transaction.type == null || transaction.type === 0) {
        if (transaction.accessList != null) {
            logger211.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
        }
        return _serialize(transaction, signature);
    }
    switch(transaction.type){
        case 1:
            return _serializeEip2930(transaction, signature);
        case 2:
            return _serializeEip1559(transaction, signature);
    }
    return logger211.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "serializeTransaction",
        transactionType: transaction.type
    });
}
function _parseEipSignature(tx, fields, serialize2) {
    try {
        const recid = handleNumber(fields[0]).toNumber();
        if (recid !== 0 && recid !== 1) {
            throw new Error("bad recid");
        }
        tx.v = recid;
    } catch (error) {
        logger211.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
    }
    tx.r = hexZeroPad(fields[1], 32);
    tx.s = hexZeroPad(fields[2], 32);
    try {
        const digest = keccak256(serialize2(tx));
        tx.from = recoverAddress(digest, {
            r: tx.r,
            s: tx.s,
            recoveryParam: tx.v
        });
    } catch (error) {}
}
function _parseEip1559(payload) {
    const transaction = decode1(payload.slice(1));
    if (transaction.length !== 9 && transaction.length !== 12) {
        logger211.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
    }
    const maxPriorityFeePerGas = handleNumber(transaction[2]);
    const maxFeePerGas = handleNumber(transaction[3]);
    const tx = {
        type: 2,
        chainId: handleNumber(transaction[0]).toNumber(),
        nonce: handleNumber(transaction[1]).toNumber(),
        maxPriorityFeePerGas,
        maxFeePerGas,
        gasPrice: null,
        gasLimit: handleNumber(transaction[4]),
        to: handleAddress(transaction[5]),
        value: handleNumber(transaction[6]),
        data: transaction[7],
        accessList: accessListify(transaction[8])
    };
    if (transaction.length === 9) {
        return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
    return tx;
}
function _parseEip2930(payload) {
    const transaction = decode1(payload.slice(1));
    if (transaction.length !== 8 && transaction.length !== 11) {
        logger211.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
    }
    const tx = {
        type: 1,
        chainId: handleNumber(transaction[0]).toNumber(),
        nonce: handleNumber(transaction[1]).toNumber(),
        gasPrice: handleNumber(transaction[2]),
        gasLimit: handleNumber(transaction[3]),
        to: handleAddress(transaction[4]),
        value: handleNumber(transaction[5]),
        data: transaction[6],
        accessList: accessListify(transaction[7])
    };
    if (transaction.length === 8) {
        return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
    return tx;
}
function _parse(rawTransaction) {
    const transaction = decode1(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) {
        logger211.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
    }
    const tx = {
        nonce: handleNumber(transaction[0]).toNumber(),
        gasPrice: handleNumber(transaction[1]),
        gasLimit: handleNumber(transaction[2]),
        to: handleAddress(transaction[3]),
        value: handleNumber(transaction[4]),
        data: transaction[5],
        chainId: 0
    };
    if (transaction.length === 6) {
        return tx;
    }
    try {
        tx.v = BigNumber.from(transaction[6]).toNumber();
    } catch (error) {
        return tx;
    }
    tx.r = hexZeroPad(transaction[7], 32);
    tx.s = hexZeroPad(transaction[8], 32);
    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
        tx.chainId = tx.v;
        tx.v = 0;
    } else {
        tx.chainId = Math.floor((tx.v - 35) / 2);
        if (tx.chainId < 0) {
            tx.chainId = 0;
        }
        let recoveryParam = tx.v - 27;
        const raw = transaction.slice(0, 6);
        if (tx.chainId !== 0) {
            raw.push(hexlify(tx.chainId));
            raw.push("0x");
            raw.push("0x");
            recoveryParam -= tx.chainId * 2 + 8;
        }
        const digest = keccak256(encode(raw));
        try {
            tx.from = recoverAddress(digest, {
                r: hexlify(tx.r),
                s: hexlify(tx.s),
                recoveryParam
            });
        } catch (error) {}
        tx.hash = keccak256(rawTransaction);
    }
    tx.type = null;
    return tx;
}
function parse(rawTransaction) {
    const payload = arrayify(rawTransaction);
    if (payload[0] > 127) {
        return _parse(payload);
    }
    switch(payload[0]){
        case 1:
            return _parseEip2930(payload);
        case 2:
            return _parseEip1559(payload);
    }
    return logger211.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "parseTransaction",
        transactionType: payload[0]
    });
}
const version14 = "contracts/5.7.0";
var __awaiter4 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger212 = new Logger(version14);
const allowedTransactionKeys2 = {
    chainId: true,
    data: true,
    from: true,
    gasLimit: true,
    gasPrice: true,
    nonce: true,
    to: true,
    value: true,
    type: true,
    accessList: true,
    maxFeePerGas: true,
    maxPriorityFeePerGas: true,
    customData: true,
    ccipReadEnabled: true
};
function resolveName(resolver, nameOrPromise) {
    return __awaiter4(this, void 0, void 0, function*() {
        const name = yield nameOrPromise;
        if (typeof name !== "string") {
            logger212.throwArgumentError("invalid address or ENS name", "name", name);
        }
        try {
            return getAddress(name);
        } catch (error) {}
        if (!resolver) {
            logger212.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resolveName"
            });
        }
        const address2 = yield resolver.resolveName(name);
        if (address2 == null) {
            logger212.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
        }
        return address2;
    });
}
function resolveAddresses(resolver, value, paramType) {
    return __awaiter4(this, void 0, void 0, function*() {
        if (Array.isArray(paramType)) {
            return yield Promise.all(paramType.map((paramType2, index)=>{
                return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType2.name], paramType2);
            }));
        }
        if (paramType.type === "address") {
            return yield resolveName(resolver, value);
        }
        if (paramType.type === "tuple") {
            return yield resolveAddresses(resolver, value, paramType.components);
        }
        if (paramType.baseType === "array") {
            if (!Array.isArray(value)) {
                return Promise.reject(logger212.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
                    argument: "value",
                    value
                }));
            }
            return yield Promise.all(value.map((v)=>resolveAddresses(resolver, v, paramType.arrayChildren)));
        }
        return value;
    });
}
function populateTransaction(contract, fragment, args) {
    return __awaiter4(this, void 0, void 0, function*() {
        let overrides = {};
        if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
            overrides = shallowCopy(args.pop());
        }
        logger212.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
        if (contract.signer) {
            if (overrides.from) {
                overrides.from = resolveProperties({
                    override: resolveName(contract.signer, overrides.from),
                    signer: contract.signer.getAddress()
                }).then((check)=>__awaiter4(this, void 0, void 0, function*() {
                        if (getAddress(check.signer) !== check.override) {
                            logger212.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides.from"
                            });
                        }
                        return check.override;
                    }));
            } else {
                overrides.from = contract.signer.getAddress();
            }
        } else if (overrides.from) {
            overrides.from = resolveName(contract.provider, overrides.from);
        }
        const resolved = yield resolveProperties({
            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
            address: contract.resolvedAddress,
            overrides: resolveProperties(overrides) || {}
        });
        const data = contract.interface.encodeFunctionData(fragment, resolved.args);
        const tx = {
            data,
            to: resolved.address
        };
        const ro = resolved.overrides;
        if (ro.nonce != null) {
            tx.nonce = BigNumber.from(ro.nonce).toNumber();
        }
        if (ro.gasLimit != null) {
            tx.gasLimit = BigNumber.from(ro.gasLimit);
        }
        if (ro.gasPrice != null) {
            tx.gasPrice = BigNumber.from(ro.gasPrice);
        }
        if (ro.maxFeePerGas != null) {
            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
        }
        if (ro.maxPriorityFeePerGas != null) {
            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
        }
        if (ro.from != null) {
            tx.from = ro.from;
        }
        if (ro.type != null) {
            tx.type = ro.type;
        }
        if (ro.accessList != null) {
            tx.accessList = accessListify(ro.accessList);
        }
        if (tx.gasLimit == null && fragment.gas != null) {
            let intrinsic = 21e3;
            const bytes2 = arrayify(data);
            for(let i = 0; i < bytes2.length; i++){
                intrinsic += 4;
                if (bytes2[i]) {
                    intrinsic += 64;
                }
            }
            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
        }
        if (ro.value) {
            const roValue = BigNumber.from(ro.value);
            if (!roValue.isZero() && !fragment.payable) {
                logger212.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "overrides.value",
                    value: overrides.value
                });
            }
            tx.value = roValue;
        }
        if (ro.customData) {
            tx.customData = shallowCopy(ro.customData);
        }
        if (ro.ccipReadEnabled) {
            tx.ccipReadEnabled = !!ro.ccipReadEnabled;
        }
        delete overrides.nonce;
        delete overrides.gasLimit;
        delete overrides.gasPrice;
        delete overrides.from;
        delete overrides.value;
        delete overrides.type;
        delete overrides.accessList;
        delete overrides.maxFeePerGas;
        delete overrides.maxPriorityFeePerGas;
        delete overrides.customData;
        delete overrides.ccipReadEnabled;
        const leftovers = Object.keys(overrides).filter((key)=>overrides[key] != null);
        if (leftovers.length) {
            logger212.throwError(`cannot override ${leftovers.map((l)=>JSON.stringify(l)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "overrides",
                overrides: leftovers
            });
        }
        return tx;
    });
}
function buildPopulate(contract, fragment) {
    return function(...args) {
        return populateTransaction(contract, fragment, args);
    };
}
function buildEstimate(contract, fragment) {
    const signerOrProvider = contract.signer || contract.provider;
    return function(...args) {
        return __awaiter4(this, void 0, void 0, function*() {
            if (!signerOrProvider) {
                logger212.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "estimateGas"
                });
            }
            const tx = yield populateTransaction(contract, fragment, args);
            return yield signerOrProvider.estimateGas(tx);
        });
    };
}
function addContractWait(contract, tx) {
    const wait = tx.wait.bind(tx);
    tx.wait = (confirmations)=>{
        return wait(confirmations).then((receipt)=>{
            receipt.events = receipt.logs.map((log)=>{
                let event = deepCopy(log);
                let parsed = null;
                try {
                    parsed = contract.interface.parseLog(log);
                } catch (e) {}
                if (parsed) {
                    event.args = parsed.args;
                    event.decode = (data, topics)=>{
                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                    };
                    event.event = parsed.name;
                    event.eventSignature = parsed.signature;
                }
                event.removeListener = ()=>{
                    return contract.provider;
                };
                event.getBlock = ()=>{
                    return contract.provider.getBlock(receipt.blockHash);
                };
                event.getTransaction = ()=>{
                    return contract.provider.getTransaction(receipt.transactionHash);
                };
                event.getTransactionReceipt = ()=>{
                    return Promise.resolve(receipt);
                };
                return event;
            });
            return receipt;
        });
    };
}
function buildCall(contract, fragment, collapseSimple) {
    const signerOrProvider = contract.signer || contract.provider;
    return function(...args) {
        return __awaiter4(this, void 0, void 0, function*() {
            let blockTag = void 0;
            if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
                const overrides = shallowCopy(args.pop());
                if (overrides.blockTag != null) {
                    blockTag = yield overrides.blockTag;
                }
                delete overrides.blockTag;
                args.push(overrides);
            }
            if (contract.deployTransaction != null) {
                yield contract._deployed(blockTag);
            }
            const tx = yield populateTransaction(contract, fragment, args);
            const result = yield signerOrProvider.call(tx, blockTag);
            try {
                let value = contract.interface.decodeFunctionResult(fragment, result);
                if (collapseSimple && fragment.outputs.length === 1) {
                    value = value[0];
                }
                return value;
            } catch (error) {
                if (error.code === Logger.errors.CALL_EXCEPTION) {
                    error.address = contract.address;
                    error.args = args;
                    error.transaction = tx;
                }
                throw error;
            }
        });
    };
}
function buildSend(contract, fragment) {
    return function(...args) {
        return __awaiter4(this, void 0, void 0, function*() {
            if (!contract.signer) {
                logger212.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "sendTransaction"
                });
            }
            if (contract.deployTransaction != null) {
                yield contract._deployed();
            }
            const txRequest = yield populateTransaction(contract, fragment, args);
            const tx = yield contract.signer.sendTransaction(txRequest);
            addContractWait(contract, tx);
            return tx;
        });
    };
}
function buildDefault(contract, fragment, collapseSimple) {
    if (fragment.constant) {
        return buildCall(contract, fragment, collapseSimple);
    }
    return buildSend(contract, fragment);
}
function getEventTag(filter) {
    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
        return "*";
    }
    return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic)=>{
        if (Array.isArray(topic)) {
            return topic.join("|");
        }
        return topic;
    }).join(":") : "");
}
class RunningEvent {
    constructor(tag, filter){
        defineReadOnly(this, "tag", tag);
        defineReadOnly(this, "filter", filter);
        this._listeners = [];
    }
    addListener(listener, once) {
        this._listeners.push({
            listener,
            once
        });
    }
    removeListener(listener) {
        let done = false;
        this._listeners = this._listeners.filter((item)=>{
            if (done || item.listener !== listener) {
                return true;
            }
            done = true;
            return false;
        });
    }
    removeAllListeners() {
        this._listeners = [];
    }
    listeners() {
        return this._listeners.map((i)=>i.listener);
    }
    listenerCount() {
        return this._listeners.length;
    }
    run(args) {
        const listenerCount = this.listenerCount();
        this._listeners = this._listeners.filter((item)=>{
            const argsCopy = args.slice();
            setTimeout(()=>{
                item.listener.apply(this, argsCopy);
            }, 0);
            return !item.once;
        });
        return listenerCount;
    }
    prepareEvent(event) {}
    getEmit(event) {
        return [
            event
        ];
    }
}
class ErrorRunningEvent extends RunningEvent {
    constructor(){
        super("error", null);
    }
}
class FragmentRunningEvent extends RunningEvent {
    constructor(address2, contractInterface, fragment, topics){
        const filter = {
            address: address2
        };
        let topic = contractInterface.getEventTopic(fragment);
        if (topics) {
            if (topic !== topics[0]) {
                logger212.throwArgumentError("topic mismatch", "topics", topics);
            }
            filter.topics = topics.slice();
        } else {
            filter.topics = [
                topic
            ];
        }
        super(getEventTag(filter), filter);
        defineReadOnly(this, "address", address2);
        defineReadOnly(this, "interface", contractInterface);
        defineReadOnly(this, "fragment", fragment);
    }
    prepareEvent(event) {
        super.prepareEvent(event);
        event.event = this.fragment.name;
        event.eventSignature = this.fragment.format();
        event.decode = (data, topics)=>{
            return this.interface.decodeEventLog(this.fragment, data, topics);
        };
        try {
            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
        } catch (error) {
            event.args = null;
            event.decodeError = error;
        }
    }
    getEmit(event) {
        const errors = checkResultErrors(event.args);
        if (errors.length) {
            throw errors[0].error;
        }
        const args = (event.args || []).slice();
        args.push(event);
        return args;
    }
}
class WildcardRunningEvent extends RunningEvent {
    constructor(address2, contractInterface){
        super("*", {
            address: address2
        });
        defineReadOnly(this, "address", address2);
        defineReadOnly(this, "interface", contractInterface);
    }
    prepareEvent(event) {
        super.prepareEvent(event);
        try {
            const parsed = this.interface.parseLog(event);
            event.event = parsed.name;
            event.eventSignature = parsed.signature;
            event.decode = (data, topics)=>{
                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
            };
            event.args = parsed.args;
        } catch (error) {}
    }
}
class BaseContract {
    constructor(addressOrName, contractInterface, signerOrProvider){
        defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
        if (signerOrProvider == null) {
            defineReadOnly(this, "provider", null);
            defineReadOnly(this, "signer", null);
        } else if (Signer.isSigner(signerOrProvider)) {
            defineReadOnly(this, "provider", signerOrProvider.provider || null);
            defineReadOnly(this, "signer", signerOrProvider);
        } else if (Provider.isProvider(signerOrProvider)) {
            defineReadOnly(this, "provider", signerOrProvider);
            defineReadOnly(this, "signer", null);
        } else {
            logger212.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
        }
        defineReadOnly(this, "callStatic", {});
        defineReadOnly(this, "estimateGas", {});
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "populateTransaction", {});
        defineReadOnly(this, "filters", {});
        {
            const uniqueFilters = {};
            Object.keys(this.interface.events).forEach((eventSignature)=>{
                const event = this.interface.events[eventSignature];
                defineReadOnly(this.filters, eventSignature, (...args)=>{
                    return {
                        address: this.address,
                        topics: this.interface.encodeFilterTopics(event, args)
                    };
                });
                if (!uniqueFilters[event.name]) {
                    uniqueFilters[event.name] = [];
                }
                uniqueFilters[event.name].push(eventSignature);
            });
            Object.keys(uniqueFilters).forEach((name)=>{
                const filters = uniqueFilters[name];
                if (filters.length === 1) {
                    defineReadOnly(this.filters, name, this.filters[filters[0]]);
                } else {
                    logger212.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
                }
            });
        }
        defineReadOnly(this, "_runningEvents", {});
        defineReadOnly(this, "_wrappedEmits", {});
        if (addressOrName == null) {
            logger212.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
        }
        defineReadOnly(this, "address", addressOrName);
        if (this.provider) {
            defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
        } else {
            try {
                defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
            } catch (error) {
                logger212.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new Contract"
                });
            }
        }
        this.resolvedAddress.catch((e)=>{});
        const uniqueNames = {};
        const uniqueSignatures = {};
        Object.keys(this.interface.functions).forEach((signature)=>{
            const fragment = this.interface.functions[signature];
            if (uniqueSignatures[signature]) {
                logger212.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
                return;
            }
            uniqueSignatures[signature] = true;
            {
                const name = fragment.name;
                if (!uniqueNames[`%${name}`]) {
                    uniqueNames[`%${name}`] = [];
                }
                uniqueNames[`%${name}`].push(signature);
            }
            if (this[signature] == null) {
                defineReadOnly(this, signature, buildDefault(this, fragment, true));
            }
            if (this.functions[signature] == null) {
                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));
            }
            if (this.callStatic[signature] == null) {
                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));
            }
            if (this.populateTransaction[signature] == null) {
                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));
            }
            if (this.estimateGas[signature] == null) {
                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));
            }
        });
        Object.keys(uniqueNames).forEach((name)=>{
            const signatures = uniqueNames[name];
            if (signatures.length > 1) {
                return;
            }
            name = name.substring(1);
            const signature = signatures[0];
            try {
                if (this[name] == null) {
                    defineReadOnly(this, name, this[signature]);
                }
            } catch (e) {}
            if (this.functions[name] == null) {
                defineReadOnly(this.functions, name, this.functions[signature]);
            }
            if (this.callStatic[name] == null) {
                defineReadOnly(this.callStatic, name, this.callStatic[signature]);
            }
            if (this.populateTransaction[name] == null) {
                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);
            }
            if (this.estimateGas[name] == null) {
                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);
            }
        });
    }
    static getContractAddress(transaction) {
        return getContractAddress(transaction);
    }
    static getInterface(contractInterface) {
        if (Interface.isInterface(contractInterface)) {
            return contractInterface;
        }
        return new Interface(contractInterface);
    }
    deployed() {
        return this._deployed();
    }
    _deployed(blockTag) {
        if (!this._deployedPromise) {
            if (this.deployTransaction) {
                this._deployedPromise = this.deployTransaction.wait().then(()=>{
                    return this;
                });
            } else {
                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code)=>{
                    if (code === "0x") {
                        logger212.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                            contractAddress: this.address,
                            operation: "getDeployed"
                        });
                    }
                    return this;
                });
            }
        }
        return this._deployedPromise;
    }
    fallback(overrides) {
        if (!this.signer) {
            logger212.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "sendTransaction(fallback)"
            });
        }
        const tx = shallowCopy(overrides || {});
        [
            "from",
            "to"
        ].forEach(function(key) {
            if (tx[key] == null) {
                return;
            }
            logger212.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, {
                operation: key
            });
        });
        tx.to = this.resolvedAddress;
        return this.deployed().then(()=>{
            return this.signer.sendTransaction(tx);
        });
    }
    connect(signerOrProvider) {
        if (typeof signerOrProvider === "string") {
            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
        }
        const contract = new this.constructor(this.address, this.interface, signerOrProvider);
        if (this.deployTransaction) {
            defineReadOnly(contract, "deployTransaction", this.deployTransaction);
        }
        return contract;
    }
    attach(addressOrName) {
        return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
    }
    static isIndexed(value) {
        return Indexed.isIndexed(value);
    }
    _normalizeRunningEvent(runningEvent) {
        if (this._runningEvents[runningEvent.tag]) {
            return this._runningEvents[runningEvent.tag];
        }
        return runningEvent;
    }
    _getRunningEvent(eventName) {
        if (typeof eventName === "string") {
            if (eventName === "error") {
                return this._normalizeRunningEvent(new ErrorRunningEvent());
            }
            if (eventName === "event") {
                return this._normalizeRunningEvent(new RunningEvent("event", null));
            }
            if (eventName === "*") {
                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
            }
            const fragment = this.interface.getEvent(eventName);
            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
        }
        if (eventName.topics && eventName.topics.length > 0) {
            try {
                const topic = eventName.topics[0];
                if (typeof topic !== "string") {
                    throw new Error("invalid topic");
                }
                const fragment = this.interface.getEvent(topic);
                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
            } catch (error) {}
            const filter = {
                address: this.address,
                topics: eventName.topics
            };
            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
        }
        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
    }
    _checkRunningEvents(runningEvent) {
        if (runningEvent.listenerCount() === 0) {
            delete this._runningEvents[runningEvent.tag];
            const emit = this._wrappedEmits[runningEvent.tag];
            if (emit && runningEvent.filter) {
                this.provider.off(runningEvent.filter, emit);
                delete this._wrappedEmits[runningEvent.tag];
            }
        }
    }
    _wrapEvent(runningEvent, log, listener) {
        const event = deepCopy(log);
        event.removeListener = ()=>{
            if (!listener) {
                return;
            }
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
        };
        event.getBlock = ()=>{
            return this.provider.getBlock(log.blockHash);
        };
        event.getTransaction = ()=>{
            return this.provider.getTransaction(log.transactionHash);
        };
        event.getTransactionReceipt = ()=>{
            return this.provider.getTransactionReceipt(log.transactionHash);
        };
        runningEvent.prepareEvent(event);
        return event;
    }
    _addEventListener(runningEvent, listener, once) {
        if (!this.provider) {
            logger212.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "once"
            });
        }
        runningEvent.addListener(listener, once);
        this._runningEvents[runningEvent.tag] = runningEvent;
        if (!this._wrappedEmits[runningEvent.tag]) {
            const wrappedEmit = (log)=>{
                let event = this._wrapEvent(runningEvent, log, listener);
                if (event.decodeError == null) {
                    try {
                        const args = runningEvent.getEmit(event);
                        this.emit(runningEvent.filter, ...args);
                    } catch (error) {
                        event.decodeError = error.error;
                    }
                }
                if (runningEvent.filter != null) {
                    this.emit("event", event);
                }
                if (event.decodeError != null) {
                    this.emit("error", event.decodeError, event);
                }
            };
            this._wrappedEmits[runningEvent.tag] = wrappedEmit;
            if (runningEvent.filter != null) {
                this.provider.on(runningEvent.filter, wrappedEmit);
            }
        }
    }
    queryFilter(event, fromBlockOrBlockhash, toBlock) {
        const runningEvent = this._getRunningEvent(event);
        const filter = shallowCopy(runningEvent.filter);
        if (typeof fromBlockOrBlockhash === "string" && isHexString(fromBlockOrBlockhash, 32)) {
            if (toBlock != null) {
                logger212.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
            }
            filter.blockHash = fromBlockOrBlockhash;
        } else {
            filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
            filter.toBlock = toBlock != null ? toBlock : "latest";
        }
        return this.provider.getLogs(filter).then((logs)=>{
            return logs.map((log)=>this._wrapEvent(runningEvent, log, null));
        });
    }
    on(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, false);
        return this;
    }
    once(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, true);
        return this;
    }
    emit(eventName, ...args) {
        if (!this.provider) {
            return false;
        }
        const runningEvent = this._getRunningEvent(eventName);
        const result = runningEvent.run(args) > 0;
        this._checkRunningEvents(runningEvent);
        return result;
    }
    listenerCount(eventName) {
        if (!this.provider) {
            return 0;
        }
        if (eventName == null) {
            return Object.keys(this._runningEvents).reduce((accum, key)=>{
                return accum + this._runningEvents[key].listenerCount();
            }, 0);
        }
        return this._getRunningEvent(eventName).listenerCount();
    }
    listeners(eventName) {
        if (!this.provider) {
            return [];
        }
        if (eventName == null) {
            const result = [];
            for(let tag in this._runningEvents){
                this._runningEvents[tag].listeners().forEach((listener)=>{
                    result.push(listener);
                });
            }
            return result;
        }
        return this._getRunningEvent(eventName).listeners();
    }
    removeAllListeners(eventName) {
        if (!this.provider) {
            return this;
        }
        if (eventName == null) {
            for(const tag in this._runningEvents){
                const runningEvent2 = this._runningEvents[tag];
                runningEvent2.removeAllListeners();
                this._checkRunningEvents(runningEvent2);
            }
            return this;
        }
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeAllListeners();
        this._checkRunningEvents(runningEvent);
        return this;
    }
    off(eventName, listener) {
        if (!this.provider) {
            return this;
        }
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeListener(listener);
        this._checkRunningEvents(runningEvent);
        return this;
    }
    removeListener(eventName, listener) {
        return this.off(eventName, listener);
    }
}
class Contract extends BaseContract {
}
class ContractFactory {
    constructor(contractInterface, bytecode, signer){
        let bytecodeHex = null;
        if (typeof bytecode === "string") {
            bytecodeHex = bytecode;
        } else if (isBytes(bytecode)) {
            bytecodeHex = hexlify(bytecode);
        } else if (bytecode && typeof bytecode.object === "string") {
            bytecodeHex = bytecode.object;
        } else {
            bytecodeHex = "!";
        }
        if (bytecodeHex.substring(0, 2) !== "0x") {
            bytecodeHex = "0x" + bytecodeHex;
        }
        if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {
            logger212.throwArgumentError("invalid bytecode", "bytecode", bytecode);
        }
        if (signer && !Signer.isSigner(signer)) {
            logger212.throwArgumentError("invalid signer", "signer", signer);
        }
        defineReadOnly(this, "bytecode", bytecodeHex);
        defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
        defineReadOnly(this, "signer", signer || null);
    }
    getDeployTransaction(...args) {
        let tx = {};
        if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
            tx = shallowCopy(args.pop());
            for(const key in tx){
                if (!allowedTransactionKeys2[key]) {
                    throw new Error("unknown transaction override " + key);
                }
            }
        }
        [
            "data",
            "from",
            "to"
        ].forEach((key)=>{
            if (tx[key] == null) {
                return;
            }
            logger212.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, {
                operation: key
            });
        });
        if (tx.value) {
            const value = BigNumber.from(tx.value);
            if (!value.isZero() && !this.interface.deploy.payable) {
                logger212.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "overrides.value",
                    value: tx.value
                });
            }
        }
        logger212.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
        tx.data = hexlify(concat([
            this.bytecode,
            this.interface.encodeDeploy(args)
        ]));
        return tx;
    }
    deploy(...args) {
        return __awaiter4(this, void 0, void 0, function*() {
            let overrides = {};
            if (args.length === this.interface.deploy.inputs.length + 1) {
                overrides = args.pop();
            }
            logger212.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
            params.push(overrides);
            const unsignedTx = this.getDeployTransaction(...params);
            const tx = yield this.signer.sendTransaction(unsignedTx);
            const address2 = getStatic(this.constructor, "getContractAddress")(tx);
            const contract = getStatic(this.constructor, "getContract")(address2, this.interface, this.signer);
            addContractWait(contract, tx);
            defineReadOnly(contract, "deployTransaction", tx);
            return contract;
        });
    }
    attach(address2) {
        return this.constructor.getContract(address2, this.interface, this.signer);
    }
    connect(signer) {
        return new this.constructor(this.interface, this.bytecode, signer);
    }
    static fromSolidity(compilerOutput, signer) {
        if (compilerOutput == null) {
            logger212.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, {
                argument: "compilerOutput"
            });
        }
        if (typeof compilerOutput === "string") {
            compilerOutput = JSON.parse(compilerOutput);
        }
        const abi2 = compilerOutput.abi;
        let bytecode = null;
        if (compilerOutput.bytecode) {
            bytecode = compilerOutput.bytecode;
        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
            bytecode = compilerOutput.evm.bytecode;
        }
        return new this(abi2, bytecode, signer);
    }
    static getInterface(contractInterface) {
        return Contract.getInterface(contractInterface);
    }
    static getContractAddress(tx) {
        return getContractAddress(tx);
    }
    static getContract(address2, contractInterface, signer) {
        return new Contract(address2, contractInterface, signer);
    }
}
class BaseX {
    constructor(alphabet){
        defineReadOnly(this, "alphabet", alphabet);
        defineReadOnly(this, "base", alphabet.length);
        defineReadOnly(this, "_alphabetMap", {});
        defineReadOnly(this, "_leader", alphabet.charAt(0));
        for(let i = 0; i < alphabet.length; i++){
            this._alphabetMap[alphabet.charAt(i)] = i;
        }
    }
    encode(value) {
        let source = arrayify(value);
        if (source.length === 0) {
            return "";
        }
        let digits = [
            0
        ];
        for(let i = 0; i < source.length; ++i){
            let carry = source[i];
            for(let j = 0; j < digits.length; ++j){
                carry += digits[j] << 8;
                digits[j] = carry % this.base;
                carry = carry / this.base | 0;
            }
            while(carry > 0){
                digits.push(carry % this.base);
                carry = carry / this.base | 0;
            }
        }
        let string = "";
        for(let k = 0; source[k] === 0 && k < source.length - 1; ++k){
            string += this._leader;
        }
        for(let q = digits.length - 1; q >= 0; --q){
            string += this.alphabet[digits[q]];
        }
        return string;
    }
    decode(value) {
        if (typeof value !== "string") {
            throw new TypeError("Expected String");
        }
        let bytes2 = [];
        if (value.length === 0) {
            return new Uint8Array(bytes2);
        }
        bytes2.push(0);
        for(let i = 0; i < value.length; i++){
            let __byte = this._alphabetMap[value[i]];
            if (__byte === void 0) {
                throw new Error("Non-base" + this.base + " character");
            }
            let carry = __byte;
            for(let j = 0; j < bytes2.length; ++j){
                carry += bytes2[j] * this.base;
                bytes2[j] = carry & 255;
                carry >>= 8;
            }
            while(carry > 0){
                bytes2.push(carry & 255);
                carry >>= 8;
            }
        }
        for(let k = 0; value[k] === this._leader && k < value.length - 1; ++k){
            bytes2.push(0);
        }
        return arrayify(new Uint8Array(bytes2.reverse()));
    }
}
new BaseX("abcdefghijklmnopqrstuvwxyz234567");
const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var SupportedAlgorithm;
(function(SupportedAlgorithm2) {
    SupportedAlgorithm2["sha256"] = "sha256";
    SupportedAlgorithm2["sha512"] = "sha512";
})(SupportedAlgorithm || (SupportedAlgorithm = {}));
const version15 = "sha2/5.7.0";
const logger213 = new Logger(version15);
function ripemd1601(data) {
    return "0x" + hash_1.ripemd160().update(arrayify(data)).digest("hex");
}
function sha2561(data) {
    return "0x" + hash_1.sha256().update(arrayify(data)).digest("hex");
}
function sha5121(data) {
    return "0x" + hash_1.sha512().update(arrayify(data)).digest("hex");
}
function computeHmac(algorithm, key, data) {
    if (!SupportedAlgorithm[algorithm]) {
        logger213.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "hmac",
            algorithm
        });
    }
    return "0x" + hash_1.hmac(hash_1[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
}
function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
    password = arrayify(password);
    salt = arrayify(salt);
    let hLen;
    let l = 1;
    const DK = new Uint8Array(keylen);
    const block1 = new Uint8Array(salt.length + 4);
    block1.set(salt);
    let r;
    let T;
    for(let i = 1; i <= l; i++){
        block1[salt.length] = i >> 24 & 255;
        block1[salt.length + 1] = i >> 16 & 255;
        block1[salt.length + 2] = i >> 8 & 255;
        block1[salt.length + 3] = i & 255;
        let U = arrayify(computeHmac(hashAlgorithm, password, block1));
        if (!hLen) {
            hLen = U.length;
            T = new Uint8Array(hLen);
            l = Math.ceil(keylen / hLen);
            r = keylen - (l - 1) * hLen;
        }
        T.set(U);
        for(let j = 1; j < iterations; j++){
            U = arrayify(computeHmac(hashAlgorithm, password, U));
            for(let k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        const destPos = (i - 1) * hLen;
        const len = i === l ? r : hLen;
        DK.set(arrayify(T).slice(0, len), destPos);
    }
    return hexlify(DK);
}
const version16 = "wordlists/5.7.0";
const logger214 = new Logger(version16);
class Wordlist {
    constructor(locale){
        logger214.checkAbstract(new.target, Wordlist);
        defineReadOnly(this, "locale", locale);
    }
    split(mnemonic) {
        return mnemonic.toLowerCase().split(/ +/g);
    }
    join(words2) {
        return words2.join(" ");
    }
    static check(wordlist2) {
        const words2 = [];
        for(let i = 0; i < 2048; i++){
            const word = wordlist2.getWord(i);
            if (i !== wordlist2.getWordIndex(word)) {
                return "0x";
            }
            words2.push(word);
        }
        return id(words2.join("\n") + "\n");
    }
    static register(lang, name) {
        if (!name) {
            name = lang.locale;
        }
    }
}
const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
let wordlist = null;
function loadWords(lang) {
    if (wordlist != null) {
        return;
    }
    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
    if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
        wordlist = null;
        throw new Error("BIP39 Wordlist for en (English) FAILED");
    }
}
class LangEn extends Wordlist {
    constructor(){
        super("en");
    }
    getWord(index) {
        loadWords(this);
        return wordlist[index];
    }
    getWordIndex(word) {
        loadWords(this);
        return wordlist.indexOf(word);
    }
}
const langEn = new LangEn();
Wordlist.register(langEn);
const wordlists = {
    en: langEn
};
const version17 = "hdnode/5.7.0";
const logger215 = new Logger(version17);
const N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
const MasterSecret = toUtf8Bytes("Bitcoin seed");
const HardenedBit = 2147483648;
function getUpperMask(bits) {
    return (1 << bits) - 1 << 8 - bits;
}
function getLowerMask(bits) {
    return (1 << bits) - 1;
}
function bytes32(value) {
    return hexZeroPad(hexlify(value), 32);
}
function base58check(data) {
    return Base58.encode(concat([
        data,
        hexDataSlice(sha2561(sha2561(data)), 0, 4)
    ]));
}
function getWordlist(wordlist) {
    if (wordlist == null) {
        return wordlists["en"];
    }
    if (typeof wordlist === "string") {
        const words = wordlists[wordlist];
        if (words == null) {
            logger215.throwArgumentError("unknown locale", "wordlist", wordlist);
        }
        return words;
    }
    return wordlist;
}
const _constructorGuard2 = {};
const defaultPath = "m/44'/60'/0'/0/0";
class HDNode {
    constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath){
        if (constructorGuard !== _constructorGuard2) {
            throw new Error("HDNode constructor cannot be called directly");
        }
        if (privateKey) {
            const signingKey = new SigningKey(privateKey);
            defineReadOnly(this, "privateKey", signingKey.privateKey);
            defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
        } else {
            defineReadOnly(this, "privateKey", null);
            defineReadOnly(this, "publicKey", hexlify(publicKey));
        }
        defineReadOnly(this, "parentFingerprint", parentFingerprint);
        defineReadOnly(this, "fingerprint", hexDataSlice(ripemd1601(sha2561(this.publicKey)), 0, 4));
        defineReadOnly(this, "address", computeAddress(this.publicKey));
        defineReadOnly(this, "chainCode", chainCode);
        defineReadOnly(this, "index", index);
        defineReadOnly(this, "depth", depth);
        if (mnemonicOrPath == null) {
            defineReadOnly(this, "mnemonic", null);
            defineReadOnly(this, "path", null);
        } else if (typeof mnemonicOrPath === "string") {
            defineReadOnly(this, "mnemonic", null);
            defineReadOnly(this, "path", mnemonicOrPath);
        } else {
            defineReadOnly(this, "mnemonic", mnemonicOrPath);
            defineReadOnly(this, "path", mnemonicOrPath.path);
        }
    }
    get extendedKey() {
        if (this.depth >= 256) {
            throw new Error("Depth too large!");
        }
        return base58check(concat([
            this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
            hexlify(this.depth),
            this.parentFingerprint,
            hexZeroPad(hexlify(this.index), 4),
            this.chainCode,
            this.privateKey != null ? concat([
                "0x00",
                this.privateKey
            ]) : this.publicKey
        ]));
    }
    neuter() {
        return new HDNode(_constructorGuard2, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
    }
    _derive(index) {
        if (index > 4294967295) {
            throw new Error("invalid index - " + String(index));
        }
        let path = this.path;
        if (path) {
            path += "/" + (index & ~HardenedBit);
        }
        const data = new Uint8Array(37);
        if (index & 2147483648) {
            if (!this.privateKey) {
                throw new Error("cannot derive child of neutered node");
            }
            data.set(arrayify(this.privateKey), 1);
            if (path) {
                path += "'";
            }
        } else {
            data.set(arrayify(this.publicKey));
        }
        for(let i = 24; i >= 0; i -= 8){
            data[33 + (i >> 3)] = index >> 24 - i & 255;
        }
        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
        const IL = I.slice(0, 32);
        const IR = I.slice(32);
        let ki = null;
        let Ki = null;
        if (this.privateKey) {
            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
        } else {
            const ek = new SigningKey(hexlify(IL));
            Ki = ek._addPoint(this.publicKey);
        }
        let mnemonicOrPath = path;
        const srcMnemonic = this.mnemonic;
        if (srcMnemonic) {
            mnemonicOrPath = Object.freeze({
                phrase: srcMnemonic.phrase,
                path,
                locale: srcMnemonic.locale || "en"
            });
        }
        return new HDNode(_constructorGuard2, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
    }
    derivePath(path) {
        const components = path.split("/");
        if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
            throw new Error("invalid path - " + path);
        }
        if (components[0] === "m") {
            components.shift();
        }
        let result = this;
        for(let i = 0; i < components.length; i++){
            const component = components[i];
            if (component.match(/^[0-9]+'$/)) {
                const index = parseInt(component.substring(0, component.length - 1));
                if (index >= 2147483648) {
                    throw new Error("invalid path index - " + component);
                }
                result = result._derive(HardenedBit + index);
            } else if (component.match(/^[0-9]+$/)) {
                const index = parseInt(component);
                if (index >= 2147483648) {
                    throw new Error("invalid path index - " + component);
                }
                result = result._derive(index);
            } else {
                throw new Error("invalid path component - " + component);
            }
        }
        return result;
    }
    static _fromSeed(seed, mnemonic) {
        const seedArray = arrayify(seed);
        if (seedArray.length < 16 || seedArray.length > 64) {
            throw new Error("invalid seed");
        }
        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
        return new HDNode(_constructorGuard2, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
    }
    static fromMnemonic(mnemonic, password, wordlist) {
        wordlist = getWordlist(wordlist);
        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
            phrase: mnemonic,
            path: "m",
            locale: wordlist.locale
        });
    }
    static fromSeed(seed) {
        return HDNode._fromSeed(seed, null);
    }
    static fromExtendedKey(extendedKey) {
        const bytes2 = Base58.decode(extendedKey);
        if (bytes2.length !== 82 || base58check(bytes2.slice(0, 78)) !== extendedKey) {
            logger215.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        }
        const depth = bytes2[4];
        const parentFingerprint = hexlify(bytes2.slice(5, 9));
        const index = parseInt(hexlify(bytes2.slice(9, 13)).substring(2), 16);
        const chainCode = hexlify(bytes2.slice(13, 45));
        const key = bytes2.slice(45, 78);
        switch(hexlify(bytes2.slice(0, 4))){
            case "0x0488b21e":
            case "0x043587cf":
                return new HDNode(_constructorGuard2, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);
            case "0x0488ade4":
            case "0x04358394 ":
                if (key[0] !== 0) {
                    break;
                }
                return new HDNode(_constructorGuard2, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
        }
        return logger215.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
    }
}
function mnemonicToSeed(mnemonic, password) {
    if (!password) {
        password = "";
    }
    const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
}
function mnemonicToEntropy(mnemonic, wordlist) {
    wordlist = getWordlist(wordlist);
    logger215.checkNormalize();
    const words = wordlist.split(mnemonic);
    if (words.length % 3 !== 0) {
        throw new Error("invalid mnemonic");
    }
    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
    let offset = 0;
    for(let i = 0; i < words.length; i++){
        let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
        if (index === -1) {
            throw new Error("invalid mnemonic");
        }
        for(let bit = 0; bit < 11; bit++){
            if (index & 1 << 10 - bit) {
                entropy[offset >> 3] |= 1 << 7 - offset % 8;
            }
            offset++;
        }
    }
    const entropyBits = 32 * words.length / 3;
    const checksumBits = words.length / 3;
    const checksumMask = getUpperMask(checksumBits);
    const checksum = arrayify(sha2561(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
        throw new Error("invalid checksum");
    }
    return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist) {
    wordlist = getWordlist(wordlist);
    entropy = arrayify(entropy);
    if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
        throw new Error("invalid entropy");
    }
    const indices = [
        0
    ];
    let remainingBits = 11;
    for(let i = 0; i < entropy.length; i++){
        if (remainingBits > 8) {
            indices[indices.length - 1] <<= 8;
            indices[indices.length - 1] |= entropy[i];
            remainingBits -= 8;
        } else {
            indices[indices.length - 1] <<= remainingBits;
            indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
            indices.push(entropy[i] & getLowerMask(8 - remainingBits));
            remainingBits += 3;
        }
    }
    const checksumBits = entropy.length / 4;
    const checksum = arrayify(sha2561(entropy))[0] & getUpperMask(checksumBits);
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum >> 8 - checksumBits;
    return wordlist.join(indices.map((index)=>wordlist.getWord(index)));
}
function isValidMnemonic(mnemonic, wordlist) {
    try {
        mnemonicToEntropy(mnemonic, wordlist);
        return true;
    } catch (error) {}
    return false;
}
function getAccountPath(index) {
    if (typeof index !== "number" || index < 0 || index >= 2147483648 || index % 1) {
        logger215.throwArgumentError("invalid account index", "index", index);
    }
    return `m/44'/60'/${index}'/0/0`;
}
var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
const version18 = "random/5.7.0";
const logger216 = new Logger(version18);
function getGlobal() {
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global$1 !== "undefined") {
        return global$1;
    }
    throw new Error("unable to locate global object");
}
const anyGlobal = getGlobal();
let crypto1 = anyGlobal.crypto || anyGlobal.msCrypto;
if (!crypto1 || !crypto1.getRandomValues) {
    logger216.warn("WARNING: Missing strong random number source");
    crypto1 = {
        getRandomValues: function(buffer) {
            return logger216.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "crypto.getRandomValues"
            });
        }
    };
}
function randomBytes(length) {
    if (length <= 0 || length > 1024 || length % 1 || length != length) {
        logger216.throwArgumentError("invalid length", "length", length);
    }
    const result = new Uint8Array(length);
    crypto1.getRandomValues(result);
    return arrayify(result);
}
function shuffled(array) {
    array = array.slice();
    for(let i = array.length - 1; i > 0; i--){
        const j = Math.floor(Math.random() * (i + 1));
        const tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
    }
    return array;
}
function createCommonjsModule5(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path, base) {
            return commonjsRequire5(path, base === void 0 || base === null ? module.path : base);
        }
    }, fn(module, module.exports), module.exports;
}
function commonjsRequire5() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var aesJs = createCommonjsModule5(function(module, exports) {
    (function(root) {
        function checkInt(value) {
            return parseInt(value) === value;
        }
        function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) {
                return false;
            }
            for(var i = 0; i < arrayish.length; i++){
                if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                    return false;
                }
            }
            return true;
        }
        function coerceArray(arg, copy) {
            if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
                if (copy) {
                    if (arg.slice) {
                        arg = arg.slice();
                    } else {
                        arg = Array.prototype.slice.call(arg);
                    }
                }
                return arg;
            }
            if (Array.isArray(arg)) {
                if (!checkInts(arg)) {
                    throw new Error("Array contains invalid value: " + arg);
                }
                return new Uint8Array(arg);
            }
            if (checkInt(arg.length) && checkInts(arg)) {
                return new Uint8Array(arg);
            }
            throw new Error("unsupported array-like object");
        }
        function createArray(length) {
            return new Uint8Array(length);
        }
        function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
            if (sourceStart != null || sourceEnd != null) {
                if (sourceArray.slice) {
                    sourceArray = sourceArray.slice(sourceStart, sourceEnd);
                } else {
                    sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
                }
            }
            targetArray.set(sourceArray, targetStart);
        }
        var convertUtf8 = function() {
            function toBytes(text) {
                var result = [], i = 0;
                text = encodeURI(text);
                while(i < text.length){
                    var c = text.charCodeAt(i++);
                    if (c === 37) {
                        result.push(parseInt(text.substr(i, 2), 16));
                        i += 2;
                    } else {
                        result.push(c);
                    }
                }
                return coerceArray(result);
            }
            function fromBytes(bytes) {
                var result = [], i = 0;
                while(i < bytes.length){
                    var c = bytes[i];
                    if (c < 128) {
                        result.push(String.fromCharCode(c));
                        i++;
                    } else if (c > 191 && c < 224) {
                        result.push(String.fromCharCode((c & 31) << 6 | bytes[i + 1] & 63));
                        i += 2;
                    } else {
                        result.push(String.fromCharCode((c & 15) << 12 | (bytes[i + 1] & 63) << 6 | bytes[i + 2] & 63));
                        i += 3;
                    }
                }
                return result.join("");
            }
            return {
                toBytes,
                fromBytes
            };
        }();
        var convertHex = function() {
            function toBytes(text) {
                var result = [];
                for(var i = 0; i < text.length; i += 2){
                    result.push(parseInt(text.substr(i, 2), 16));
                }
                return result;
            }
            var Hex = "0123456789abcdef";
            function fromBytes(bytes) {
                var result = [];
                for(var i = 0; i < bytes.length; i++){
                    var v = bytes[i];
                    result.push(Hex[(v & 240) >> 4] + Hex[v & 15]);
                }
                return result.join("");
            }
            return {
                toBytes,
                fromBytes
            };
        }();
        var numberOfRounds = {
            16: 10,
            24: 12,
            32: 14
        };
        var rcon = [
            1,
            2,
            4,
            8,
            16,
            32,
            64,
            128,
            27,
            54,
            108,
            216,
            171,
            77,
            154,
            47,
            94,
            188,
            99,
            198,
            151,
            53,
            106,
            212,
            179,
            125,
            250,
            239,
            197,
            145
        ];
        var S = [
            99,
            124,
            119,
            123,
            242,
            107,
            111,
            197,
            48,
            1,
            103,
            43,
            254,
            215,
            171,
            118,
            202,
            130,
            201,
            125,
            250,
            89,
            71,
            240,
            173,
            212,
            162,
            175,
            156,
            164,
            114,
            192,
            183,
            253,
            147,
            38,
            54,
            63,
            247,
            204,
            52,
            165,
            229,
            241,
            113,
            216,
            49,
            21,
            4,
            199,
            35,
            195,
            24,
            150,
            5,
            154,
            7,
            18,
            128,
            226,
            235,
            39,
            178,
            117,
            9,
            131,
            44,
            26,
            27,
            110,
            90,
            160,
            82,
            59,
            214,
            179,
            41,
            227,
            47,
            132,
            83,
            209,
            0,
            237,
            32,
            252,
            177,
            91,
            106,
            203,
            190,
            57,
            74,
            76,
            88,
            207,
            208,
            239,
            170,
            251,
            67,
            77,
            51,
            133,
            69,
            249,
            2,
            127,
            80,
            60,
            159,
            168,
            81,
            163,
            64,
            143,
            146,
            157,
            56,
            245,
            188,
            182,
            218,
            33,
            16,
            255,
            243,
            210,
            205,
            12,
            19,
            236,
            95,
            151,
            68,
            23,
            196,
            167,
            126,
            61,
            100,
            93,
            25,
            115,
            96,
            129,
            79,
            220,
            34,
            42,
            144,
            136,
            70,
            238,
            184,
            20,
            222,
            94,
            11,
            219,
            224,
            50,
            58,
            10,
            73,
            6,
            36,
            92,
            194,
            211,
            172,
            98,
            145,
            149,
            228,
            121,
            231,
            200,
            55,
            109,
            141,
            213,
            78,
            169,
            108,
            86,
            244,
            234,
            101,
            122,
            174,
            8,
            186,
            120,
            37,
            46,
            28,
            166,
            180,
            198,
            232,
            221,
            116,
            31,
            75,
            189,
            139,
            138,
            112,
            62,
            181,
            102,
            72,
            3,
            246,
            14,
            97,
            53,
            87,
            185,
            134,
            193,
            29,
            158,
            225,
            248,
            152,
            17,
            105,
            217,
            142,
            148,
            155,
            30,
            135,
            233,
            206,
            85,
            40,
            223,
            140,
            161,
            137,
            13,
            191,
            230,
            66,
            104,
            65,
            153,
            45,
            15,
            176,
            84,
            187,
            22
        ];
        var Si = [
            82,
            9,
            106,
            213,
            48,
            54,
            165,
            56,
            191,
            64,
            163,
            158,
            129,
            243,
            215,
            251,
            124,
            227,
            57,
            130,
            155,
            47,
            255,
            135,
            52,
            142,
            67,
            68,
            196,
            222,
            233,
            203,
            84,
            123,
            148,
            50,
            166,
            194,
            35,
            61,
            238,
            76,
            149,
            11,
            66,
            250,
            195,
            78,
            8,
            46,
            161,
            102,
            40,
            217,
            36,
            178,
            118,
            91,
            162,
            73,
            109,
            139,
            209,
            37,
            114,
            248,
            246,
            100,
            134,
            104,
            152,
            22,
            212,
            164,
            92,
            204,
            93,
            101,
            182,
            146,
            108,
            112,
            72,
            80,
            253,
            237,
            185,
            218,
            94,
            21,
            70,
            87,
            167,
            141,
            157,
            132,
            144,
            216,
            171,
            0,
            140,
            188,
            211,
            10,
            247,
            228,
            88,
            5,
            184,
            179,
            69,
            6,
            208,
            44,
            30,
            143,
            202,
            63,
            15,
            2,
            193,
            175,
            189,
            3,
            1,
            19,
            138,
            107,
            58,
            145,
            17,
            65,
            79,
            103,
            220,
            234,
            151,
            242,
            207,
            206,
            240,
            180,
            230,
            115,
            150,
            172,
            116,
            34,
            231,
            173,
            53,
            133,
            226,
            249,
            55,
            232,
            28,
            117,
            223,
            110,
            71,
            241,
            26,
            113,
            29,
            41,
            197,
            137,
            111,
            183,
            98,
            14,
            170,
            24,
            190,
            27,
            252,
            86,
            62,
            75,
            198,
            210,
            121,
            32,
            154,
            219,
            192,
            254,
            120,
            205,
            90,
            244,
            31,
            221,
            168,
            51,
            136,
            7,
            199,
            49,
            177,
            18,
            16,
            89,
            39,
            128,
            236,
            95,
            96,
            81,
            127,
            169,
            25,
            181,
            74,
            13,
            45,
            229,
            122,
            159,
            147,
            201,
            156,
            239,
            160,
            224,
            59,
            77,
            174,
            42,
            245,
            176,
            200,
            235,
            187,
            60,
            131,
            83,
            153,
            97,
            23,
            43,
            4,
            126,
            186,
            119,
            214,
            38,
            225,
            105,
            20,
            99,
            85,
            33,
            12,
            125
        ];
        var T1 = [
            3328402341,
            4168907908,
            4000806809,
            4135287693,
            4294111757,
            3597364157,
            3731845041,
            2445657428,
            1613770832,
            33620227,
            3462883241,
            1445669757,
            3892248089,
            3050821474,
            1303096294,
            3967186586,
            2412431941,
            528646813,
            2311702848,
            4202528135,
            4026202645,
            2992200171,
            2387036105,
            4226871307,
            1101901292,
            3017069671,
            1604494077,
            1169141738,
            597466303,
            1403299063,
            3832705686,
            2613100635,
            1974974402,
            3791519004,
            1033081774,
            1277568618,
            1815492186,
            2118074177,
            4126668546,
            2211236943,
            1748251740,
            1369810420,
            3521504564,
            4193382664,
            3799085459,
            2883115123,
            1647391059,
            706024767,
            134480908,
            2512897874,
            1176707941,
            2646852446,
            806885416,
            932615841,
            168101135,
            798661301,
            235341577,
            605164086,
            461406363,
            3756188221,
            3454790438,
            1311188841,
            2142417613,
            3933566367,
            302582043,
            495158174,
            1479289972,
            874125870,
            907746093,
            3698224818,
            3025820398,
            1537253627,
            2756858614,
            1983593293,
            3084310113,
            2108928974,
            1378429307,
            3722699582,
            1580150641,
            327451799,
            2790478837,
            3117535592,
            0,
            3253595436,
            1075847264,
            3825007647,
            2041688520,
            3059440621,
            3563743934,
            2378943302,
            1740553945,
            1916352843,
            2487896798,
            2555137236,
            2958579944,
            2244988746,
            3151024235,
            3320835882,
            1336584933,
            3992714006,
            2252555205,
            2588757463,
            1714631509,
            293963156,
            2319795663,
            3925473552,
            67240454,
            4269768577,
            2689618160,
            2017213508,
            631218106,
            1269344483,
            2723238387,
            1571005438,
            2151694528,
            93294474,
            1066570413,
            563977660,
            1882732616,
            4059428100,
            1673313503,
            2008463041,
            2950355573,
            1109467491,
            537923632,
            3858759450,
            4260623118,
            3218264685,
            2177748300,
            403442708,
            638784309,
            3287084079,
            3193921505,
            899127202,
            2286175436,
            773265209,
            2479146071,
            1437050866,
            4236148354,
            2050833735,
            3362022572,
            3126681063,
            840505643,
            3866325909,
            3227541664,
            427917720,
            2655997905,
            2749160575,
            1143087718,
            1412049534,
            999329963,
            193497219,
            2353415882,
            3354324521,
            1807268051,
            672404540,
            2816401017,
            3160301282,
            369822493,
            2916866934,
            3688947771,
            1681011286,
            1949973070,
            336202270,
            2454276571,
            201721354,
            1210328172,
            3093060836,
            2680341085,
            3184776046,
            1135389935,
            3294782118,
            965841320,
            831886756,
            3554993207,
            4068047243,
            3588745010,
            2345191491,
            1849112409,
            3664604599,
            26054028,
            2983581028,
            2622377682,
            1235855840,
            3630984372,
            2891339514,
            4092916743,
            3488279077,
            3395642799,
            4101667470,
            1202630377,
            268961816,
            1874508501,
            4034427016,
            1243948399,
            1546530418,
            941366308,
            1470539505,
            1941222599,
            2546386513,
            3421038627,
            2715671932,
            3899946140,
            1042226977,
            2521517021,
            1639824860,
            227249030,
            260737669,
            3765465232,
            2084453954,
            1907733956,
            3429263018,
            2420656344,
            100860677,
            4160157185,
            470683154,
            3261161891,
            1781871967,
            2924959737,
            1773779408,
            394692241,
            2579611992,
            974986535,
            664706745,
            3655459128,
            3958962195,
            731420851,
            571543859,
            3530123707,
            2849626480,
            126783113,
            865375399,
            765172662,
            1008606754,
            361203602,
            3387549984,
            2278477385,
            2857719295,
            1344809080,
            2782912378,
            59542671,
            1503764984,
            160008576,
            437062935,
            1707065306,
            3622233649,
            2218934982,
            3496503480,
            2185314755,
            697932208,
            1512910199,
            504303377,
            2075177163,
            2824099068,
            1841019862,
            739644986
        ];
        var T2 = [
            2781242211,
            2230877308,
            2582542199,
            2381740923,
            234877682,
            3184946027,
            2984144751,
            1418839493,
            1348481072,
            50462977,
            2848876391,
            2102799147,
            434634494,
            1656084439,
            3863849899,
            2599188086,
            1167051466,
            2636087938,
            1082771913,
            2281340285,
            368048890,
            3954334041,
            3381544775,
            201060592,
            3963727277,
            1739838676,
            4250903202,
            3930435503,
            3206782108,
            4149453988,
            2531553906,
            1536934080,
            3262494647,
            484572669,
            2923271059,
            1783375398,
            1517041206,
            1098792767,
            49674231,
            1334037708,
            1550332980,
            4098991525,
            886171109,
            150598129,
            2481090929,
            1940642008,
            1398944049,
            1059722517,
            201851908,
            1385547719,
            1699095331,
            1587397571,
            674240536,
            2704774806,
            252314885,
            3039795866,
            151914247,
            908333586,
            2602270848,
            1038082786,
            651029483,
            1766729511,
            3447698098,
            2682942837,
            454166793,
            2652734339,
            1951935532,
            775166490,
            758520603,
            3000790638,
            4004797018,
            4217086112,
            4137964114,
            1299594043,
            1639438038,
            3464344499,
            2068982057,
            1054729187,
            1901997871,
            2534638724,
            4121318227,
            1757008337,
            0,
            750906861,
            1614815264,
            535035132,
            3363418545,
            3988151131,
            3201591914,
            1183697867,
            3647454910,
            1265776953,
            3734260298,
            3566750796,
            3903871064,
            1250283471,
            1807470800,
            717615087,
            3847203498,
            384695291,
            3313910595,
            3617213773,
            1432761139,
            2484176261,
            3481945413,
            283769337,
            100925954,
            2180939647,
            4037038160,
            1148730428,
            3123027871,
            3813386408,
            4087501137,
            4267549603,
            3229630528,
            2315620239,
            2906624658,
            3156319645,
            1215313976,
            82966005,
            3747855548,
            3245848246,
            1974459098,
            1665278241,
            807407632,
            451280895,
            251524083,
            1841287890,
            1283575245,
            337120268,
            891687699,
            801369324,
            3787349855,
            2721421207,
            3431482436,
            959321879,
            1469301956,
            4065699751,
            2197585534,
            1199193405,
            2898814052,
            3887750493,
            724703513,
            2514908019,
            2696962144,
            2551808385,
            3516813135,
            2141445340,
            1715741218,
            2119445034,
            2872807568,
            2198571144,
            3398190662,
            700968686,
            3547052216,
            1009259540,
            2041044702,
            3803995742,
            487983883,
            1991105499,
            1004265696,
            1449407026,
            1316239930,
            504629770,
            3683797321,
            168560134,
            1816667172,
            3837287516,
            1570751170,
            1857934291,
            4014189740,
            2797888098,
            2822345105,
            2754712981,
            936633572,
            2347923833,
            852879335,
            1133234376,
            1500395319,
            3084545389,
            2348912013,
            1689376213,
            3533459022,
            3762923945,
            3034082412,
            4205598294,
            133428468,
            634383082,
            2949277029,
            2398386810,
            3913789102,
            403703816,
            3580869306,
            2297460856,
            1867130149,
            1918643758,
            607656988,
            4049053350,
            3346248884,
            1368901318,
            600565992,
            2090982877,
            2632479860,
            557719327,
            3717614411,
            3697393085,
            2249034635,
            2232388234,
            2430627952,
            1115438654,
            3295786421,
            2865522278,
            3633334344,
            84280067,
            33027830,
            303828494,
            2747425121,
            1600795957,
            4188952407,
            3496589753,
            2434238086,
            1486471617,
            658119965,
            3106381470,
            953803233,
            334231800,
            3005978776,
            857870609,
            3151128937,
            1890179545,
            2298973838,
            2805175444,
            3056442267,
            574365214,
            2450884487,
            550103529,
            1233637070,
            4289353045,
            2018519080,
            2057691103,
            2399374476,
            4166623649,
            2148108681,
            387583245,
            3664101311,
            836232934,
            3330556482,
            3100665960,
            3280093505,
            2955516313,
            2002398509,
            287182607,
            3413881008,
            4238890068,
            3597515707,
            975967766
        ];
        var T3 = [
            1671808611,
            2089089148,
            2006576759,
            2072901243,
            4061003762,
            1807603307,
            1873927791,
            3310653893,
            810573872,
            16974337,
            1739181671,
            729634347,
            4263110654,
            3613570519,
            2883997099,
            1989864566,
            3393556426,
            2191335298,
            3376449993,
            2106063485,
            4195741690,
            1508618841,
            1204391495,
            4027317232,
            2917941677,
            3563566036,
            2734514082,
            2951366063,
            2629772188,
            2767672228,
            1922491506,
            3227229120,
            3082974647,
            4246528509,
            2477669779,
            644500518,
            911895606,
            1061256767,
            4144166391,
            3427763148,
            878471220,
            2784252325,
            3845444069,
            4043897329,
            1905517169,
            3631459288,
            827548209,
            356461077,
            67897348,
            3344078279,
            593839651,
            3277757891,
            405286936,
            2527147926,
            84871685,
            2595565466,
            118033927,
            305538066,
            2157648768,
            3795705826,
            3945188843,
            661212711,
            2999812018,
            1973414517,
            152769033,
            2208177539,
            745822252,
            439235610,
            455947803,
            1857215598,
            1525593178,
            2700827552,
            1391895634,
            994932283,
            3596728278,
            3016654259,
            695947817,
            3812548067,
            795958831,
            2224493444,
            1408607827,
            3513301457,
            0,
            3979133421,
            543178784,
            4229948412,
            2982705585,
            1542305371,
            1790891114,
            3410398667,
            3201918910,
            961245753,
            1256100938,
            1289001036,
            1491644504,
            3477767631,
            3496721360,
            4012557807,
            2867154858,
            4212583931,
            1137018435,
            1305975373,
            861234739,
            2241073541,
            1171229253,
            4178635257,
            33948674,
            2139225727,
            1357946960,
            1011120188,
            2679776671,
            2833468328,
            1374921297,
            2751356323,
            1086357568,
            2408187279,
            2460827538,
            2646352285,
            944271416,
            4110742005,
            3168756668,
            3066132406,
            3665145818,
            560153121,
            271589392,
            4279952895,
            4077846003,
            3530407890,
            3444343245,
            202643468,
            322250259,
            3962553324,
            1608629855,
            2543990167,
            1154254916,
            389623319,
            3294073796,
            2817676711,
            2122513534,
            1028094525,
            1689045092,
            1575467613,
            422261273,
            1939203699,
            1621147744,
            2174228865,
            1339137615,
            3699352540,
            577127458,
            712922154,
            2427141008,
            2290289544,
            1187679302,
            3995715566,
            3100863416,
            339486740,
            3732514782,
            1591917662,
            186455563,
            3681988059,
            3762019296,
            844522546,
            978220090,
            169743370,
            1239126601,
            101321734,
            611076132,
            1558493276,
            3260915650,
            3547250131,
            2901361580,
            1655096418,
            2443721105,
            2510565781,
            3828863972,
            2039214713,
            3878868455,
            3359869896,
            928607799,
            1840765549,
            2374762893,
            3580146133,
            1322425422,
            2850048425,
            1823791212,
            1459268694,
            4094161908,
            3928346602,
            1706019429,
            2056189050,
            2934523822,
            135794696,
            3134549946,
            2022240376,
            628050469,
            779246638,
            472135708,
            2800834470,
            3032970164,
            3327236038,
            3894660072,
            3715932637,
            1956440180,
            522272287,
            1272813131,
            3185336765,
            2340818315,
            2323976074,
            1888542832,
            1044544574,
            3049550261,
            1722469478,
            1222152264,
            50660867,
            4127324150,
            236067854,
            1638122081,
            895445557,
            1475980887,
            3117443513,
            2257655686,
            3243809217,
            489110045,
            2662934430,
            3778599393,
            4162055160,
            2561878936,
            288563729,
            1773916777,
            3648039385,
            2391345038,
            2493985684,
            2612407707,
            505560094,
            2274497927,
            3911240169,
            3460925390,
            1442818645,
            678973480,
            3749357023,
            2358182796,
            2717407649,
            2306869641,
            219617805,
            3218761151,
            3862026214,
            1120306242,
            1756942440,
            1103331905,
            2578459033,
            762796589,
            252780047,
            2966125488,
            1425844308,
            3151392187,
            372911126
        ];
        var T4 = [
            1667474886,
            2088535288,
            2004326894,
            2071694838,
            4075949567,
            1802223062,
            1869591006,
            3318043793,
            808472672,
            16843522,
            1734846926,
            724270422,
            4278065639,
            3621216949,
            2880169549,
            1987484396,
            3402253711,
            2189597983,
            3385409673,
            2105378810,
            4210693615,
            1499065266,
            1195886990,
            4042263547,
            2913856577,
            3570689971,
            2728590687,
            2947541573,
            2627518243,
            2762274643,
            1920112356,
            3233831835,
            3082273397,
            4261223649,
            2475929149,
            640051788,
            909531756,
            1061110142,
            4160160501,
            3435941763,
            875846760,
            2779116625,
            3857003729,
            4059105529,
            1903268834,
            3638064043,
            825316194,
            353713962,
            67374088,
            3351728789,
            589522246,
            3284360861,
            404236336,
            2526454071,
            84217610,
            2593830191,
            117901582,
            303183396,
            2155911963,
            3806477791,
            3958056653,
            656894286,
            2998062463,
            1970642922,
            151591698,
            2206440989,
            741110872,
            437923380,
            454765878,
            1852748508,
            1515908788,
            2694904667,
            1381168804,
            993742198,
            3604373943,
            3014905469,
            690584402,
            3823320797,
            791638366,
            2223281939,
            1398011302,
            3520161977,
            0,
            3991743681,
            538992704,
            4244381667,
            2981218425,
            1532751286,
            1785380564,
            3419096717,
            3200178535,
            960056178,
            1246420628,
            1280103576,
            1482221744,
            3486468741,
            3503319995,
            4025428677,
            2863326543,
            4227536621,
            1128514950,
            1296947098,
            859002214,
            2240123921,
            1162203018,
            4193849577,
            33687044,
            2139062782,
            1347481760,
            1010582648,
            2678045221,
            2829640523,
            1364325282,
            2745433693,
            1077985408,
            2408548869,
            2459086143,
            2644360225,
            943212656,
            4126475505,
            3166494563,
            3065430391,
            3671750063,
            555836226,
            269496352,
            4294908645,
            4092792573,
            3537006015,
            3452783745,
            202118168,
            320025894,
            3974901699,
            1600119230,
            2543297077,
            1145359496,
            387397934,
            3301201811,
            2812801621,
            2122220284,
            1027426170,
            1684319432,
            1566435258,
            421079858,
            1936954854,
            1616945344,
            2172753945,
            1330631070,
            3705438115,
            572679748,
            707427924,
            2425400123,
            2290647819,
            1179044492,
            4008585671,
            3099120491,
            336870440,
            3739122087,
            1583276732,
            185277718,
            3688593069,
            3772791771,
            842159716,
            976899700,
            168435220,
            1229577106,
            101059084,
            606366792,
            1549591736,
            3267517855,
            3553849021,
            2897014595,
            1650632388,
            2442242105,
            2509612081,
            3840161747,
            2038008818,
            3890688725,
            3368567691,
            926374254,
            1835907034,
            2374863873,
            3587531953,
            1313788572,
            2846482505,
            1819063512,
            1448540844,
            4109633523,
            3941213647,
            1701162954,
            2054852340,
            2930698567,
            134748176,
            3132806511,
            2021165296,
            623210314,
            774795868,
            471606328,
            2795958615,
            3031746419,
            3334885783,
            3907527627,
            3722280097,
            1953799400,
            522133822,
            1263263126,
            3183336545,
            2341176845,
            2324333839,
            1886425312,
            1044267644,
            3048588401,
            1718004428,
            1212733584,
            50529542,
            4143317495,
            235803164,
            1633788866,
            892690282,
            1465383342,
            3115962473,
            2256965911,
            3250673817,
            488449850,
            2661202215,
            3789633753,
            4177007595,
            2560144171,
            286339874,
            1768537042,
            3654906025,
            2391705863,
            2492770099,
            2610673197,
            505291324,
            2273808917,
            3924369609,
            3469625735,
            1431699370,
            673740880,
            3755965093,
            2358021891,
            2711746649,
            2307489801,
            218961690,
            3217021541,
            3873845719,
            1111672452,
            1751693520,
            1094828930,
            2576986153,
            757954394,
            252645662,
            2964376443,
            1414855848,
            3149649517,
            370555436
        ];
        var T5 = [
            1374988112,
            2118214995,
            437757123,
            975658646,
            1001089995,
            530400753,
            2902087851,
            1273168787,
            540080725,
            2910219766,
            2295101073,
            4110568485,
            1340463100,
            3307916247,
            641025152,
            3043140495,
            3736164937,
            632953703,
            1172967064,
            1576976609,
            3274667266,
            2169303058,
            2370213795,
            1809054150,
            59727847,
            361929877,
            3211623147,
            2505202138,
            3569255213,
            1484005843,
            1239443753,
            2395588676,
            1975683434,
            4102977912,
            2572697195,
            666464733,
            3202437046,
            4035489047,
            3374361702,
            2110667444,
            1675577880,
            3843699074,
            2538681184,
            1649639237,
            2976151520,
            3144396420,
            4269907996,
            4178062228,
            1883793496,
            2403728665,
            2497604743,
            1383856311,
            2876494627,
            1917518562,
            3810496343,
            1716890410,
            3001755655,
            800440835,
            2261089178,
            3543599269,
            807962610,
            599762354,
            33778362,
            3977675356,
            2328828971,
            2809771154,
            4077384432,
            1315562145,
            1708848333,
            101039829,
            3509871135,
            3299278474,
            875451293,
            2733856160,
            92987698,
            2767645557,
            193195065,
            1080094634,
            1584504582,
            3178106961,
            1042385657,
            2531067453,
            3711829422,
            1306967366,
            2438237621,
            1908694277,
            67556463,
            1615861247,
            429456164,
            3602770327,
            2302690252,
            1742315127,
            2968011453,
            126454664,
            3877198648,
            2043211483,
            2709260871,
            2084704233,
            4169408201,
            0,
            159417987,
            841739592,
            504459436,
            1817866830,
            4245618683,
            260388950,
            1034867998,
            908933415,
            168810852,
            1750902305,
            2606453969,
            607530554,
            202008497,
            2472011535,
            3035535058,
            463180190,
            2160117071,
            1641816226,
            1517767529,
            470948374,
            3801332234,
            3231722213,
            1008918595,
            303765277,
            235474187,
            4069246893,
            766945465,
            337553864,
            1475418501,
            2943682380,
            4003061179,
            2743034109,
            4144047775,
            1551037884,
            1147550661,
            1543208500,
            2336434550,
            3408119516,
            3069049960,
            3102011747,
            3610369226,
            1113818384,
            328671808,
            2227573024,
            2236228733,
            3535486456,
            2935566865,
            3341394285,
            496906059,
            3702665459,
            226906860,
            2009195472,
            733156972,
            2842737049,
            294930682,
            1206477858,
            2835123396,
            2700099354,
            1451044056,
            573804783,
            2269728455,
            3644379585,
            2362090238,
            2564033334,
            2801107407,
            2776292904,
            3669462566,
            1068351396,
            742039012,
            1350078989,
            1784663195,
            1417561698,
            4136440770,
            2430122216,
            775550814,
            2193862645,
            2673705150,
            1775276924,
            1876241833,
            3475313331,
            3366754619,
            270040487,
            3902563182,
            3678124923,
            3441850377,
            1851332852,
            3969562369,
            2203032232,
            3868552805,
            2868897406,
            566021896,
            4011190502,
            3135740889,
            1248802510,
            3936291284,
            699432150,
            832877231,
            708780849,
            3332740144,
            899835584,
            1951317047,
            4236429990,
            3767586992,
            866637845,
            4043610186,
            1106041591,
            2144161806,
            395441711,
            1984812685,
            1139781709,
            3433712980,
            3835036895,
            2664543715,
            1282050075,
            3240894392,
            1181045119,
            2640243204,
            25965917,
            4203181171,
            4211818798,
            3009879386,
            2463879762,
            3910161971,
            1842759443,
            2597806476,
            933301370,
            1509430414,
            3943906441,
            3467192302,
            3076639029,
            3776767469,
            2051518780,
            2631065433,
            1441952575,
            404016761,
            1942435775,
            1408749034,
            1610459739,
            3745345300,
            2017778566,
            3400528769,
            3110650942,
            941896748,
            3265478751,
            371049330,
            3168937228,
            675039627,
            4279080257,
            967311729,
            135050206,
            3635733660,
            1683407248,
            2076935265,
            3576870512,
            1215061108,
            3501741890
        ];
        var T6 = [
            1347548327,
            1400783205,
            3273267108,
            2520393566,
            3409685355,
            4045380933,
            2880240216,
            2471224067,
            1428173050,
            4138563181,
            2441661558,
            636813900,
            4233094615,
            3620022987,
            2149987652,
            2411029155,
            1239331162,
            1730525723,
            2554718734,
            3781033664,
            46346101,
            310463728,
            2743944855,
            3328955385,
            3875770207,
            2501218972,
            3955191162,
            3667219033,
            768917123,
            3545789473,
            692707433,
            1150208456,
            1786102409,
            2029293177,
            1805211710,
            3710368113,
            3065962831,
            401639597,
            1724457132,
            3028143674,
            409198410,
            2196052529,
            1620529459,
            1164071807,
            3769721975,
            2226875310,
            486441376,
            2499348523,
            1483753576,
            428819965,
            2274680428,
            3075636216,
            598438867,
            3799141122,
            1474502543,
            711349675,
            129166120,
            53458370,
            2592523643,
            2782082824,
            4063242375,
            2988687269,
            3120694122,
            1559041666,
            730517276,
            2460449204,
            4042459122,
            2706270690,
            3446004468,
            3573941694,
            533804130,
            2328143614,
            2637442643,
            2695033685,
            839224033,
            1973745387,
            957055980,
            2856345839,
            106852767,
            1371368976,
            4181598602,
            1033297158,
            2933734917,
            1179510461,
            3046200461,
            91341917,
            1862534868,
            4284502037,
            605657339,
            2547432937,
            3431546947,
            2003294622,
            3182487618,
            2282195339,
            954669403,
            3682191598,
            1201765386,
            3917234703,
            3388507166,
            0,
            2198438022,
            1211247597,
            2887651696,
            1315723890,
            4227665663,
            1443857720,
            507358933,
            657861945,
            1678381017,
            560487590,
            3516619604,
            975451694,
            2970356327,
            261314535,
            3535072918,
            2652609425,
            1333838021,
            2724322336,
            1767536459,
            370938394,
            182621114,
            3854606378,
            1128014560,
            487725847,
            185469197,
            2918353863,
            3106780840,
            3356761769,
            2237133081,
            1286567175,
            3152976349,
            4255350624,
            2683765030,
            3160175349,
            3309594171,
            878443390,
            1988838185,
            3704300486,
            1756818940,
            1673061617,
            3403100636,
            272786309,
            1075025698,
            545572369,
            2105887268,
            4174560061,
            296679730,
            1841768865,
            1260232239,
            4091327024,
            3960309330,
            3497509347,
            1814803222,
            2578018489,
            4195456072,
            575138148,
            3299409036,
            446754879,
            3629546796,
            4011996048,
            3347532110,
            3252238545,
            4270639778,
            915985419,
            3483825537,
            681933534,
            651868046,
            2755636671,
            3828103837,
            223377554,
            2607439820,
            1649704518,
            3270937875,
            3901806776,
            1580087799,
            4118987695,
            3198115200,
            2087309459,
            2842678573,
            3016697106,
            1003007129,
            2802849917,
            1860738147,
            2077965243,
            164439672,
            4100872472,
            32283319,
            2827177882,
            1709610350,
            2125135846,
            136428751,
            3874428392,
            3652904859,
            3460984630,
            3572145929,
            3593056380,
            2939266226,
            824852259,
            818324884,
            3224740454,
            930369212,
            2801566410,
            2967507152,
            355706840,
            1257309336,
            4148292826,
            243256656,
            790073846,
            2373340630,
            1296297904,
            1422699085,
            3756299780,
            3818836405,
            457992840,
            3099667487,
            2135319889,
            77422314,
            1560382517,
            1945798516,
            788204353,
            1521706781,
            1385356242,
            870912086,
            325965383,
            2358957921,
            2050466060,
            2388260884,
            2313884476,
            4006521127,
            901210569,
            3990953189,
            1014646705,
            1503449823,
            1062597235,
            2031621326,
            3212035895,
            3931371469,
            1533017514,
            350174575,
            2256028891,
            2177544179,
            1052338372,
            741876788,
            1606591296,
            1914052035,
            213705253,
            2334669897,
            1107234197,
            1899603969,
            3725069491,
            2631447780,
            2422494913,
            1635502980,
            1893020342,
            1950903388,
            1120974935
        ];
        var T7 = [
            2807058932,
            1699970625,
            2764249623,
            1586903591,
            1808481195,
            1173430173,
            1487645946,
            59984867,
            4199882800,
            1844882806,
            1989249228,
            1277555970,
            3623636965,
            3419915562,
            1149249077,
            2744104290,
            1514790577,
            459744698,
            244860394,
            3235995134,
            1963115311,
            4027744588,
            2544078150,
            4190530515,
            1608975247,
            2627016082,
            2062270317,
            1507497298,
            2200818878,
            567498868,
            1764313568,
            3359936201,
            2305455554,
            2037970062,
            1047239e3,
            1910319033,
            1337376481,
            2904027272,
            2892417312,
            984907214,
            1243112415,
            830661914,
            861968209,
            2135253587,
            2011214180,
            2927934315,
            2686254721,
            731183368,
            1750626376,
            4246310725,
            1820824798,
            4172763771,
            3542330227,
            48394827,
            2404901663,
            2871682645,
            671593195,
            3254988725,
            2073724613,
            145085239,
            2280796200,
            2779915199,
            1790575107,
            2187128086,
            472615631,
            3029510009,
            4075877127,
            3802222185,
            4107101658,
            3201631749,
            1646252340,
            4270507174,
            1402811438,
            1436590835,
            3778151818,
            3950355702,
            3963161475,
            4020912224,
            2667994737,
            273792366,
            2331590177,
            104699613,
            95345982,
            3175501286,
            2377486676,
            1560637892,
            3564045318,
            369057872,
            4213447064,
            3919042237,
            1137477952,
            2658625497,
            1119727848,
            2340947849,
            1530455833,
            4007360968,
            172466556,
            266959938,
            516552836,
            0,
            2256734592,
            3980931627,
            1890328081,
            1917742170,
            4294704398,
            945164165,
            3575528878,
            958871085,
            3647212047,
            2787207260,
            1423022939,
            775562294,
            1739656202,
            3876557655,
            2530391278,
            2443058075,
            3310321856,
            547512796,
            1265195639,
            437656594,
            3121275539,
            719700128,
            3762502690,
            387781147,
            218828297,
            3350065803,
            2830708150,
            2848461854,
            428169201,
            122466165,
            3720081049,
            1627235199,
            648017665,
            4122762354,
            1002783846,
            2117360635,
            695634755,
            3336358691,
            4234721005,
            4049844452,
            3704280881,
            2232435299,
            574624663,
            287343814,
            612205898,
            1039717051,
            840019705,
            2708326185,
            793451934,
            821288114,
            1391201670,
            3822090177,
            376187827,
            3113855344,
            1224348052,
            1679968233,
            2361698556,
            1058709744,
            752375421,
            2431590963,
            1321699145,
            3519142200,
            2734591178,
            188127444,
            2177869557,
            3727205754,
            2384911031,
            3215212461,
            2648976442,
            2450346104,
            3432737375,
            1180849278,
            331544205,
            3102249176,
            4150144569,
            2952102595,
            2159976285,
            2474404304,
            766078933,
            313773861,
            2570832044,
            2108100632,
            1668212892,
            3145456443,
            2013908262,
            418672217,
            3070356634,
            2594734927,
            1852171925,
            3867060991,
            3473416636,
            3907448597,
            2614737639,
            919489135,
            164948639,
            2094410160,
            2997825956,
            590424639,
            2486224549,
            1723872674,
            3157750862,
            3399941250,
            3501252752,
            3625268135,
            2555048196,
            3673637356,
            1343127501,
            4130281361,
            3599595085,
            2957853679,
            1297403050,
            81781910,
            3051593425,
            2283490410,
            532201772,
            1367295589,
            3926170974,
            895287692,
            1953757831,
            1093597963,
            492483431,
            3528626907,
            1446242576,
            1192455638,
            1636604631,
            209336225,
            344873464,
            1015671571,
            669961897,
            3375740769,
            3857572124,
            2973530695,
            3747192018,
            1933530610,
            3464042516,
            935293895,
            3454686199,
            2858115069,
            1863638845,
            3683022916,
            4085369519,
            3292445032,
            875313188,
            1080017571,
            3279033885,
            621591778,
            1233856572,
            2504130317,
            24197544,
            3017672716,
            3835484340,
            3247465558,
            2220981195,
            3060847922,
            1551124588,
            1463996600
        ];
        var T8 = [
            4104605777,
            1097159550,
            396673818,
            660510266,
            2875968315,
            2638606623,
            4200115116,
            3808662347,
            821712160,
            1986918061,
            3430322568,
            38544885,
            3856137295,
            718002117,
            893681702,
            1654886325,
            2975484382,
            3122358053,
            3926825029,
            4274053469,
            796197571,
            1290801793,
            1184342925,
            3556361835,
            2405426947,
            2459735317,
            1836772287,
            1381620373,
            3196267988,
            1948373848,
            3764988233,
            3385345166,
            3263785589,
            2390325492,
            1480485785,
            3111247143,
            3780097726,
            2293045232,
            548169417,
            3459953789,
            3746175075,
            439452389,
            1362321559,
            1400849762,
            1685577905,
            1806599355,
            2174754046,
            137073913,
            1214797936,
            1174215055,
            3731654548,
            2079897426,
            1943217067,
            1258480242,
            529487843,
            1437280870,
            3945269170,
            3049390895,
            3313212038,
            923313619,
            679998e3,
            3215307299,
            57326082,
            377642221,
            3474729866,
            2041877159,
            133361907,
            1776460110,
            3673476453,
            96392454,
            878845905,
            2801699524,
            777231668,
            4082475170,
            2330014213,
            4142626212,
            2213296395,
            1626319424,
            1906247262,
            1846563261,
            562755902,
            3708173718,
            1040559837,
            3871163981,
            1418573201,
            3294430577,
            114585348,
            1343618912,
            2566595609,
            3186202582,
            1078185097,
            3651041127,
            3896688048,
            2307622919,
            425408743,
            3371096953,
            2081048481,
            1108339068,
            2216610296,
            0,
            2156299017,
            736970802,
            292596766,
            1517440620,
            251657213,
            2235061775,
            2933202493,
            758720310,
            265905162,
            1554391400,
            1532285339,
            908999204,
            174567692,
            1474760595,
            4002861748,
            2610011675,
            3234156416,
            3693126241,
            2001430874,
            303699484,
            2478443234,
            2687165888,
            585122620,
            454499602,
            151849742,
            2345119218,
            3064510765,
            514443284,
            4044981591,
            1963412655,
            2581445614,
            2137062819,
            19308535,
            1928707164,
            1715193156,
            4219352155,
            1126790795,
            600235211,
            3992742070,
            3841024952,
            836553431,
            1669664834,
            2535604243,
            3323011204,
            1243905413,
            3141400786,
            4180808110,
            698445255,
            2653899549,
            2989552604,
            2253581325,
            3252932727,
            3004591147,
            1891211689,
            2487810577,
            3915653703,
            4237083816,
            4030667424,
            2100090966,
            865136418,
            1229899655,
            953270745,
            3399679628,
            3557504664,
            4118925222,
            2061379749,
            3079546586,
            2915017791,
            983426092,
            2022837584,
            1607244650,
            2118541908,
            2366882550,
            3635996816,
            972512814,
            3283088770,
            1568718495,
            3499326569,
            3576539503,
            621982671,
            2895723464,
            410887952,
            2623762152,
            1002142683,
            645401037,
            1494807662,
            2595684844,
            1335535747,
            2507040230,
            4293295786,
            3167684641,
            367585007,
            3885750714,
            1865862730,
            2668221674,
            2960971305,
            2763173681,
            1059270954,
            2777952454,
            2724642869,
            1320957812,
            2194319100,
            2429595872,
            2815956275,
            77089521,
            3973773121,
            3444575871,
            2448830231,
            1305906550,
            4021308739,
            2857194700,
            2516901860,
            3518358430,
            1787304780,
            740276417,
            1699839814,
            1592394909,
            2352307457,
            2272556026,
            188821243,
            1729977011,
            3687994002,
            274084841,
            3594982253,
            3613494426,
            2701949495,
            4162096729,
            322734571,
            2837966542,
            1640576439,
            484830689,
            1202797690,
            3537852828,
            4067639125,
            349075736,
            3342319475,
            4157467219,
            4255800159,
            1030690015,
            1155237496,
            2951971274,
            1757691577,
            607398968,
            2738905026,
            499347990,
            3794078908,
            1011452712,
            227885567,
            2818666809,
            213114376,
            3034881240,
            1455525988,
            3414450555,
            850817237,
            1817998408,
            3092726480
        ];
        var U1 = [
            0,
            235474187,
            470948374,
            303765277,
            941896748,
            908933415,
            607530554,
            708780849,
            1883793496,
            2118214995,
            1817866830,
            1649639237,
            1215061108,
            1181045119,
            1417561698,
            1517767529,
            3767586992,
            4003061179,
            4236429990,
            4069246893,
            3635733660,
            3602770327,
            3299278474,
            3400528769,
            2430122216,
            2664543715,
            2362090238,
            2193862645,
            2835123396,
            2801107407,
            3035535058,
            3135740889,
            3678124923,
            3576870512,
            3341394285,
            3374361702,
            3810496343,
            3977675356,
            4279080257,
            4043610186,
            2876494627,
            2776292904,
            3076639029,
            3110650942,
            2472011535,
            2640243204,
            2403728665,
            2169303058,
            1001089995,
            899835584,
            666464733,
            699432150,
            59727847,
            226906860,
            530400753,
            294930682,
            1273168787,
            1172967064,
            1475418501,
            1509430414,
            1942435775,
            2110667444,
            1876241833,
            1641816226,
            2910219766,
            2743034109,
            2976151520,
            3211623147,
            2505202138,
            2606453969,
            2302690252,
            2269728455,
            3711829422,
            3543599269,
            3240894392,
            3475313331,
            3843699074,
            3943906441,
            4178062228,
            4144047775,
            1306967366,
            1139781709,
            1374988112,
            1610459739,
            1975683434,
            2076935265,
            1775276924,
            1742315127,
            1034867998,
            866637845,
            566021896,
            800440835,
            92987698,
            193195065,
            429456164,
            395441711,
            1984812685,
            2017778566,
            1784663195,
            1683407248,
            1315562145,
            1080094634,
            1383856311,
            1551037884,
            101039829,
            135050206,
            437757123,
            337553864,
            1042385657,
            807962610,
            573804783,
            742039012,
            2531067453,
            2564033334,
            2328828971,
            2227573024,
            2935566865,
            2700099354,
            3001755655,
            3168937228,
            3868552805,
            3902563182,
            4203181171,
            4102977912,
            3736164937,
            3501741890,
            3265478751,
            3433712980,
            1106041591,
            1340463100,
            1576976609,
            1408749034,
            2043211483,
            2009195472,
            1708848333,
            1809054150,
            832877231,
            1068351396,
            766945465,
            599762354,
            159417987,
            126454664,
            361929877,
            463180190,
            2709260871,
            2943682380,
            3178106961,
            3009879386,
            2572697195,
            2538681184,
            2236228733,
            2336434550,
            3509871135,
            3745345300,
            3441850377,
            3274667266,
            3910161971,
            3877198648,
            4110568485,
            4211818798,
            2597806476,
            2497604743,
            2261089178,
            2295101073,
            2733856160,
            2902087851,
            3202437046,
            2968011453,
            3936291284,
            3835036895,
            4136440770,
            4169408201,
            3535486456,
            3702665459,
            3467192302,
            3231722213,
            2051518780,
            1951317047,
            1716890410,
            1750902305,
            1113818384,
            1282050075,
            1584504582,
            1350078989,
            168810852,
            67556463,
            371049330,
            404016761,
            841739592,
            1008918595,
            775550814,
            540080725,
            3969562369,
            3801332234,
            4035489047,
            4269907996,
            3569255213,
            3669462566,
            3366754619,
            3332740144,
            2631065433,
            2463879762,
            2160117071,
            2395588676,
            2767645557,
            2868897406,
            3102011747,
            3069049960,
            202008497,
            33778362,
            270040487,
            504459436,
            875451293,
            975658646,
            675039627,
            641025152,
            2084704233,
            1917518562,
            1615861247,
            1851332852,
            1147550661,
            1248802510,
            1484005843,
            1451044056,
            933301370,
            967311729,
            733156972,
            632953703,
            260388950,
            25965917,
            328671808,
            496906059,
            1206477858,
            1239443753,
            1543208500,
            1441952575,
            2144161806,
            1908694277,
            1675577880,
            1842759443,
            3610369226,
            3644379585,
            3408119516,
            3307916247,
            4011190502,
            3776767469,
            4077384432,
            4245618683,
            2809771154,
            2842737049,
            3144396420,
            3043140495,
            2673705150,
            2438237621,
            2203032232,
            2370213795
        ];
        var U2 = [
            0,
            185469197,
            370938394,
            487725847,
            741876788,
            657861945,
            975451694,
            824852259,
            1483753576,
            1400783205,
            1315723890,
            1164071807,
            1950903388,
            2135319889,
            1649704518,
            1767536459,
            2967507152,
            3152976349,
            2801566410,
            2918353863,
            2631447780,
            2547432937,
            2328143614,
            2177544179,
            3901806776,
            3818836405,
            4270639778,
            4118987695,
            3299409036,
            3483825537,
            3535072918,
            3652904859,
            2077965243,
            1893020342,
            1841768865,
            1724457132,
            1474502543,
            1559041666,
            1107234197,
            1257309336,
            598438867,
            681933534,
            901210569,
            1052338372,
            261314535,
            77422314,
            428819965,
            310463728,
            3409685355,
            3224740454,
            3710368113,
            3593056380,
            3875770207,
            3960309330,
            4045380933,
            4195456072,
            2471224067,
            2554718734,
            2237133081,
            2388260884,
            3212035895,
            3028143674,
            2842678573,
            2724322336,
            4138563181,
            4255350624,
            3769721975,
            3955191162,
            3667219033,
            3516619604,
            3431546947,
            3347532110,
            2933734917,
            2782082824,
            3099667487,
            3016697106,
            2196052529,
            2313884476,
            2499348523,
            2683765030,
            1179510461,
            1296297904,
            1347548327,
            1533017514,
            1786102409,
            1635502980,
            2087309459,
            2003294622,
            507358933,
            355706840,
            136428751,
            53458370,
            839224033,
            957055980,
            605657339,
            790073846,
            2373340630,
            2256028891,
            2607439820,
            2422494913,
            2706270690,
            2856345839,
            3075636216,
            3160175349,
            3573941694,
            3725069491,
            3273267108,
            3356761769,
            4181598602,
            4063242375,
            4011996048,
            3828103837,
            1033297158,
            915985419,
            730517276,
            545572369,
            296679730,
            446754879,
            129166120,
            213705253,
            1709610350,
            1860738147,
            1945798516,
            2029293177,
            1239331162,
            1120974935,
            1606591296,
            1422699085,
            4148292826,
            4233094615,
            3781033664,
            3931371469,
            3682191598,
            3497509347,
            3446004468,
            3328955385,
            2939266226,
            2755636671,
            3106780840,
            2988687269,
            2198438022,
            2282195339,
            2501218972,
            2652609425,
            1201765386,
            1286567175,
            1371368976,
            1521706781,
            1805211710,
            1620529459,
            2105887268,
            1988838185,
            533804130,
            350174575,
            164439672,
            46346101,
            870912086,
            954669403,
            636813900,
            788204353,
            2358957921,
            2274680428,
            2592523643,
            2441661558,
            2695033685,
            2880240216,
            3065962831,
            3182487618,
            3572145929,
            3756299780,
            3270937875,
            3388507166,
            4174560061,
            4091327024,
            4006521127,
            3854606378,
            1014646705,
            930369212,
            711349675,
            560487590,
            272786309,
            457992840,
            106852767,
            223377554,
            1678381017,
            1862534868,
            1914052035,
            2031621326,
            1211247597,
            1128014560,
            1580087799,
            1428173050,
            32283319,
            182621114,
            401639597,
            486441376,
            768917123,
            651868046,
            1003007129,
            818324884,
            1503449823,
            1385356242,
            1333838021,
            1150208456,
            1973745387,
            2125135846,
            1673061617,
            1756818940,
            2970356327,
            3120694122,
            2802849917,
            2887651696,
            2637442643,
            2520393566,
            2334669897,
            2149987652,
            3917234703,
            3799141122,
            4284502037,
            4100872472,
            3309594171,
            3460984630,
            3545789473,
            3629546796,
            2050466060,
            1899603969,
            1814803222,
            1730525723,
            1443857720,
            1560382517,
            1075025698,
            1260232239,
            575138148,
            692707433,
            878443390,
            1062597235,
            243256656,
            91341917,
            409198410,
            325965383,
            3403100636,
            3252238545,
            3704300486,
            3620022987,
            3874428392,
            3990953189,
            4042459122,
            4227665663,
            2460449204,
            2578018489,
            2226875310,
            2411029155,
            3198115200,
            3046200461,
            2827177882,
            2743944855
        ];
        var U3 = [
            0,
            218828297,
            437656594,
            387781147,
            875313188,
            958871085,
            775562294,
            590424639,
            1750626376,
            1699970625,
            1917742170,
            2135253587,
            1551124588,
            1367295589,
            1180849278,
            1265195639,
            3501252752,
            3720081049,
            3399941250,
            3350065803,
            3835484340,
            3919042237,
            4270507174,
            4085369519,
            3102249176,
            3051593425,
            2734591178,
            2952102595,
            2361698556,
            2177869557,
            2530391278,
            2614737639,
            3145456443,
            3060847922,
            2708326185,
            2892417312,
            2404901663,
            2187128086,
            2504130317,
            2555048196,
            3542330227,
            3727205754,
            3375740769,
            3292445032,
            3876557655,
            3926170974,
            4246310725,
            4027744588,
            1808481195,
            1723872674,
            1910319033,
            2094410160,
            1608975247,
            1391201670,
            1173430173,
            1224348052,
            59984867,
            244860394,
            428169201,
            344873464,
            935293895,
            984907214,
            766078933,
            547512796,
            1844882806,
            1627235199,
            2011214180,
            2062270317,
            1507497298,
            1423022939,
            1137477952,
            1321699145,
            95345982,
            145085239,
            532201772,
            313773861,
            830661914,
            1015671571,
            731183368,
            648017665,
            3175501286,
            2957853679,
            2807058932,
            2858115069,
            2305455554,
            2220981195,
            2474404304,
            2658625497,
            3575528878,
            3625268135,
            3473416636,
            3254988725,
            3778151818,
            3963161475,
            4213447064,
            4130281361,
            3599595085,
            3683022916,
            3432737375,
            3247465558,
            3802222185,
            4020912224,
            4172763771,
            4122762354,
            3201631749,
            3017672716,
            2764249623,
            2848461854,
            2331590177,
            2280796200,
            2431590963,
            2648976442,
            104699613,
            188127444,
            472615631,
            287343814,
            840019705,
            1058709744,
            671593195,
            621591778,
            1852171925,
            1668212892,
            1953757831,
            2037970062,
            1514790577,
            1463996600,
            1080017571,
            1297403050,
            3673637356,
            3623636965,
            3235995134,
            3454686199,
            4007360968,
            3822090177,
            4107101658,
            4190530515,
            2997825956,
            3215212461,
            2830708150,
            2779915199,
            2256734592,
            2340947849,
            2627016082,
            2443058075,
            172466556,
            122466165,
            273792366,
            492483431,
            1047239e3,
            861968209,
            612205898,
            695634755,
            1646252340,
            1863638845,
            2013908262,
            1963115311,
            1446242576,
            1530455833,
            1277555970,
            1093597963,
            1636604631,
            1820824798,
            2073724613,
            1989249228,
            1436590835,
            1487645946,
            1337376481,
            1119727848,
            164948639,
            81781910,
            331544205,
            516552836,
            1039717051,
            821288114,
            669961897,
            719700128,
            2973530695,
            3157750862,
            2871682645,
            2787207260,
            2232435299,
            2283490410,
            2667994737,
            2450346104,
            3647212047,
            3564045318,
            3279033885,
            3464042516,
            3980931627,
            3762502690,
            4150144569,
            4199882800,
            3070356634,
            3121275539,
            2904027272,
            2686254721,
            2200818878,
            2384911031,
            2570832044,
            2486224549,
            3747192018,
            3528626907,
            3310321856,
            3359936201,
            3950355702,
            3867060991,
            4049844452,
            4234721005,
            1739656202,
            1790575107,
            2108100632,
            1890328081,
            1402811438,
            1586903591,
            1233856572,
            1149249077,
            266959938,
            48394827,
            369057872,
            418672217,
            1002783846,
            919489135,
            567498868,
            752375421,
            209336225,
            24197544,
            376187827,
            459744698,
            945164165,
            895287692,
            574624663,
            793451934,
            1679968233,
            1764313568,
            2117360635,
            1933530610,
            1343127501,
            1560637892,
            1243112415,
            1192455638,
            3704280881,
            3519142200,
            3336358691,
            3419915562,
            3907448597,
            3857572124,
            4075877127,
            4294704398,
            3029510009,
            3113855344,
            2927934315,
            2744104290,
            2159976285,
            2377486676,
            2594734927,
            2544078150
        ];
        var U4 = [
            0,
            151849742,
            303699484,
            454499602,
            607398968,
            758720310,
            908999204,
            1059270954,
            1214797936,
            1097159550,
            1517440620,
            1400849762,
            1817998408,
            1699839814,
            2118541908,
            2001430874,
            2429595872,
            2581445614,
            2194319100,
            2345119218,
            3034881240,
            3186202582,
            2801699524,
            2951971274,
            3635996816,
            3518358430,
            3399679628,
            3283088770,
            4237083816,
            4118925222,
            4002861748,
            3885750714,
            1002142683,
            850817237,
            698445255,
            548169417,
            529487843,
            377642221,
            227885567,
            77089521,
            1943217067,
            2061379749,
            1640576439,
            1757691577,
            1474760595,
            1592394909,
            1174215055,
            1290801793,
            2875968315,
            2724642869,
            3111247143,
            2960971305,
            2405426947,
            2253581325,
            2638606623,
            2487810577,
            3808662347,
            3926825029,
            4044981591,
            4162096729,
            3342319475,
            3459953789,
            3576539503,
            3693126241,
            1986918061,
            2137062819,
            1685577905,
            1836772287,
            1381620373,
            1532285339,
            1078185097,
            1229899655,
            1040559837,
            923313619,
            740276417,
            621982671,
            439452389,
            322734571,
            137073913,
            19308535,
            3871163981,
            4021308739,
            4104605777,
            4255800159,
            3263785589,
            3414450555,
            3499326569,
            3651041127,
            2933202493,
            2815956275,
            3167684641,
            3049390895,
            2330014213,
            2213296395,
            2566595609,
            2448830231,
            1305906550,
            1155237496,
            1607244650,
            1455525988,
            1776460110,
            1626319424,
            2079897426,
            1928707164,
            96392454,
            213114376,
            396673818,
            514443284,
            562755902,
            679998e3,
            865136418,
            983426092,
            3708173718,
            3557504664,
            3474729866,
            3323011204,
            4180808110,
            4030667424,
            3945269170,
            3794078908,
            2507040230,
            2623762152,
            2272556026,
            2390325492,
            2975484382,
            3092726480,
            2738905026,
            2857194700,
            3973773121,
            3856137295,
            4274053469,
            4157467219,
            3371096953,
            3252932727,
            3673476453,
            3556361835,
            2763173681,
            2915017791,
            3064510765,
            3215307299,
            2156299017,
            2307622919,
            2459735317,
            2610011675,
            2081048481,
            1963412655,
            1846563261,
            1729977011,
            1480485785,
            1362321559,
            1243905413,
            1126790795,
            878845905,
            1030690015,
            645401037,
            796197571,
            274084841,
            425408743,
            38544885,
            188821243,
            3613494426,
            3731654548,
            3313212038,
            3430322568,
            4082475170,
            4200115116,
            3780097726,
            3896688048,
            2668221674,
            2516901860,
            2366882550,
            2216610296,
            3141400786,
            2989552604,
            2837966542,
            2687165888,
            1202797690,
            1320957812,
            1437280870,
            1554391400,
            1669664834,
            1787304780,
            1906247262,
            2022837584,
            265905162,
            114585348,
            499347990,
            349075736,
            736970802,
            585122620,
            972512814,
            821712160,
            2595684844,
            2478443234,
            2293045232,
            2174754046,
            3196267988,
            3079546586,
            2895723464,
            2777952454,
            3537852828,
            3687994002,
            3234156416,
            3385345166,
            4142626212,
            4293295786,
            3841024952,
            3992742070,
            174567692,
            57326082,
            410887952,
            292596766,
            777231668,
            660510266,
            1011452712,
            893681702,
            1108339068,
            1258480242,
            1343618912,
            1494807662,
            1715193156,
            1865862730,
            1948373848,
            2100090966,
            2701949495,
            2818666809,
            3004591147,
            3122358053,
            2235061775,
            2352307457,
            2535604243,
            2653899549,
            3915653703,
            3764988233,
            4219352155,
            4067639125,
            3444575871,
            3294430577,
            3746175075,
            3594982253,
            836553431,
            953270745,
            600235211,
            718002117,
            367585007,
            484830689,
            133361907,
            251657213,
            2041877159,
            1891211689,
            1806599355,
            1654886325,
            1568718495,
            1418573201,
            1335535747,
            1184342925
        ];
        function convertToInt32(bytes) {
            var result = [];
            for(var i = 0; i < bytes.length; i += 4){
                result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
            }
            return result;
        }
        var AES2 = function(key) {
            if (!(this instanceof AES2)) {
                throw Error("AES must be instanitated with `new`");
            }
            Object.defineProperty(this, "key", {
                value: coerceArray(key, true)
            });
            this._prepare();
        };
        AES2.prototype._prepare = function() {
            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
                throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
            }
            this._Ke = [];
            this._Kd = [];
            for(var i = 0; i <= rounds; i++){
                this._Ke.push([
                    0,
                    0,
                    0,
                    0
                ]);
                this._Kd.push([
                    0,
                    0,
                    0,
                    0
                ]);
            }
            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;
            var tk = convertToInt32(this.key);
            var index;
            for(var i = 0; i < KC; i++){
                index = i >> 2;
                this._Ke[index][i % 4] = tk[i];
                this._Kd[rounds - index][i % 4] = tk[i];
            }
            var rconpointer = 0;
            var t = KC, tt;
            while(t < roundKeyCount){
                tt = tk[KC - 1];
                tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
                rconpointer += 1;
                if (KC != 8) {
                    for(var i = 1; i < KC; i++){
                        tk[i] ^= tk[i - 1];
                    }
                } else {
                    for(var i = 1; i < KC / 2; i++){
                        tk[i] ^= tk[i - 1];
                    }
                    tt = tk[KC / 2 - 1];
                    tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
                    for(var i = KC / 2 + 1; i < KC; i++){
                        tk[i] ^= tk[i - 1];
                    }
                }
                var i = 0, r, c;
                while(i < KC && t < roundKeyCount){
                    r = t >> 2;
                    c = t % 4;
                    this._Ke[r][c] = tk[i];
                    this._Kd[rounds - r][c] = tk[i++];
                    t++;
                }
            }
            for(var r = 1; r < rounds; r++){
                for(var c = 0; c < 4; c++){
                    tt = this._Kd[r][c];
                    this._Kd[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
                }
            }
        };
        AES2.prototype.encrypt = function(plaintext) {
            if (plaintext.length != 16) {
                throw new Error("invalid plaintext size (must be 16 bytes)");
            }
            var rounds = this._Ke.length - 1;
            var a = [
                0,
                0,
                0,
                0
            ];
            var t = convertToInt32(plaintext);
            for(var i = 0; i < 4; i++){
                t[i] ^= this._Ke[0][i];
            }
            for(var r = 1; r < rounds; r++){
                for(var i = 0; i < 4; i++){
                    a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ this._Ke[r][i];
                }
                t = a.slice();
            }
            var result = createArray(16), tt;
            for(var i = 0; i < 4; i++){
                tt = this._Ke[rounds][i];
                result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
                result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
                result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
                result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
            }
            return result;
        };
        AES2.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length != 16) {
                throw new Error("invalid ciphertext size (must be 16 bytes)");
            }
            var rounds = this._Kd.length - 1;
            var a = [
                0,
                0,
                0,
                0
            ];
            var t = convertToInt32(ciphertext);
            for(var i = 0; i < 4; i++){
                t[i] ^= this._Kd[0][i];
            }
            for(var r = 1; r < rounds; r++){
                for(var i = 0; i < 4; i++){
                    a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ this._Kd[r][i];
                }
                t = a.slice();
            }
            var result = createArray(16), tt;
            for(var i = 0; i < 4; i++){
                tt = this._Kd[rounds][i];
                result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
                result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
                result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
                result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
            }
            return result;
        };
        var ModeOfOperationECB = function(key) {
            if (!(this instanceof ModeOfOperationECB)) {
                throw Error("AES must be instanitated with `new`");
            }
            this.description = "Electronic Code Block";
            this.name = "ecb";
            this._aes = new AES2(key);
        };
        ModeOfOperationECB.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);
            if (plaintext.length % 16 !== 0) {
                throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
            }
            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);
            for(var i = 0; i < plaintext.length; i += 16){
                copyArray(plaintext, block, 0, i, i + 16);
                block = this._aes.encrypt(block);
                copyArray(block, ciphertext, i);
            }
            return ciphertext;
        };
        ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);
            if (ciphertext.length % 16 !== 0) {
                throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
            }
            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);
            for(var i = 0; i < ciphertext.length; i += 16){
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);
                copyArray(block, plaintext, i);
            }
            return plaintext;
        };
        var ModeOfOperationCBC = function(key, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
                throw Error("AES must be instanitated with `new`");
            }
            this.description = "Cipher Block Chaining";
            this.name = "cbc";
            if (!iv) {
                iv = createArray(16);
            } else if (iv.length != 16) {
                throw new Error("invalid initialation vector size (must be 16 bytes)");
            }
            this._lastCipherblock = coerceArray(iv, true);
            this._aes = new AES2(key);
        };
        ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);
            if (plaintext.length % 16 !== 0) {
                throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
            }
            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);
            for(var i = 0; i < plaintext.length; i += 16){
                copyArray(plaintext, block, 0, i, i + 16);
                for(var j = 0; j < 16; j++){
                    block[j] ^= this._lastCipherblock[j];
                }
                this._lastCipherblock = this._aes.encrypt(block);
                copyArray(this._lastCipherblock, ciphertext, i);
            }
            return ciphertext;
        };
        ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);
            if (ciphertext.length % 16 !== 0) {
                throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
            }
            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);
            for(var i = 0; i < ciphertext.length; i += 16){
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);
                for(var j = 0; j < 16; j++){
                    plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
                }
                copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
            }
            return plaintext;
        };
        var ModeOfOperationCFB = function(key, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
                throw Error("AES must be instanitated with `new`");
            }
            this.description = "Cipher Feedback";
            this.name = "cfb";
            if (!iv) {
                iv = createArray(16);
            } else if (iv.length != 16) {
                throw new Error("invalid initialation vector size (must be 16 size)");
            }
            if (!segmentSize) {
                segmentSize = 1;
            }
            this.segmentSize = segmentSize;
            this._shiftRegister = coerceArray(iv, true);
            this._aes = new AES2(key);
        };
        ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
            if (plaintext.length % this.segmentSize != 0) {
                throw new Error("invalid plaintext size (must be segmentSize bytes)");
            }
            var encrypted = coerceArray(plaintext, true);
            var xorSegment;
            for(var i = 0; i < encrypted.length; i += this.segmentSize){
                xorSegment = this._aes.encrypt(this._shiftRegister);
                for(var j = 0; j < this.segmentSize; j++){
                    encrypted[i + j] ^= xorSegment[j];
                }
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }
            return encrypted;
        };
        ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length % this.segmentSize != 0) {
                throw new Error("invalid ciphertext size (must be segmentSize bytes)");
            }
            var plaintext = coerceArray(ciphertext, true);
            var xorSegment;
            for(var i = 0; i < plaintext.length; i += this.segmentSize){
                xorSegment = this._aes.encrypt(this._shiftRegister);
                for(var j = 0; j < this.segmentSize; j++){
                    plaintext[i + j] ^= xorSegment[j];
                }
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }
            return plaintext;
        };
        var ModeOfOperationOFB = function(key, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
                throw Error("AES must be instanitated with `new`");
            }
            this.description = "Output Feedback";
            this.name = "ofb";
            if (!iv) {
                iv = createArray(16);
            } else if (iv.length != 16) {
                throw new Error("invalid initialation vector size (must be 16 bytes)");
            }
            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;
            this._aes = new AES2(key);
        };
        ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);
            for(var i = 0; i < encrypted.length; i++){
                if (this._lastPrecipherIndex === 16) {
                    this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                    this._lastPrecipherIndex = 0;
                }
                encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }
            return encrypted;
        };
        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
        var Counter2 = function(initialValue) {
            if (!(this instanceof Counter2)) {
                throw Error("Counter must be instanitated with `new`");
            }
            if (initialValue !== 0 && !initialValue) {
                initialValue = 1;
            }
            if (typeof initialValue === "number") {
                this._counter = createArray(16);
                this.setValue(initialValue);
            } else {
                this.setBytes(initialValue);
            }
        };
        Counter2.prototype.setValue = function(value) {
            if (typeof value !== "number" || parseInt(value) != value) {
                throw new Error("invalid counter value (must be an integer)");
            }
            for(var index = 15; index >= 0; --index){
                this._counter[index] = value % 256;
                value = value >> 8;
            }
        };
        Counter2.prototype.setBytes = function(bytes) {
            bytes = coerceArray(bytes, true);
            if (bytes.length != 16) {
                throw new Error("invalid counter bytes size (must be 16 bytes)");
            }
            this._counter = bytes;
        };
        Counter2.prototype.increment = function() {
            for(var i = 15; i >= 0; i--){
                if (this._counter[i] === 255) {
                    this._counter[i] = 0;
                } else {
                    this._counter[i]++;
                    break;
                }
            }
        };
        var ModeOfOperationCTR = function(key, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
                throw Error("AES must be instanitated with `new`");
            }
            this.description = "Counter";
            this.name = "ctr";
            if (!(counter instanceof Counter2)) {
                counter = new Counter2(counter);
            }
            this._counter = counter;
            this._remainingCounter = null;
            this._remainingCounterIndex = 16;
            this._aes = new AES2(key);
        };
        ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);
            for(var i = 0; i < encrypted.length; i++){
                if (this._remainingCounterIndex === 16) {
                    this._remainingCounter = this._aes.encrypt(this._counter._counter);
                    this._remainingCounterIndex = 0;
                    this._counter.increment();
                }
                encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
            }
            return encrypted;
        };
        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
        function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - data.length % 16;
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for(var i = data.length; i < result.length; i++){
                result[i] = padder;
            }
            return result;
        }
        function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) {
                throw new Error("PKCS#7 invalid length");
            }
            var padder = data[data.length - 1];
            if (padder > 16) {
                throw new Error("PKCS#7 padding byte out of range");
            }
            var length = data.length - padder;
            for(var i = 0; i < padder; i++){
                if (data[length + i] !== padder) {
                    throw new Error("PKCS#7 invalid padding byte");
                }
            }
            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
        }
        var aesjs = {
            AES: AES2,
            Counter: Counter2,
            ModeOfOperation: {
                ecb: ModeOfOperationECB,
                cbc: ModeOfOperationCBC,
                cfb: ModeOfOperationCFB,
                ofb: ModeOfOperationOFB,
                ctr: ModeOfOperationCTR
            },
            utils: {
                hex: convertHex,
                utf8: convertUtf8
            },
            padding: {
                pkcs7: {
                    pad: pkcs7pad,
                    strip: pkcs7strip
                }
            },
            _arrayTest: {
                coerceArray,
                createArray,
                copyArray
            }
        };
        {
            module.exports = aesjs;
        }
    })();
});
aesJs.AES;
aesJs.Counter;
aesJs.ModeOfOperation;
aesJs._arrayTest;
aesJs.padding;
aesJs.utils;
function createCommonjsModule6(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path, base) {
            return commonjsRequire6(path, base === void 0 || base === null ? module.path : base);
        }
    }, fn(module, module.exports), module.exports;
}
function commonjsRequire6() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var scrypt = createCommonjsModule6(function(module, exports) {
    (function(root) {
        function SHA256(m) {
            const K = new Uint32Array([
                1116352408,
                1899447441,
                3049323471,
                3921009573,
                961987163,
                1508970993,
                2453635748,
                2870763221,
                3624381080,
                310598401,
                607225278,
                1426881987,
                1925078388,
                2162078206,
                2614888103,
                3248222580,
                3835390401,
                4022224774,
                264347078,
                604807628,
                770255983,
                1249150122,
                1555081692,
                1996064986,
                2554220882,
                2821834349,
                2952996808,
                3210313671,
                3336571891,
                3584528711,
                113926993,
                338241895,
                666307205,
                773529912,
                1294757372,
                1396182291,
                1695183700,
                1986661051,
                2177026350,
                2456956037,
                2730485921,
                2820302411,
                3259730800,
                3345764771,
                3516065817,
                3600352804,
                4094571909,
                275423344,
                430227734,
                506948616,
                659060556,
                883997877,
                958139571,
                1322822218,
                1537002063,
                1747873779,
                1955562222,
                2024104815,
                2227730452,
                2361852424,
                2428436474,
                2756734187,
                3204031479,
                3329325298
            ]);
            let h0 = 1779033703, h1 = 3144134277, h2 = 1013904242, h3 = 2773480762;
            let h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;
            const w = new Uint32Array(64);
            function blocks(p2) {
                let off = 0, len = p2.length;
                while(len >= 64){
                    let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i2, j, t1, t2;
                    for(i2 = 0; i2 < 16; i2++){
                        j = off + i2 * 4;
                        w[i2] = (p2[j] & 255) << 24 | (p2[j + 1] & 255) << 16 | (p2[j + 2] & 255) << 8 | p2[j + 3] & 255;
                    }
                    for(i2 = 16; i2 < 64; i2++){
                        u = w[i2 - 2];
                        t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;
                        u = w[i2 - 15];
                        t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;
                        w[i2] = (t1 + w[i2 - 7] | 0) + (t2 + w[i2 - 16] | 0) | 0;
                    }
                    for(i2 = 0; i2 < 64; i2++){
                        t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i2] + w[i2] | 0) | 0) | 0;
                        t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1 | 0;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2 | 0;
                    }
                    h0 = h0 + a | 0;
                    h1 = h1 + b | 0;
                    h2 = h2 + c | 0;
                    h3 = h3 + d | 0;
                    h4 = h4 + e | 0;
                    h5 = h5 + f | 0;
                    h6 = h6 + g | 0;
                    h7 = h7 + h | 0;
                    off += 64;
                    len -= 64;
                }
            }
            blocks(m);
            let i, bytesLeft = m.length % 64, bitLenHi = m.length / 536870912 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p = m.slice(m.length - bytesLeft, m.length);
            p.push(128);
            for(i = bytesLeft + 1; i < numZeros; i++){
                p.push(0);
            }
            p.push(bitLenHi >>> 24 & 255);
            p.push(bitLenHi >>> 16 & 255);
            p.push(bitLenHi >>> 8 & 255);
            p.push(bitLenHi >>> 0 & 255);
            p.push(bitLenLo >>> 24 & 255);
            p.push(bitLenLo >>> 16 & 255);
            p.push(bitLenLo >>> 8 & 255);
            p.push(bitLenLo >>> 0 & 255);
            blocks(p);
            return [
                h0 >>> 24 & 255,
                h0 >>> 16 & 255,
                h0 >>> 8 & 255,
                h0 >>> 0 & 255,
                h1 >>> 24 & 255,
                h1 >>> 16 & 255,
                h1 >>> 8 & 255,
                h1 >>> 0 & 255,
                h2 >>> 24 & 255,
                h2 >>> 16 & 255,
                h2 >>> 8 & 255,
                h2 >>> 0 & 255,
                h3 >>> 24 & 255,
                h3 >>> 16 & 255,
                h3 >>> 8 & 255,
                h3 >>> 0 & 255,
                h4 >>> 24 & 255,
                h4 >>> 16 & 255,
                h4 >>> 8 & 255,
                h4 >>> 0 & 255,
                h5 >>> 24 & 255,
                h5 >>> 16 & 255,
                h5 >>> 8 & 255,
                h5 >>> 0 & 255,
                h6 >>> 24 & 255,
                h6 >>> 16 & 255,
                h6 >>> 8 & 255,
                h6 >>> 0 & 255,
                h7 >>> 24 & 255,
                h7 >>> 16 & 255,
                h7 >>> 8 & 255,
                h7 >>> 0 & 255
            ];
        }
        function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
            password = password.length <= 64 ? password : SHA256(password);
            const innerLen = 64 + salt.length + 4;
            const inner = new Array(innerLen);
            const outerKey = new Array(64);
            let i;
            let dk = [];
            for(i = 0; i < 64; i++){
                inner[i] = 54;
            }
            for(i = 0; i < password.length; i++){
                inner[i] ^= password[i];
            }
            for(i = 0; i < salt.length; i++){
                inner[64 + i] = salt[i];
            }
            for(i = innerLen - 4; i < innerLen; i++){
                inner[i] = 0;
            }
            for(i = 0; i < 64; i++)outerKey[i] = 92;
            for(i = 0; i < password.length; i++)outerKey[i] ^= password[i];
            function incrementCounter() {
                for(let i2 = innerLen - 1; i2 >= innerLen - 4; i2--){
                    inner[i2]++;
                    if (inner[i2] <= 255) return;
                    inner[i2] = 0;
                }
            }
            while(dkLen >= 32){
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
                dkLen -= 32;
            }
            if (dkLen > 0) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
            }
            return dk;
        }
        function blockmix_salsa8(BY, Yi, r, x, _X) {
            let i;
            arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
            for(i = 0; i < 2 * r; i++){
                blockxor(BY, i * 16, _X, 16);
                salsa20_8(_X, x);
                arraycopy(_X, 0, BY, Yi + i * 16, 16);
            }
            for(i = 0; i < r; i++){
                arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);
            }
            for(i = 0; i < r; i++){
                arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
            }
        }
        function R(a, b) {
            return a << b | a >>> 32 - b;
        }
        function salsa20_8(B, x) {
            arraycopy(B, 0, x, 0, 16);
            for(let i = 8; i > 0; i -= 2){
                x[4] ^= R(x[0] + x[12], 7);
                x[8] ^= R(x[4] + x[0], 9);
                x[12] ^= R(x[8] + x[4], 13);
                x[0] ^= R(x[12] + x[8], 18);
                x[9] ^= R(x[5] + x[1], 7);
                x[13] ^= R(x[9] + x[5], 9);
                x[1] ^= R(x[13] + x[9], 13);
                x[5] ^= R(x[1] + x[13], 18);
                x[14] ^= R(x[10] + x[6], 7);
                x[2] ^= R(x[14] + x[10], 9);
                x[6] ^= R(x[2] + x[14], 13);
                x[10] ^= R(x[6] + x[2], 18);
                x[3] ^= R(x[15] + x[11], 7);
                x[7] ^= R(x[3] + x[15], 9);
                x[11] ^= R(x[7] + x[3], 13);
                x[15] ^= R(x[11] + x[7], 18);
                x[1] ^= R(x[0] + x[3], 7);
                x[2] ^= R(x[1] + x[0], 9);
                x[3] ^= R(x[2] + x[1], 13);
                x[0] ^= R(x[3] + x[2], 18);
                x[6] ^= R(x[5] + x[4], 7);
                x[7] ^= R(x[6] + x[5], 9);
                x[4] ^= R(x[7] + x[6], 13);
                x[5] ^= R(x[4] + x[7], 18);
                x[11] ^= R(x[10] + x[9], 7);
                x[8] ^= R(x[11] + x[10], 9);
                x[9] ^= R(x[8] + x[11], 13);
                x[10] ^= R(x[9] + x[8], 18);
                x[12] ^= R(x[15] + x[14], 7);
                x[13] ^= R(x[12] + x[15], 9);
                x[14] ^= R(x[13] + x[12], 13);
                x[15] ^= R(x[14] + x[13], 18);
            }
            for(let i = 0; i < 16; ++i){
                B[i] += x[i];
            }
        }
        function blockxor(S, Si, D, len) {
            for(let i = 0; i < len; i++){
                D[i] ^= S[Si + i];
            }
        }
        function arraycopy(src, srcPos, dest, destPos, length) {
            while(length--){
                dest[destPos++] = src[srcPos++];
            }
        }
        function checkBufferish(o) {
            if (!o || typeof o.length !== "number") {
                return false;
            }
            for(let i = 0; i < o.length; i++){
                const v = o[i];
                if (typeof v !== "number" || v % 1 || v < 0 || v >= 256) {
                    return false;
                }
            }
            return true;
        }
        function ensureInteger(value, name) {
            if (typeof value !== "number" || value % 1) {
                throw new Error("invalid " + name);
            }
            return value;
        }
        function _scrypt(password, salt, N, r, p, dkLen, callback) {
            N = ensureInteger(N, "N");
            r = ensureInteger(r, "r");
            p = ensureInteger(p, "p");
            dkLen = ensureInteger(dkLen, "dkLen");
            if (N === 0 || (N & N - 1) !== 0) {
                throw new Error("N must be power of 2");
            }
            if (N > 2147483647 / 128 / r) {
                throw new Error("N too large");
            }
            if (r > 2147483647 / 128 / p) {
                throw new Error("r too large");
            }
            if (!checkBufferish(password)) {
                throw new Error("password must be an array or buffer");
            }
            password = Array.prototype.slice.call(password);
            if (!checkBufferish(salt)) {
                throw new Error("salt must be an array or buffer");
            }
            salt = Array.prototype.slice.call(salt);
            let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
            const B = new Uint32Array(p * 32 * r);
            for(let i = 0; i < B.length; i++){
                const j = i * 4;
                B[i] = (b[j + 3] & 255) << 24 | (b[j + 2] & 255) << 16 | (b[j + 1] & 255) << 8 | (b[j + 0] & 255) << 0;
            }
            const XY = new Uint32Array(64 * r);
            const V = new Uint32Array(32 * r * N);
            const Yi = 32 * r;
            const x = new Uint32Array(16);
            const _X = new Uint32Array(16);
            const totalOps = p * N * 2;
            let currentOp = 0;
            let lastPercent10 = null;
            let stop = false;
            let state = 0;
            let i0 = 0, i1;
            let Bi;
            const limit = callback ? parseInt(1e3 / r) : 4294967295;
            const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
            const incrementalSMix = function() {
                if (stop) {
                    return callback(new Error("cancelled"), currentOp / totalOps);
                }
                let steps;
                switch(state){
                    case 0:
                        Bi = i0 * 32 * r;
                        arraycopy(B, Bi, XY, 0, Yi);
                        state = 1;
                        i1 = 0;
                    case 1:
                        steps = N - i1;
                        if (steps > limit) {
                            steps = limit;
                        }
                        for(let i = 0; i < steps; i++){
                            arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);
                            blockmix_salsa8(XY, Yi, r, x, _X);
                        }
                        i1 += steps;
                        currentOp += steps;
                        if (callback) {
                            const percent10 = parseInt(1e3 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) {
                                    break;
                                }
                                lastPercent10 = percent10;
                            }
                        }
                        if (i1 < N) {
                            break;
                        }
                        i1 = 0;
                        state = 2;
                    case 2:
                        steps = N - i1;
                        if (steps > limit) {
                            steps = limit;
                        }
                        for(let i = 0; i < steps; i++){
                            const offset = (2 * r - 1) * 16;
                            const j = XY[offset] & N - 1;
                            blockxor(V, j * Yi, XY, Yi);
                            blockmix_salsa8(XY, Yi, r, x, _X);
                        }
                        i1 += steps;
                        currentOp += steps;
                        if (callback) {
                            const percent10 = parseInt(1e3 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) {
                                    break;
                                }
                                lastPercent10 = percent10;
                            }
                        }
                        if (i1 < N) {
                            break;
                        }
                        arraycopy(XY, 0, B, Bi, Yi);
                        i0++;
                        if (i0 < p) {
                            state = 0;
                            break;
                        }
                        b = [];
                        for(let i = 0; i < B.length; i++){
                            b.push(B[i] >> 0 & 255);
                            b.push(B[i] >> 8 & 255);
                            b.push(B[i] >> 16 & 255);
                            b.push(B[i] >> 24 & 255);
                        }
                        const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);
                        if (callback) {
                            callback(null, 1, derivedKey);
                        }
                        return derivedKey;
                }
                if (callback) {
                    nextTick(incrementalSMix);
                }
            };
            if (!callback) {
                while(true){
                    const derivedKey = incrementalSMix();
                    if (derivedKey != void 0) {
                        return derivedKey;
                    }
                }
            }
            incrementalSMix();
        }
        const lib = {
            scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
                return new Promise(function(resolve, reject) {
                    let lastProgress = 0;
                    if (progressCallback) {
                        progressCallback(0);
                    }
                    _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                        if (error) {
                            reject(error);
                        } else if (key) {
                            if (progressCallback && lastProgress !== 1) {
                                progressCallback(1);
                            }
                            resolve(new Uint8Array(key));
                        } else if (progressCallback && progress !== lastProgress) {
                            lastProgress = progress;
                            return progressCallback(progress);
                        }
                    });
                });
            },
            syncScrypt: function(password, salt, N, r, p, dkLen) {
                return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
            }
        };
        {
            module.exports = lib;
        }
    })();
});
scrypt.scrypt;
scrypt.syncScrypt;
const version19 = "json-wallets/5.7.0";
function looseArrayify(hexString) {
    if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
        hexString = "0x" + hexString;
    }
    return arrayify(hexString);
}
function zpad(value, length) {
    value = String(value);
    while(value.length < length){
        value = "0" + value;
    }
    return value;
}
function getPassword(password) {
    if (typeof password === "string") {
        return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
    }
    return arrayify(password);
}
function searchPath(object, path) {
    let currentChild = object;
    const comps = path.toLowerCase().split("/");
    for(let i = 0; i < comps.length; i++){
        let matchingChild = null;
        for(const key in currentChild){
            if (key.toLowerCase() === comps[i]) {
                matchingChild = currentChild[key];
                break;
            }
        }
        if (matchingChild === null) {
            return null;
        }
        currentChild = matchingChild;
    }
    return currentChild;
}
function uuidV4(randomBytes2) {
    const bytes2 = arrayify(randomBytes2);
    bytes2[6] = bytes2[6] & 15 | 64;
    bytes2[8] = bytes2[8] & 63 | 128;
    const value = hexlify(bytes2);
    return [
        value.substring(2, 10),
        value.substring(10, 14),
        value.substring(14, 18),
        value.substring(18, 22),
        value.substring(22, 34)
    ].join("-");
}
const logger217 = new Logger(version19);
class CrowdsaleAccount extends Description {
    isCrowdsaleAccount(value) {
        return !!(value && value._isCrowdsaleAccount);
    }
}
function decrypt(json, password) {
    const data = JSON.parse(json);
    password = getPassword(password);
    const ethaddr = getAddress(searchPath(data, "ethaddr"));
    const encseed = looseArrayify(searchPath(data, "encseed"));
    if (!encseed || encseed.length % 16 !== 0) {
        logger217.throwArgumentError("invalid encseed", "json", json);
    }
    const key = arrayify(pbkdf2(password, password, 2e3, 32, "sha256")).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    const aesCbc = new aesJs.ModeOfOperation.cbc(key, iv);
    const seed = aesJs.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
    let seedHex = "";
    for(let i = 0; i < seed.length; i++){
        seedHex += String.fromCharCode(seed[i]);
    }
    const seedHexBytes = toUtf8Bytes(seedHex);
    const privateKey = keccak256(seedHexBytes);
    return new CrowdsaleAccount({
        _isCrowdsaleAccount: true,
        address: ethaddr,
        privateKey
    });
}
function isCrowdsaleWallet(json) {
    let data = null;
    try {
        data = JSON.parse(json);
    } catch (error) {
        return false;
    }
    return data.encseed && data.ethaddr;
}
function isKeystoreWallet(json) {
    let data = null;
    try {
        data = JSON.parse(json);
    } catch (error) {
        return false;
    }
    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
        return false;
    }
    return true;
}
function getJsonWalletAddress(json) {
    if (isCrowdsaleWallet(json)) {
        try {
            return getAddress(JSON.parse(json).ethaddr);
        } catch (error) {
            return null;
        }
    }
    if (isKeystoreWallet(json)) {
        try {
            return getAddress(JSON.parse(json).address);
        } catch (error) {
            return null;
        }
    }
    return null;
}
var __awaiter5 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger$13 = new Logger(version19);
function hasMnemonic(value) {
    return value != null && value.mnemonic && value.mnemonic.phrase;
}
class KeystoreAccount extends Description {
    isKeystoreAccount(value) {
        return !!(value && value._isKeystoreAccount);
    }
}
function _decrypt(data, key, ciphertext) {
    const cipher = searchPath(data, "crypto/cipher");
    if (cipher === "aes-128-ctr") {
        const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
        const counter = new aesJs.Counter(iv);
        const aesCtr = new aesJs.ModeOfOperation.ctr(key, counter);
        return arrayify(aesCtr.decrypt(ciphertext));
    }
    return null;
}
function _getAccount(data, key) {
    const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
    const computedMAC = hexlify(keccak256(concat([
        key.slice(16, 32),
        ciphertext
    ]))).substring(2);
    if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
        throw new Error("invalid password");
    }
    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
    if (!privateKey) {
        logger$13.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "decrypt"
        });
    }
    const mnemonicKey = key.slice(32, 64);
    const address2 = computeAddress(privateKey);
    if (data.address) {
        let check = data.address.toLowerCase();
        if (check.substring(0, 2) !== "0x") {
            check = "0x" + check;
        }
        if (getAddress(check) !== address2) {
            throw new Error("address mismatch");
        }
    }
    const account = {
        _isKeystoreAccount: true,
        address: address2,
        privateKey: hexlify(privateKey)
    };
    if (searchPath(data, "x-ethers/version") === "0.1") {
        const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
        const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
        const mnemonicCounter = new aesJs.Counter(mnemonicIv);
        const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
        const path = searchPath(data, "x-ethers/path") || defaultPath;
        const locale = searchPath(data, "x-ethers/locale") || "en";
        const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
        try {
            const mnemonic = entropyToMnemonic(entropy, locale);
            const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
            if (node.privateKey != account.privateKey) {
                throw new Error("mnemonic mismatch");
            }
            account.mnemonic = node.mnemonic;
        } catch (error) {
            if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                throw error;
            }
        }
    }
    return new KeystoreAccount(account);
}
function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
    return arrayify(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
}
function pbkdf22(passwordBytes, salt, count, dkLen, prfFunc) {
    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
}
function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
    const passwordBytes = getPassword(password);
    const kdf = searchPath(data, "crypto/kdf");
    if (kdf && typeof kdf === "string") {
        const throwError = function(name, value) {
            return logger$13.throwArgumentError("invalid key-derivation function parameters", name, value);
        };
        if (kdf.toLowerCase() === "scrypt") {
            const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
            const N = parseInt(searchPath(data, "crypto/kdfparams/n"));
            const r = parseInt(searchPath(data, "crypto/kdfparams/r"));
            const p = parseInt(searchPath(data, "crypto/kdfparams/p"));
            if (!N || !r || !p) {
                throwError("kdf", kdf);
            }
            if ((N & N - 1) !== 0) {
                throwError("N", N);
            }
            const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
            if (dkLen !== 32) {
                throwError("dklen", dkLen);
            }
            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
        } else if (kdf.toLowerCase() === "pbkdf2") {
            const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
            let prfFunc = null;
            const prf = searchPath(data, "crypto/kdfparams/prf");
            if (prf === "hmac-sha256") {
                prfFunc = "sha256";
            } else if (prf === "hmac-sha512") {
                prfFunc = "sha512";
            } else {
                throwError("prf", prf);
            }
            const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
            const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
            if (dkLen !== 32) {
                throwError("dklen", dkLen);
            }
            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
        }
    }
    return logger$13.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
}
function decryptSync(json, password) {
    const data = JSON.parse(json);
    const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);
    return _getAccount(data, key);
}
function decrypt$1(json, password, progressCallback) {
    return __awaiter5(this, void 0, void 0, function*() {
        const data = JSON.parse(json);
        const key = yield _computeKdfKey(data, password, pbkdf22, scrypt.scrypt, progressCallback);
        return _getAccount(data, key);
    });
}
function encrypt(account, password, options, progressCallback) {
    try {
        if (getAddress(account.address) !== computeAddress(account.privateKey)) {
            throw new Error("address/privateKey mismatch");
        }
        if (hasMnemonic(account)) {
            const mnemonic = account.mnemonic;
            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
            if (node.privateKey != account.privateKey) {
                throw new Error("mnemonic mismatch");
            }
        }
    } catch (e) {
        return Promise.reject(e);
    }
    if (typeof options === "function" && !progressCallback) {
        progressCallback = options;
        options = {};
    }
    if (!options) {
        options = {};
    }
    const privateKey = arrayify(account.privateKey);
    const passwordBytes = getPassword(password);
    let entropy = null;
    let path = null;
    let locale = null;
    if (hasMnemonic(account)) {
        const srcMnemonic = account.mnemonic;
        entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
        path = srcMnemonic.path || defaultPath;
        locale = srcMnemonic.locale || "en";
    }
    let client = options.client;
    if (!client) {
        client = "ethers.js";
    }
    let salt = null;
    if (options.salt) {
        salt = arrayify(options.salt);
    } else {
        salt = randomBytes(32);
    }
    let iv = null;
    if (options.iv) {
        iv = arrayify(options.iv);
        if (iv.length !== 16) {
            throw new Error("invalid iv");
        }
    } else {
        iv = randomBytes(16);
    }
    let uuidRandom = null;
    if (options.uuid) {
        uuidRandom = arrayify(options.uuid);
        if (uuidRandom.length !== 16) {
            throw new Error("invalid uuid");
        }
    } else {
        uuidRandom = randomBytes(16);
    }
    let N = 1 << 17, r = 8, p = 1;
    if (options.scrypt) {
        if (options.scrypt.N) {
            N = options.scrypt.N;
        }
        if (options.scrypt.r) {
            r = options.scrypt.r;
        }
        if (options.scrypt.p) {
            p = options.scrypt.p;
        }
    }
    return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key)=>{
        key = arrayify(key);
        const derivedKey = key.slice(0, 16);
        const macPrefix = key.slice(16, 32);
        const mnemonicKey = key.slice(32, 64);
        const counter = new aesJs.Counter(iv);
        const aesCtr = new aesJs.ModeOfOperation.ctr(derivedKey, counter);
        const ciphertext = arrayify(aesCtr.encrypt(privateKey));
        const mac = keccak256(concat([
            macPrefix,
            ciphertext
        ]));
        const data = {
            address: account.address.substring(2).toLowerCase(),
            id: uuidV4(uuidRandom),
            version: 3,
            crypto: {
                cipher: "aes-128-ctr",
                cipherparams: {
                    iv: hexlify(iv).substring(2)
                },
                ciphertext: hexlify(ciphertext).substring(2),
                kdf: "scrypt",
                kdfparams: {
                    salt: hexlify(salt).substring(2),
                    n: N,
                    dklen: 32,
                    p,
                    r
                },
                mac: mac.substring(2)
            }
        };
        if (entropy) {
            const mnemonicIv = randomBytes(16);
            const mnemonicCounter = new aesJs.Counter(mnemonicIv);
            const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
            const now = new Date();
            const timestamp = now.getUTCFullYear() + "-" + zpad(now.getUTCMonth() + 1, 2) + "-" + zpad(now.getUTCDate(), 2) + "T" + zpad(now.getUTCHours(), 2) + "-" + zpad(now.getUTCMinutes(), 2) + "-" + zpad(now.getUTCSeconds(), 2) + ".0Z";
            data["x-ethers"] = {
                client,
                gethFilename: "UTC--" + timestamp + "--" + data.address,
                mnemonicCounter: hexlify(mnemonicIv).substring(2),
                mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
                path,
                locale,
                version: "0.1"
            };
        }
        return JSON.stringify(data);
    });
}
function decryptJsonWallet(json, password, progressCallback) {
    if (isCrowdsaleWallet(json)) {
        if (progressCallback) {
            progressCallback(0);
        }
        const account = decrypt(json, password);
        if (progressCallback) {
            progressCallback(1);
        }
        return Promise.resolve(account);
    }
    if (isKeystoreWallet(json)) {
        return decrypt$1(json, password, progressCallback);
    }
    return Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(json, password) {
    if (isCrowdsaleWallet(json)) {
        return decrypt(json, password);
    }
    if (isKeystoreWallet(json)) {
        return decryptSync(json, password);
    }
    throw new Error("invalid JSON wallet");
}
const version20 = "wallet/5.7.0";
var __awaiter6 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger218 = new Logger(version20);
function isAccount(value) {
    return value != null && isHexString(value.privateKey, 32) && value.address != null;
}
function hasMnemonic1(value) {
    const mnemonic = value.mnemonic;
    return mnemonic && mnemonic.phrase;
}
class Wallet extends Signer {
    constructor(privateKey, provider){
        super();
        if (isAccount(privateKey)) {
            const signingKey = new SigningKey(privateKey.privateKey);
            defineReadOnly(this, "_signingKey", ()=>signingKey);
            defineReadOnly(this, "address", computeAddress(this.publicKey));
            if (this.address !== getAddress(privateKey.address)) {
                logger218.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
            }
            if (hasMnemonic1(privateKey)) {
                const srcMnemonic = privateKey.mnemonic;
                defineReadOnly(this, "_mnemonic", ()=>({
                        phrase: srcMnemonic.phrase,
                        path: srcMnemonic.path || defaultPath,
                        locale: srcMnemonic.locale || "en"
                    }));
                const mnemonic = this.mnemonic;
                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                if (computeAddress(node.privateKey) !== this.address) {
                    logger218.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                }
            } else {
                defineReadOnly(this, "_mnemonic", ()=>null);
            }
        } else {
            if (SigningKey.isSigningKey(privateKey)) {
                if (privateKey.curve !== "secp256k1") {
                    logger218.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                }
                defineReadOnly(this, "_signingKey", ()=>privateKey);
            } else {
                if (typeof privateKey === "string") {
                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                        privateKey = "0x" + privateKey;
                    }
                }
                const signingKey = new SigningKey(privateKey);
                defineReadOnly(this, "_signingKey", ()=>signingKey);
            }
            defineReadOnly(this, "_mnemonic", ()=>null);
            defineReadOnly(this, "address", computeAddress(this.publicKey));
        }
        if (provider && !Provider.isProvider(provider)) {
            logger218.throwArgumentError("invalid provider", "provider", provider);
        }
        defineReadOnly(this, "provider", provider || null);
    }
    get mnemonic() {
        return this._mnemonic();
    }
    get privateKey() {
        return this._signingKey().privateKey;
    }
    get publicKey() {
        return this._signingKey().publicKey;
    }
    getAddress() {
        return Promise.resolve(this.address);
    }
    connect(provider) {
        return new Wallet(this, provider);
    }
    signTransaction(transaction) {
        return resolveProperties(transaction).then((tx)=>{
            if (tx.from != null) {
                if (getAddress(tx.from) !== this.address) {
                    logger218.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                }
                delete tx.from;
            }
            const signature = this._signingKey().signDigest(keccak256(serialize(tx)));
            return serialize(tx, signature);
        });
    }
    signMessage(message) {
        return __awaiter6(this, void 0, void 0, function*() {
            return joinSignature(this._signingKey().signDigest(hashMessage(message)));
        });
    }
    _signTypedData(domain, types, value) {
        return __awaiter6(this, void 0, void 0, function*() {
            const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name)=>{
                if (this.provider == null) {
                    logger218.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "resolveName",
                        value: name
                    });
                }
                return this.provider.resolveName(name);
            });
            return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
        });
    }
    encrypt(password, options, progressCallback) {
        if (typeof options === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (progressCallback && typeof progressCallback !== "function") {
            throw new Error("invalid callback");
        }
        if (!options) {
            options = {};
        }
        return encrypt(this, password, options, progressCallback);
    }
    static createRandom(options) {
        let entropy = randomBytes(16);
        if (!options) {
            options = {};
        }
        if (options.extraEntropy) {
            entropy = arrayify(hexDataSlice(keccak256(concat([
                entropy,
                options.extraEntropy
            ])), 0, 16));
        }
        const mnemonic = entropyToMnemonic(entropy, options.locale);
        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
    }
    static fromEncryptedJson(json, password, progressCallback) {
        return decryptJsonWallet(json, password, progressCallback).then((account)=>{
            return new Wallet(account);
        });
    }
    static fromEncryptedJsonSync(json, password) {
        return new Wallet(decryptJsonWalletSync(json, password));
    }
    static fromMnemonic(mnemonic, path, wordlist) {
        if (!path) {
            path = defaultPath;
        }
        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
    }
}
function verifyMessage(message, signature) {
    return recoverAddress(hashMessage(message), signature);
}
function verifyTypedData(domain, types, value, signature) {
    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
}
const version21 = "networks/5.7.1";
const logger219 = new Logger(version21);
function isRenetworkable(value) {
    return value && typeof value.renetwork === "function";
}
function ethDefaultProvider(network) {
    const func = function(providers, options) {
        if (options == null) {
            options = {};
        }
        const providerList = [];
        if (providers.InfuraProvider && options.infura !== "-") {
            try {
                providerList.push(new providers.InfuraProvider(network, options.infura));
            } catch (error) {}
        }
        if (providers.EtherscanProvider && options.etherscan !== "-") {
            try {
                providerList.push(new providers.EtherscanProvider(network, options.etherscan));
            } catch (error) {}
        }
        if (providers.AlchemyProvider && options.alchemy !== "-") {
            try {
                providerList.push(new providers.AlchemyProvider(network, options.alchemy));
            } catch (error) {}
        }
        if (providers.PocketProvider && options.pocket !== "-") {
            const skip = [
                "goerli",
                "ropsten",
                "rinkeby",
                "sepolia"
            ];
            try {
                const provider = new providers.PocketProvider(network, options.pocket);
                if (provider.network && skip.indexOf(provider.network.name) === -1) {
                    providerList.push(provider);
                }
            } catch (error) {}
        }
        if (providers.CloudflareProvider && options.cloudflare !== "-") {
            try {
                providerList.push(new providers.CloudflareProvider(network));
            } catch (error) {}
        }
        if (providers.AnkrProvider && options.ankr !== "-") {
            try {
                const skip = [
                    "ropsten"
                ];
                const provider = new providers.AnkrProvider(network, options.ankr);
                if (provider.network && skip.indexOf(provider.network.name) === -1) {
                    providerList.push(provider);
                }
            } catch (error) {}
        }
        if (providerList.length === 0) {
            return null;
        }
        if (providers.FallbackProvider) {
            let quorum = 1;
            if (options.quorum != null) {
                quorum = options.quorum;
            } else if (network === "homestead") {
                quorum = 2;
            }
            return new providers.FallbackProvider(providerList, quorum);
        }
        return providerList[0];
    };
    func.renetwork = function(network2) {
        return ethDefaultProvider(network2);
    };
    return func;
}
function etcDefaultProvider(url, network) {
    const func = function(providers, options) {
        if (providers.JsonRpcProvider) {
            return new providers.JsonRpcProvider(url, network);
        }
        return null;
    };
    func.renetwork = function(network2) {
        return etcDefaultProvider(url, network2);
    };
    return func;
}
const homestead = {
    chainId: 1,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "homestead",
    _defaultProvider: ethDefaultProvider("homestead")
};
const ropsten = {
    chainId: 3,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "ropsten",
    _defaultProvider: ethDefaultProvider("ropsten")
};
const classicMordor = {
    chainId: 63,
    name: "classicMordor",
    _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
};
const networks = {
    unspecified: {
        chainId: 0,
        name: "unspecified"
    },
    homestead,
    mainnet: homestead,
    morden: {
        chainId: 2,
        name: "morden"
    },
    ropsten,
    testnet: ropsten,
    rinkeby: {
        chainId: 4,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "rinkeby",
        _defaultProvider: ethDefaultProvider("rinkeby")
    },
    kovan: {
        chainId: 42,
        name: "kovan",
        _defaultProvider: ethDefaultProvider("kovan")
    },
    goerli: {
        chainId: 5,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "goerli",
        _defaultProvider: ethDefaultProvider("goerli")
    },
    kintsugi: {
        chainId: 1337702,
        name: "kintsugi"
    },
    sepolia: {
        chainId: 11155111,
        name: "sepolia",
        _defaultProvider: ethDefaultProvider("sepolia")
    },
    classic: {
        chainId: 61,
        name: "classic",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
    },
    classicMorden: {
        chainId: 62,
        name: "classicMorden"
    },
    classicMordor,
    classicTestnet: classicMordor,
    classicKotti: {
        chainId: 6,
        name: "classicKotti",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
    },
    xdai: {
        chainId: 100,
        name: "xdai"
    },
    matic: {
        chainId: 137,
        name: "matic",
        _defaultProvider: ethDefaultProvider("matic")
    },
    maticmum: {
        chainId: 80001,
        name: "maticmum"
    },
    optimism: {
        chainId: 10,
        name: "optimism",
        _defaultProvider: ethDefaultProvider("optimism")
    },
    "optimism-kovan": {
        chainId: 69,
        name: "optimism-kovan"
    },
    "optimism-goerli": {
        chainId: 420,
        name: "optimism-goerli"
    },
    arbitrum: {
        chainId: 42161,
        name: "arbitrum"
    },
    "arbitrum-rinkeby": {
        chainId: 421611,
        name: "arbitrum-rinkeby"
    },
    "arbitrum-goerli": {
        chainId: 421613,
        name: "arbitrum-goerli"
    },
    bnb: {
        chainId: 56,
        name: "bnb"
    },
    bnbt: {
        chainId: 97,
        name: "bnbt"
    }
};
function getNetwork(network) {
    if (network == null) {
        return null;
    }
    if (typeof network === "number") {
        for(const name in networks){
            const standard2 = networks[name];
            if (standard2.chainId === network) {
                return {
                    name: standard2.name,
                    chainId: standard2.chainId,
                    ensAddress: standard2.ensAddress || null,
                    _defaultProvider: standard2._defaultProvider || null
                };
            }
        }
        return {
            chainId: network,
            name: "unknown"
        };
    }
    if (typeof network === "string") {
        const standard2 = networks[network];
        if (standard2 == null) {
            return null;
        }
        return {
            name: standard2.name,
            chainId: standard2.chainId,
            ensAddress: standard2.ensAddress,
            _defaultProvider: standard2._defaultProvider || null
        };
    }
    const standard = networks[network.name];
    if (!standard) {
        if (typeof network.chainId !== "number") {
            logger219.throwArgumentError("invalid network chainId", "network", network);
        }
        return network;
    }
    if (network.chainId !== 0 && network.chainId !== standard.chainId) {
        logger219.throwArgumentError("network chainId mismatch", "network", network);
    }
    let defaultProvider = network._defaultProvider || null;
    if (defaultProvider == null && standard._defaultProvider) {
        if (isRenetworkable(standard._defaultProvider)) {
            defaultProvider = standard._defaultProvider.renetwork(network);
        } else {
            defaultProvider = standard._defaultProvider;
        }
    }
    return {
        name: network.name,
        chainId: standard.chainId,
        ensAddress: network.ensAddress || standard.ensAddress || null,
        _defaultProvider: defaultProvider
    };
}
const version22 = "web/5.7.1";
var __awaiter7 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getUrl(href, options) {
    return __awaiter7(this, void 0, void 0, function*() {
        if (options == null) {
            options = {};
        }
        const request = {
            method: options.method || "GET",
            headers: options.headers || {},
            body: options.body || void 0
        };
        if (options.skipFetchSetup !== true) {
            request.mode = "cors";
            request.cache = "no-cache";
            request.credentials = "same-origin";
            request.redirect = "follow";
            request.referrer = "client";
        }
        if (options.fetchOptions != null) {
            const opts = options.fetchOptions;
            if (opts.mode) {
                request.mode = opts.mode;
            }
            if (opts.cache) {
                request.cache = opts.cache;
            }
            if (opts.credentials) {
                request.credentials = opts.credentials;
            }
            if (opts.redirect) {
                request.redirect = opts.redirect;
            }
            if (opts.referrer) {
                request.referrer = opts.referrer;
            }
        }
        const response = yield fetch(href, request);
        const body = yield response.arrayBuffer();
        const headers = {};
        if (response.headers.forEach) {
            response.headers.forEach((value, key)=>{
                headers[key.toLowerCase()] = value;
            });
        } else {
            response.headers.keys().forEach((key)=>{
                headers[key.toLowerCase()] = response.headers.get(key);
            });
        }
        return {
            headers,
            statusCode: response.status,
            statusMessage: response.statusText,
            body: arrayify(new Uint8Array(body))
        };
    });
}
var __awaiter$1 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger220 = new Logger(version22);
function staller(duration) {
    return new Promise((resolve)=>{
        setTimeout(resolve, duration);
    });
}
function bodyify(value, type) {
    if (value == null) {
        return null;
    }
    if (typeof value === "string") {
        return value;
    }
    if (isBytesLike(value)) {
        if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
            try {
                return toUtf8String(value);
            } catch (error) {}
        }
        return hexlify(value);
    }
    return value;
}
function unpercent(value) {
    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code)=>{
        return String.fromCharCode(parseInt(code, 16));
    }));
}
function _fetchData(connection, body, processFunc) {
    const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
    logger220.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
    const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
    const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
    logger220.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
    const errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
    const headers = {};
    let url = null;
    const options = {
        method: "GET"
    };
    let allow304 = false;
    let timeout = 2 * 60 * 1e3;
    if (typeof connection === "string") {
        url = connection;
    } else if (typeof connection === "object") {
        if (connection == null || connection.url == null) {
            logger220.throwArgumentError("missing URL", "connection.url", connection);
        }
        url = connection.url;
        if (typeof connection.timeout === "number" && connection.timeout > 0) {
            timeout = connection.timeout;
        }
        if (connection.headers) {
            for(const key in connection.headers){
                headers[key.toLowerCase()] = {
                    key,
                    value: String(connection.headers[key])
                };
                if ([
                    "if-none-match",
                    "if-modified-since"
                ].indexOf(key.toLowerCase()) >= 0) {
                    allow304 = true;
                }
            }
        }
        options.allowGzip = !!connection.allowGzip;
        if (connection.user != null && connection.password != null) {
            if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                logger220.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, {
                    argument: "url",
                    url,
                    user: connection.user,
                    password: "[REDACTED]"
                });
            }
            const authorization = connection.user + ":" + connection.password;
            headers["authorization"] = {
                key: "Authorization",
                value: "Basic " + encode1(toUtf8Bytes(authorization))
            };
        }
        if (connection.skipFetchSetup != null) {
            options.skipFetchSetup = !!connection.skipFetchSetup;
        }
        if (connection.fetchOptions != null) {
            options.fetchOptions = shallowCopy(connection.fetchOptions);
        }
    }
    const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
    const dataMatch = url ? url.match(reData) : null;
    if (dataMatch) {
        try {
            const response = {
                statusCode: 200,
                statusMessage: "OK",
                headers: {
                    "content-type": dataMatch[1] || "text/plain"
                },
                body: dataMatch[2] ? decode2(dataMatch[3]) : unpercent(dataMatch[3])
            };
            let result = response.body;
            if (processFunc) {
                result = processFunc(response.body, response);
            }
            return Promise.resolve(result);
        } catch (error) {
            logger220.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                body: bodyify(dataMatch[1], dataMatch[2]),
                error,
                requestBody: null,
                requestMethod: "GET",
                url
            });
        }
    }
    if (body) {
        options.method = "POST";
        options.body = body;
        if (headers["content-type"] == null) {
            headers["content-type"] = {
                key: "Content-Type",
                value: "application/octet-stream"
            };
        }
        if (headers["content-length"] == null) {
            headers["content-length"] = {
                key: "Content-Length",
                value: String(body.length)
            };
        }
    }
    const flatHeaders = {};
    Object.keys(headers).forEach((key)=>{
        const header = headers[key];
        flatHeaders[header.key] = header.value;
    });
    options.headers = flatHeaders;
    const runningTimeout = function() {
        let timer = null;
        const promise = new Promise(function(resolve, reject) {
            if (timeout) {
                timer = setTimeout(()=>{
                    if (timer == null) {
                        return;
                    }
                    timer = null;
                    reject(logger220.makeError("timeout", Logger.errors.TIMEOUT, {
                        requestBody: bodyify(options.body, flatHeaders["content-type"]),
                        requestMethod: options.method,
                        timeout,
                        url
                    }));
                }, timeout);
            }
        });
        const cancel = function() {
            if (timer == null) {
                return;
            }
            clearTimeout(timer);
            timer = null;
        };
        return {
            promise,
            cancel
        };
    }();
    const runningFetch = function() {
        return __awaiter$1(this, void 0, void 0, function*() {
            for(let attempt = 0; attempt < attemptLimit; attempt++){
                let response = null;
                try {
                    response = yield getUrl(url, options);
                    if (attempt < attemptLimit) {
                        if (response.statusCode === 301 || response.statusCode === 302) {
                            const location = response.headers.location || "";
                            if (options.method === "GET" && location.match(/^https:/)) {
                                url = response.headers.location;
                                continue;
                            }
                        } else if (response.statusCode === 429) {
                            let tryAgain = true;
                            if (throttleCallback) {
                                tryAgain = yield throttleCallback(attempt, url);
                            }
                            if (tryAgain) {
                                let stall = 0;
                                const retryAfter = response.headers["retry-after"];
                                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                                    stall = parseInt(retryAfter) * 1e3;
                                } else {
                                    stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                }
                                yield staller(stall);
                                continue;
                            }
                        }
                    }
                } catch (error) {
                    response = error.response;
                    if (response == null) {
                        runningTimeout.cancel();
                        logger220.throwError("missing response", Logger.errors.SERVER_ERROR, {
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            serverError: error,
                            url
                        });
                    }
                }
                let body2 = response.body;
                if (allow304 && response.statusCode === 304) {
                    body2 = null;
                } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
                    runningTimeout.cancel();
                    logger220.throwError("bad response", Logger.errors.SERVER_ERROR, {
                        status: response.statusCode,
                        headers: response.headers,
                        body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
                        requestBody: bodyify(options.body, flatHeaders["content-type"]),
                        requestMethod: options.method,
                        url
                    });
                }
                if (processFunc) {
                    try {
                        const result = yield processFunc(body2, response);
                        runningTimeout.cancel();
                        return result;
                    } catch (error) {
                        if (error.throttleRetry && attempt < attemptLimit) {
                            let tryAgain = true;
                            if (throttleCallback) {
                                tryAgain = yield throttleCallback(attempt, url);
                            }
                            if (tryAgain) {
                                const timeout2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                yield staller(timeout2);
                                continue;
                            }
                        }
                        runningTimeout.cancel();
                        logger220.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                            body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
                            error,
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            url
                        });
                    }
                }
                runningTimeout.cancel();
                return body2;
            }
            return logger220.throwError("failed response", Logger.errors.SERVER_ERROR, {
                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                requestMethod: options.method,
                url
            });
        });
    }();
    return Promise.race([
        runningTimeout.promise,
        runningFetch
    ]);
}
function fetchJson(connection, json, processFunc) {
    let processJsonFunc = (value, response)=>{
        let result = null;
        if (value != null) {
            try {
                result = JSON.parse(toUtf8String(value));
            } catch (error) {
                logger220.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
                    body: value,
                    error
                });
            }
        }
        if (processFunc) {
            result = processFunc(result, response);
        }
        return result;
    };
    let body = null;
    if (json != null) {
        body = toUtf8Bytes(json);
        const updated = typeof connection === "string" ? {
            url: connection
        } : shallowCopy(connection);
        if (updated.headers) {
            const hasContentType = Object.keys(updated.headers).filter((k)=>k.toLowerCase() === "content-type").length !== 0;
            if (!hasContentType) {
                updated.headers = shallowCopy(updated.headers);
                updated.headers["content-type"] = "application/json";
            }
        } else {
            updated.headers = {
                "content-type": "application/json"
            };
        }
        connection = updated;
    }
    return _fetchData(connection, body, processJsonFunc);
}
function poll(func, options) {
    if (!options) {
        options = {};
    }
    options = shallowCopy(options);
    if (options.floor == null) {
        options.floor = 0;
    }
    if (options.ceiling == null) {
        options.ceiling = 1e4;
    }
    if (options.interval == null) {
        options.interval = 250;
    }
    return new Promise(function(resolve, reject) {
        let timer = null;
        let done = false;
        const cancel = ()=>{
            if (done) {
                return false;
            }
            done = true;
            if (timer) {
                clearTimeout(timer);
            }
            return true;
        };
        if (options.timeout) {
            timer = setTimeout(()=>{
                if (cancel()) {
                    reject(new Error("timeout"));
                }
            }, options.timeout);
        }
        const retryLimit = options.retryLimit;
        let attempt = 0;
        function check() {
            return func().then(function(result) {
                if (result !== void 0) {
                    if (cancel()) {
                        resolve(result);
                    }
                } else if (options.oncePoll) {
                    options.oncePoll.once("poll", check);
                } else if (options.onceBlock) {
                    options.onceBlock.once("block", check);
                } else if (!done) {
                    attempt++;
                    if (attempt > retryLimit) {
                        if (cancel()) {
                            reject(new Error("retry limit reached"));
                        }
                        return;
                    }
                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                    if (timeout < options.floor) {
                        timeout = options.floor;
                    }
                    if (timeout > options.ceiling) {
                        timeout = options.ceiling;
                    }
                    setTimeout(check, timeout);
                }
                return null;
            }, function(error) {
                if (cancel()) {
                    reject(error);
                }
            });
        }
        check();
    });
}
var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
var ALPHABET_MAP = {};
for(var z = 0; z < ALPHABET.length; z++){
    var x = ALPHABET.charAt(z);
    if (ALPHABET_MAP[x] !== void 0) throw new TypeError(x + " is ambiguous");
    ALPHABET_MAP[x] = z;
}
function polymodStep(pre) {
    var b = pre >> 25;
    return (pre & 33554431) << 5 ^ -(b >> 0 & 1) & 996825010 ^ -(b >> 1 & 1) & 642813549 ^ -(b >> 2 & 1) & 513874426 ^ -(b >> 3 & 1) & 1027748829 ^ -(b >> 4 & 1) & 705979059;
}
function prefixChk(prefix) {
    var chk = 1;
    for(var i = 0; i < prefix.length; ++i){
        var c = prefix.charCodeAt(i);
        if (c < 33 || c > 126) return "Invalid prefix (" + prefix + ")";
        chk = polymodStep(chk) ^ c >> 5;
    }
    chk = polymodStep(chk);
    for(i = 0; i < prefix.length; ++i){
        var v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ v & 31;
    }
    return chk;
}
function encode2(prefix, words, LIMIT) {
    LIMIT = LIMIT || 90;
    if (prefix.length + 7 + words.length > LIMIT) throw new TypeError("Exceeds length limit");
    prefix = prefix.toLowerCase();
    var chk = prefixChk(prefix);
    if (typeof chk === "string") throw new Error(chk);
    var result = prefix + "1";
    for(var i = 0; i < words.length; ++i){
        var x = words[i];
        if (x >> 5 !== 0) throw new Error("Non 5-bit word");
        chk = polymodStep(chk) ^ x;
        result += ALPHABET.charAt(x);
    }
    for(i = 0; i < 6; ++i){
        chk = polymodStep(chk);
    }
    chk ^= 1;
    for(i = 0; i < 6; ++i){
        var v = chk >> (5 - i) * 5 & 31;
        result += ALPHABET.charAt(v);
    }
    return result;
}
function __decode(str, LIMIT) {
    LIMIT = LIMIT || 90;
    if (str.length < 8) return str + " too short";
    if (str.length > LIMIT) return "Exceeds length limit";
    var lowered = str.toLowerCase();
    var uppered = str.toUpperCase();
    if (str !== lowered && str !== uppered) return "Mixed-case string " + str;
    str = lowered;
    var split = str.lastIndexOf("1");
    if (split === -1) return "No separator character for " + str;
    if (split === 0) return "Missing prefix for " + str;
    var prefix = str.slice(0, split);
    var wordChars = str.slice(split + 1);
    if (wordChars.length < 6) return "Data too short";
    var chk = prefixChk(prefix);
    if (typeof chk === "string") return chk;
    var words = [];
    for(var i = 0; i < wordChars.length; ++i){
        var c = wordChars.charAt(i);
        var v = ALPHABET_MAP[c];
        if (v === void 0) return "Unknown character " + c;
        chk = polymodStep(chk) ^ v;
        if (i + 6 >= wordChars.length) continue;
        words.push(v);
    }
    if (chk !== 1) return "Invalid checksum for " + str;
    return {
        prefix,
        words
    };
}
function decodeUnsafe() {
    var res = __decode.apply(null, arguments);
    if (typeof res === "object") return res;
}
function decode3(str) {
    var res = __decode.apply(null, arguments);
    if (typeof res === "object") return res;
    throw new Error(res);
}
function convert(data, inBits, outBits, pad) {
    var value = 0;
    var bits = 0;
    var maxV = (1 << outBits) - 1;
    var result = [];
    for(var i = 0; i < data.length; ++i){
        value = value << inBits | data[i];
        bits += inBits;
        while(bits >= outBits){
            bits -= outBits;
            result.push(value >> bits & maxV);
        }
    }
    if (pad) {
        if (bits > 0) {
            result.push(value << outBits - bits & maxV);
        }
    } else {
        if (bits >= inBits) return "Excess padding";
        if (value << outBits - bits & maxV) return "Non-zero padding";
    }
    return result;
}
function toWordsUnsafe(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res)) return res;
}
function toWords(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res)) return res;
    throw new Error(res);
}
function fromWordsUnsafe(words) {
    var res = convert(words, 5, 8, false);
    if (Array.isArray(res)) return res;
}
function fromWords(words) {
    var res = convert(words, 5, 8, false);
    if (Array.isArray(res)) return res;
    throw new Error(res);
}
var bech32 = {
    decodeUnsafe,
    decode: decode3,
    encode: encode2,
    toWordsUnsafe,
    toWords,
    fromWordsUnsafe,
    fromWords
};
bech32.decode;
bech32.decodeUnsafe;
bech32.encode;
bech32.fromWords;
bech32.fromWordsUnsafe;
bech32.toWords;
bech32.toWordsUnsafe;
const version23 = "providers/5.7.2";
const logger221 = new Logger(version23);
class Formatter {
    constructor(){
        this.formats = this.getDefaultFormats();
    }
    getDefaultFormats() {
        const formats = {};
        const address2 = this.address.bind(this);
        const bigNumber = this.bigNumber.bind(this);
        const blockTag = this.blockTag.bind(this);
        const data = this.data.bind(this);
        const hash2 = this.hash.bind(this);
        const hex = this.hex.bind(this);
        const number = this.number.bind(this);
        const type = this.type.bind(this);
        const strictData = (v)=>{
            return this.data(v, true);
        };
        formats.transaction = {
            hash: hash2,
            type,
            accessList: Formatter.allowNull(this.accessList.bind(this), null),
            blockHash: Formatter.allowNull(hash2, null),
            blockNumber: Formatter.allowNull(number, null),
            transactionIndex: Formatter.allowNull(number, null),
            confirmations: Formatter.allowNull(number, null),
            from: address2,
            gasPrice: Formatter.allowNull(bigNumber),
            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
            maxFeePerGas: Formatter.allowNull(bigNumber),
            gasLimit: bigNumber,
            to: Formatter.allowNull(address2, null),
            value: bigNumber,
            nonce: number,
            data,
            r: Formatter.allowNull(this.uint256),
            s: Formatter.allowNull(this.uint256),
            v: Formatter.allowNull(number),
            creates: Formatter.allowNull(address2, null),
            raw: Formatter.allowNull(data)
        };
        formats.transactionRequest = {
            from: Formatter.allowNull(address2),
            nonce: Formatter.allowNull(number),
            gasLimit: Formatter.allowNull(bigNumber),
            gasPrice: Formatter.allowNull(bigNumber),
            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
            maxFeePerGas: Formatter.allowNull(bigNumber),
            to: Formatter.allowNull(address2),
            value: Formatter.allowNull(bigNumber),
            data: Formatter.allowNull(strictData),
            type: Formatter.allowNull(number),
            accessList: Formatter.allowNull(this.accessList.bind(this), null)
        };
        formats.receiptLog = {
            transactionIndex: number,
            blockNumber: number,
            transactionHash: hash2,
            address: address2,
            topics: Formatter.arrayOf(hash2),
            data,
            logIndex: number,
            blockHash: hash2
        };
        formats.receipt = {
            to: Formatter.allowNull(this.address, null),
            from: Formatter.allowNull(this.address, null),
            contractAddress: Formatter.allowNull(address2, null),
            transactionIndex: number,
            root: Formatter.allowNull(hex),
            gasUsed: bigNumber,
            logsBloom: Formatter.allowNull(data),
            blockHash: hash2,
            transactionHash: hash2,
            logs: Formatter.arrayOf(this.receiptLog.bind(this)),
            blockNumber: number,
            confirmations: Formatter.allowNull(number, null),
            cumulativeGasUsed: bigNumber,
            effectiveGasPrice: Formatter.allowNull(bigNumber),
            status: Formatter.allowNull(number),
            type
        };
        formats.block = {
            hash: Formatter.allowNull(hash2),
            parentHash: hash2,
            number,
            timestamp: number,
            nonce: Formatter.allowNull(hex),
            difficulty: this.difficulty.bind(this),
            gasLimit: bigNumber,
            gasUsed: bigNumber,
            miner: Formatter.allowNull(address2),
            extraData: data,
            transactions: Formatter.allowNull(Formatter.arrayOf(hash2)),
            baseFeePerGas: Formatter.allowNull(bigNumber)
        };
        formats.blockWithTransactions = shallowCopy(formats.block);
        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
        formats.filter = {
            fromBlock: Formatter.allowNull(blockTag, void 0),
            toBlock: Formatter.allowNull(blockTag, void 0),
            blockHash: Formatter.allowNull(hash2, void 0),
            address: Formatter.allowNull(address2, void 0),
            topics: Formatter.allowNull(this.topics.bind(this), void 0)
        };
        formats.filterLog = {
            blockNumber: Formatter.allowNull(number),
            blockHash: Formatter.allowNull(hash2),
            transactionIndex: number,
            removed: Formatter.allowNull(this.boolean.bind(this)),
            address: address2,
            data: Formatter.allowFalsish(data, "0x"),
            topics: Formatter.arrayOf(hash2),
            transactionHash: hash2,
            logIndex: number
        };
        return formats;
    }
    accessList(accessList) {
        return accessListify(accessList || []);
    }
    number(number) {
        if (number === "0x") {
            return 0;
        }
        return BigNumber.from(number).toNumber();
    }
    type(number) {
        if (number === "0x" || number == null) {
            return 0;
        }
        return BigNumber.from(number).toNumber();
    }
    bigNumber(value) {
        return BigNumber.from(value);
    }
    boolean(value) {
        if (typeof value === "boolean") {
            return value;
        }
        if (typeof value === "string") {
            value = value.toLowerCase();
            if (value === "true") {
                return true;
            }
            if (value === "false") {
                return false;
            }
        }
        throw new Error("invalid boolean - " + value);
    }
    hex(value, strict) {
        if (typeof value === "string") {
            if (!strict && value.substring(0, 2) !== "0x") {
                value = "0x" + value;
            }
            if (isHexString(value)) {
                return value.toLowerCase();
            }
        }
        return logger221.throwArgumentError("invalid hash", "value", value);
    }
    data(value, strict) {
        const result = this.hex(value, strict);
        if (result.length % 2 !== 0) {
            throw new Error("invalid data; odd-length - " + value);
        }
        return result;
    }
    address(value) {
        return getAddress(value);
    }
    callAddress(value) {
        if (!isHexString(value, 32)) {
            return null;
        }
        const address2 = getAddress(hexDataSlice(value, 12));
        return address2 === AddressZero ? null : address2;
    }
    contractAddress(value) {
        return getContractAddress(value);
    }
    blockTag(blockTag) {
        if (blockTag == null) {
            return "latest";
        }
        if (blockTag === "earliest") {
            return "0x0";
        }
        switch(blockTag){
            case "earliest":
                return "0x0";
            case "latest":
            case "pending":
            case "safe":
            case "finalized":
                return blockTag;
        }
        if (typeof blockTag === "number" || isHexString(blockTag)) {
            return hexValue(blockTag);
        }
        throw new Error("invalid blockTag");
    }
    hash(value, strict) {
        const result = this.hex(value, strict);
        if (hexDataLength(result) !== 32) {
            return logger221.throwArgumentError("invalid hash", "value", value);
        }
        return result;
    }
    difficulty(value) {
        if (value == null) {
            return null;
        }
        const v = BigNumber.from(value);
        try {
            return v.toNumber();
        } catch (error) {}
        return null;
    }
    uint256(value) {
        if (!isHexString(value)) {
            throw new Error("invalid uint256");
        }
        return hexZeroPad(value, 32);
    }
    _block(value, format) {
        if (value.author != null && value.miner == null) {
            value.miner = value.author;
        }
        const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
        const result = Formatter.check(format, value);
        result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);
        return result;
    }
    block(value) {
        return this._block(value, this.formats.block);
    }
    blockWithTransactions(value) {
        return this._block(value, this.formats.blockWithTransactions);
    }
    transactionRequest(value) {
        return Formatter.check(this.formats.transactionRequest, value);
    }
    transactionResponse(transaction) {
        if (transaction.gas != null && transaction.gasLimit == null) {
            transaction.gasLimit = transaction.gas;
        }
        if (transaction.to && BigNumber.from(transaction.to).isZero()) {
            transaction.to = "0x0000000000000000000000000000000000000000";
        }
        if (transaction.input != null && transaction.data == null) {
            transaction.data = transaction.input;
        }
        if (transaction.to == null && transaction.creates == null) {
            transaction.creates = this.contractAddress(transaction);
        }
        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
            transaction.accessList = [];
        }
        const result = Formatter.check(this.formats.transaction, transaction);
        if (transaction.chainId != null) {
            let chainId = transaction.chainId;
            if (isHexString(chainId)) {
                chainId = BigNumber.from(chainId).toNumber();
            }
            result.chainId = chainId;
        } else {
            let chainId = transaction.networkId;
            if (chainId == null && result.v == null) {
                chainId = transaction.chainId;
            }
            if (isHexString(chainId)) {
                chainId = BigNumber.from(chainId).toNumber();
            }
            if (typeof chainId !== "number" && result.v != null) {
                chainId = (result.v - 35) / 2;
                if (chainId < 0) {
                    chainId = 0;
                }
                chainId = parseInt(chainId);
            }
            if (typeof chainId !== "number") {
                chainId = 0;
            }
            result.chainId = chainId;
        }
        if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
            result.blockHash = null;
        }
        return result;
    }
    transaction(value) {
        return parse(value);
    }
    receiptLog(value) {
        return Formatter.check(this.formats.receiptLog, value);
    }
    receipt(value) {
        const result = Formatter.check(this.formats.receipt, value);
        if (result.root != null) {
            if (result.root.length <= 4) {
                const value2 = BigNumber.from(result.root).toNumber();
                if (value2 === 0 || value2 === 1) {
                    if (result.status != null && result.status !== value2) {
                        logger221.throwArgumentError("alt-root-status/status mismatch", "value", {
                            root: result.root,
                            status: result.status
                        });
                    }
                    result.status = value2;
                    delete result.root;
                } else {
                    logger221.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                }
            } else if (result.root.length !== 66) {
                logger221.throwArgumentError("invalid root hash", "value.root", result.root);
            }
        }
        if (result.status != null) {
            result.byzantium = true;
        }
        return result;
    }
    topics(value) {
        if (Array.isArray(value)) {
            return value.map((v)=>this.topics(v));
        } else if (value != null) {
            return this.hash(value, true);
        }
        return null;
    }
    filter(value) {
        return Formatter.check(this.formats.filter, value);
    }
    filterLog(value) {
        return Formatter.check(this.formats.filterLog, value);
    }
    static check(format, object) {
        const result = {};
        for(const key in format){
            try {
                const value = format[key](object[key]);
                if (value !== void 0) {
                    result[key] = value;
                }
            } catch (error) {
                error.checkKey = key;
                error.checkValue = object[key];
                throw error;
            }
        }
        return result;
    }
    static allowNull(format, nullValue) {
        return function(value) {
            if (value == null) {
                return nullValue;
            }
            return format(value);
        };
    }
    static allowFalsish(format, replaceValue) {
        return function(value) {
            if (!value) {
                return replaceValue;
            }
            return format(value);
        };
    }
    static arrayOf(format) {
        return function(array) {
            if (!Array.isArray(array)) {
                throw new Error("not an array");
            }
            const result = [];
            array.forEach(function(value) {
                result.push(format(value));
            });
            return result;
        };
    }
}
function isCommunityResourcable(value) {
    return value && typeof value.isCommunityResource === "function";
}
function isCommunityResource(value) {
    return isCommunityResourcable(value) && value.isCommunityResource();
}
let throttleMessage = false;
function showThrottleMessage() {
    if (throttleMessage) {
        return;
    }
    throttleMessage = true;
    console.log("========= NOTICE =========");
    console.log("Request-Rate Exceeded  (this message will not be repeated)");
    console.log("");
    console.log("The default API keys for each service are provided as a highly-throttled,");
    console.log("community resource for low-traffic projects and early prototyping.");
    console.log("");
    console.log("While your application will continue to function, we highly recommended");
    console.log("signing up for your own API keys to improve performance, increase your");
    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
    console.log("");
    console.log("For more details: https://docs.ethers.io/api-keys/");
    console.log("==========================");
}
var __awaiter8 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger$14 = new Logger(version23);
function checkTopic(topic) {
    if (topic == null) {
        return "null";
    }
    if (hexDataLength(topic) !== 32) {
        logger$14.throwArgumentError("invalid topic", "topic", topic);
    }
    return topic.toLowerCase();
}
function serializeTopics(topics) {
    topics = topics.slice();
    while(topics.length > 0 && topics[topics.length - 1] == null){
        topics.pop();
    }
    return topics.map((topic)=>{
        if (Array.isArray(topic)) {
            const unique = {};
            topic.forEach((topic2)=>{
                unique[checkTopic(topic2)] = true;
            });
            const sorted = Object.keys(unique);
            sorted.sort();
            return sorted.join("|");
        } else {
            return checkTopic(topic);
        }
    }).join("&");
}
function deserializeTopics(data) {
    if (data === "") {
        return [];
    }
    return data.split(/&/g).map((topic)=>{
        if (topic === "") {
            return [];
        }
        const comps = topic.split("|").map((topic2)=>{
            return topic2 === "null" ? null : topic2;
        });
        return comps.length === 1 ? comps[0] : comps;
    });
}
function getEventTag1(eventName) {
    if (typeof eventName === "string") {
        eventName = eventName.toLowerCase();
        if (hexDataLength(eventName) === 32) {
            return "tx:" + eventName;
        }
        if (eventName.indexOf(":") === -1) {
            return eventName;
        }
    } else if (Array.isArray(eventName)) {
        return "filter:*:" + serializeTopics(eventName);
    } else if (ForkEvent.isForkEvent(eventName)) {
        logger$14.warn("not implemented");
        throw new Error("not implemented");
    } else if (eventName && typeof eventName === "object") {
        return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
    }
    throw new Error("invalid event - " + eventName);
}
function getTime() {
    return new Date().getTime();
}
function stall(duration) {
    return new Promise((resolve)=>{
        setTimeout(resolve, duration);
    });
}
const PollableEvents = [
    "block",
    "network",
    "pending",
    "poll"
];
class Event {
    constructor(tag, listener, once){
        defineReadOnly(this, "tag", tag);
        defineReadOnly(this, "listener", listener);
        defineReadOnly(this, "once", once);
        this._lastBlockNumber = -2;
        this._inflight = false;
    }
    get event() {
        switch(this.type){
            case "tx":
                return this.hash;
            case "filter":
                return this.filter;
        }
        return this.tag;
    }
    get type() {
        return this.tag.split(":")[0];
    }
    get hash() {
        const comps = this.tag.split(":");
        if (comps[0] !== "tx") {
            return null;
        }
        return comps[1];
    }
    get filter() {
        const comps = this.tag.split(":");
        if (comps[0] !== "filter") {
            return null;
        }
        const address2 = comps[1];
        const topics = deserializeTopics(comps[2]);
        const filter = {};
        if (topics.length > 0) {
            filter.topics = topics;
        }
        if (address2 && address2 !== "*") {
            filter.address = address2;
        }
        return filter;
    }
    pollable() {
        return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
    }
}
const coinInfos = {
    "0": {
        symbol: "btc",
        p2pkh: 0,
        p2sh: 5,
        prefix: "bc"
    },
    "2": {
        symbol: "ltc",
        p2pkh: 48,
        p2sh: 50,
        prefix: "ltc"
    },
    "3": {
        symbol: "doge",
        p2pkh: 30,
        p2sh: 22
    },
    "60": {
        symbol: "eth",
        ilk: "eth"
    },
    "61": {
        symbol: "etc",
        ilk: "eth"
    },
    "700": {
        symbol: "xdai",
        ilk: "eth"
    }
};
function bytes32ify(value) {
    return hexZeroPad(BigNumber.from(value).toHexString(), 32);
}
function base58Encode(data) {
    return Base58.encode(concat([
        data,
        hexDataSlice(sha2561(sha2561(data)), 0, 4)
    ]));
}
const matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
const matchers = [
    new RegExp("^(https)://(.*)$", "i"),
    new RegExp("^(data):(.*)$", "i"),
    matcherIpfs,
    new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];
function _parseString(result, start) {
    try {
        return toUtf8String(_parseBytes(result, start));
    } catch (error) {}
    return null;
}
function _parseBytes(result, start) {
    if (result === "0x") {
        return null;
    }
    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();
    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
    return hexDataSlice(result, offset + 32, offset + 32 + length);
}
function getIpfsLink(link) {
    if (link.match(/^ipfs:\/\/ipfs\//i)) {
        link = link.substring(12);
    } else if (link.match(/^ipfs:\/\//i)) {
        link = link.substring(7);
    } else {
        logger$14.throwArgumentError("unsupported IPFS format", "link", link);
    }
    return `https://gateway.ipfs.io/ipfs/${link}`;
}
function numPad(value) {
    const result = arrayify(value);
    if (result.length > 32) {
        throw new Error("internal; should not happen");
    }
    const padded = new Uint8Array(32);
    padded.set(result, 32 - result.length);
    return padded;
}
function bytesPad(value) {
    if (value.length % 32 === 0) {
        return value;
    }
    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
    result.set(value);
    return result;
}
function encodeBytes(datas) {
    const result = [];
    let byteCount = 0;
    for(let i = 0; i < datas.length; i++){
        result.push(null);
        byteCount += 32;
    }
    for(let i = 0; i < datas.length; i++){
        const data = arrayify(datas[i]);
        result[i] = numPad(byteCount);
        result.push(numPad(data.length));
        result.push(bytesPad(data));
        byteCount += 32 + Math.ceil(data.length / 32) * 32;
    }
    return hexConcat(result);
}
class Resolver {
    constructor(provider, address2, name, resolvedAddress){
        defineReadOnly(this, "provider", provider);
        defineReadOnly(this, "name", name);
        defineReadOnly(this, "address", provider.formatter.address(address2));
        defineReadOnly(this, "_resolvedAddress", resolvedAddress);
    }
    supportsWildcard() {
        if (!this._supportsEip2544) {
            this._supportsEip2544 = this.provider.call({
                to: this.address,
                data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
            }).then((result)=>{
                return BigNumber.from(result).eq(1);
            }).catch((error)=>{
                if (error.code === Logger.errors.CALL_EXCEPTION) {
                    return false;
                }
                this._supportsEip2544 = null;
                throw error;
            });
        }
        return this._supportsEip2544;
    }
    _fetch(selector, parameters) {
        return __awaiter8(this, void 0, void 0, function*() {
            const tx = {
                to: this.address,
                ccipReadEnabled: true,
                data: hexConcat([
                    selector,
                    namehash(this.name),
                    parameters || "0x"
                ])
            };
            let parseBytes = false;
            if (yield this.supportsWildcard()) {
                parseBytes = true;
                tx.data = hexConcat([
                    "0x9061b923",
                    encodeBytes([
                        dnsEncode(this.name),
                        tx.data
                    ])
                ]);
            }
            try {
                let result = yield this.provider.call(tx);
                if (arrayify(result).length % 32 === 4) {
                    logger$14.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
                        transaction: tx,
                        data: result
                    });
                }
                if (parseBytes) {
                    result = _parseBytes(result, 0);
                }
                return result;
            } catch (error) {
                if (error.code === Logger.errors.CALL_EXCEPTION) {
                    return null;
                }
                throw error;
            }
        });
    }
    _fetchBytes(selector, parameters) {
        return __awaiter8(this, void 0, void 0, function*() {
            const result = yield this._fetch(selector, parameters);
            if (result != null) {
                return _parseBytes(result, 0);
            }
            return null;
        });
    }
    _getAddress(coinType, hexBytes) {
        const coinInfo = coinInfos[String(coinType)];
        if (coinInfo == null) {
            logger$14.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
                operation: `getAddress(${coinType})`
            });
        }
        if (coinInfo.ilk === "eth") {
            return this.provider.formatter.address(hexBytes);
        }
        const bytes2 = arrayify(hexBytes);
        if (coinInfo.p2pkh != null) {
            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
            if (p2pkh) {
                const length = parseInt(p2pkh[1], 16);
                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
                    return base58Encode(concat([
                        [
                            coinInfo.p2pkh
                        ],
                        "0x" + p2pkh[2]
                    ]));
                }
            }
        }
        if (coinInfo.p2sh != null) {
            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
            if (p2sh) {
                const length = parseInt(p2sh[1], 16);
                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
                    return base58Encode(concat([
                        [
                            coinInfo.p2sh
                        ],
                        "0x" + p2sh[2]
                    ]));
                }
            }
        }
        if (coinInfo.prefix != null) {
            const length = bytes2[1];
            let version2 = bytes2[0];
            if (version2 === 0) {
                if (length !== 20 && length !== 32) {
                    version2 = -1;
                }
            } else {
                version2 = -1;
            }
            if (version2 >= 0 && bytes2.length === 2 + length && length >= 1 && length <= 75) {
                const words = bech32.toWords(bytes2.slice(2));
                words.unshift(version2);
                return bech32.encode(coinInfo.prefix, words);
            }
        }
        return null;
    }
    getAddress(coinType) {
        return __awaiter8(this, void 0, void 0, function*() {
            if (coinType == null) {
                coinType = 60;
            }
            if (coinType === 60) {
                try {
                    const result = yield this._fetch("0x3b3b57de");
                    if (result === "0x" || result === HashZero) {
                        return null;
                    }
                    return this.provider.formatter.callAddress(result);
                } catch (error) {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        return null;
                    }
                    throw error;
                }
            }
            const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
            if (hexBytes == null || hexBytes === "0x") {
                return null;
            }
            const address2 = this._getAddress(coinType, hexBytes);
            if (address2 == null) {
                logger$14.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: `getAddress(${coinType})`,
                    coinType,
                    data: hexBytes
                });
            }
            return address2;
        });
    }
    getAvatar() {
        return __awaiter8(this, void 0, void 0, function*() {
            const linkage = [
                {
                    type: "name",
                    content: this.name
                }
            ];
            try {
                const avatar = yield this.getText("avatar");
                if (avatar == null) {
                    return null;
                }
                for(let i = 0; i < matchers.length; i++){
                    const match = avatar.match(matchers[i]);
                    if (match == null) {
                        continue;
                    }
                    const scheme = match[1].toLowerCase();
                    switch(scheme){
                        case "https":
                            linkage.push({
                                type: "url",
                                content: avatar
                            });
                            return {
                                linkage,
                                url: avatar
                            };
                        case "data":
                            linkage.push({
                                type: "data",
                                content: avatar
                            });
                            return {
                                linkage,
                                url: avatar
                            };
                        case "ipfs":
                            linkage.push({
                                type: "ipfs",
                                content: avatar
                            });
                            return {
                                linkage,
                                url: getIpfsLink(avatar)
                            };
                        case "erc721":
                        case "erc1155":
                            {
                                const selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                                linkage.push({
                                    type: scheme,
                                    content: avatar
                                });
                                const owner = this._resolvedAddress || (yield this.getAddress());
                                const comps = (match[2] || "").split("/");
                                if (comps.length !== 2) {
                                    return null;
                                }
                                const addr = yield this.provider.formatter.address(comps[0]);
                                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
                                if (scheme === "erc721") {
                                    const tokenOwner = this.provider.formatter.callAddress((yield this.provider.call({
                                        to: addr,
                                        data: hexConcat([
                                            "0x6352211e",
                                            tokenId
                                        ])
                                    })));
                                    if (owner !== tokenOwner) {
                                        return null;
                                    }
                                    linkage.push({
                                        type: "owner",
                                        content: tokenOwner
                                    });
                                } else if (scheme === "erc1155") {
                                    const balance = BigNumber.from((yield this.provider.call({
                                        to: addr,
                                        data: hexConcat([
                                            "0x00fdd58e",
                                            hexZeroPad(owner, 32),
                                            tokenId
                                        ])
                                    })));
                                    if (balance.isZero()) {
                                        return null;
                                    }
                                    linkage.push({
                                        type: "balance",
                                        content: balance.toString()
                                    });
                                }
                                const tx = {
                                    to: this.provider.formatter.address(comps[0]),
                                    data: hexConcat([
                                        selector,
                                        tokenId
                                    ])
                                };
                                let metadataUrl = _parseString((yield this.provider.call(tx)), 0);
                                if (metadataUrl == null) {
                                    return null;
                                }
                                linkage.push({
                                    type: "metadata-url-base",
                                    content: metadataUrl
                                });
                                if (scheme === "erc1155") {
                                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                    linkage.push({
                                        type: "metadata-url-expanded",
                                        content: metadataUrl
                                    });
                                }
                                if (metadataUrl.match(/^ipfs:/i)) {
                                    metadataUrl = getIpfsLink(metadataUrl);
                                }
                                linkage.push({
                                    type: "metadata-url",
                                    content: metadataUrl
                                });
                                const metadata = yield fetchJson(metadataUrl);
                                if (!metadata) {
                                    return null;
                                }
                                linkage.push({
                                    type: "metadata",
                                    content: JSON.stringify(metadata)
                                });
                                let imageUrl = metadata.image;
                                if (typeof imageUrl !== "string") {
                                    return null;
                                }
                                if (imageUrl.match(/^(https:\/\/|data:)/i)) {} else {
                                    const ipfs = imageUrl.match(matcherIpfs);
                                    if (ipfs == null) {
                                        return null;
                                    }
                                    linkage.push({
                                        type: "url-ipfs",
                                        content: imageUrl
                                    });
                                    imageUrl = getIpfsLink(imageUrl);
                                }
                                linkage.push({
                                    type: "url",
                                    content: imageUrl
                                });
                                return {
                                    linkage,
                                    url: imageUrl
                                };
                            }
                    }
                }
            } catch (error) {}
            return null;
        });
    }
    getContentHash() {
        return __awaiter8(this, void 0, void 0, function*() {
            const hexBytes = yield this._fetchBytes("0xbc1c58d1");
            if (hexBytes == null || hexBytes === "0x") {
                return null;
            }
            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
            if (ipfs) {
                const length = parseInt(ipfs[3], 16);
                if (ipfs[4].length === length * 2) {
                    return "ipfs://" + Base58.encode("0x" + ipfs[1]);
                }
            }
            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
            if (ipns) {
                const length = parseInt(ipns[3], 16);
                if (ipns[4].length === length * 2) {
                    return "ipns://" + Base58.encode("0x" + ipns[1]);
                }
            }
            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
            if (swarm) {
                if (swarm[1].length === 32 * 2) {
                    return "bzz://" + swarm[1];
                }
            }
            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
            if (skynet) {
                if (skynet[1].length === 34 * 2) {
                    const urlSafe = {
                        "=": "",
                        "+": "-",
                        "/": "_"
                    };
                    const hash2 = encode1("0x" + skynet[1]).replace(/[=+\/]/g, (a)=>urlSafe[a]);
                    return "sia://" + hash2;
                }
            }
            return logger$14.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "getContentHash()",
                data: hexBytes
            });
        });
    }
    getText(key) {
        return __awaiter8(this, void 0, void 0, function*() {
            let keyBytes = toUtf8Bytes(key);
            keyBytes = concat([
                bytes32ify(64),
                bytes32ify(keyBytes.length),
                keyBytes
            ]);
            if (keyBytes.length % 32 !== 0) {
                keyBytes = concat([
                    keyBytes,
                    hexZeroPad("0x", 32 - key.length % 32)
                ]);
            }
            const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
            if (hexBytes == null || hexBytes === "0x") {
                return null;
            }
            return toUtf8String(hexBytes);
        });
    }
}
let defaultFormatter = null;
let nextPollId = 1;
class BaseProvider extends Provider {
    constructor(network){
        super();
        this._events = [];
        this._emitted = {
            block: -2
        };
        this.disableCcipRead = false;
        this.formatter = new.target.getFormatter();
        defineReadOnly(this, "anyNetwork", network === "any");
        if (this.anyNetwork) {
            network = this.detectNetwork();
        }
        if (network instanceof Promise) {
            this._networkPromise = network;
            network.catch((error)=>{});
            this._ready().catch((error)=>{});
        } else {
            const knownNetwork = getStatic(new.target, "getNetwork")(network);
            if (knownNetwork) {
                defineReadOnly(this, "_network", knownNetwork);
                this.emit("network", knownNetwork, null);
            } else {
                logger$14.throwArgumentError("invalid network", "network", network);
            }
        }
        this._maxInternalBlockNumber = -1024;
        this._lastBlockNumber = -2;
        this._maxFilterBlockRange = 10;
        this._pollingInterval = 4e3;
        this._fastQueryDate = 0;
    }
    _ready() {
        return __awaiter8(this, void 0, void 0, function*() {
            if (this._network == null) {
                let network = null;
                if (this._networkPromise) {
                    try {
                        network = yield this._networkPromise;
                    } catch (error) {}
                }
                if (network == null) {
                    network = yield this.detectNetwork();
                }
                if (!network) {
                    logger$14.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                }
                if (this._network == null) {
                    if (this.anyNetwork) {
                        this._network = network;
                    } else {
                        defineReadOnly(this, "_network", network);
                    }
                    this.emit("network", network, null);
                }
            }
            return this._network;
        });
    }
    get ready() {
        return poll(()=>{
            return this._ready().then((network)=>{
                return network;
            }, (error)=>{
                if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                    return void 0;
                }
                throw error;
            });
        });
    }
    static getFormatter() {
        if (defaultFormatter == null) {
            defaultFormatter = new Formatter();
        }
        return defaultFormatter;
    }
    static getNetwork(network) {
        return getNetwork(network == null ? "homestead" : network);
    }
    ccipReadFetch(tx, calldata, urls) {
        return __awaiter8(this, void 0, void 0, function*() {
            if (this.disableCcipRead || urls.length === 0) {
                return null;
            }
            const sender = tx.to.toLowerCase();
            const data = calldata.toLowerCase();
            const errorMessages = [];
            for(let i = 0; i < urls.length; i++){
                const url = urls[i];
                const href = url.replace("{sender}", sender).replace("{data}", data);
                const json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({
                    data,
                    sender
                });
                const result = yield fetchJson({
                    url: href,
                    errorPassThrough: true
                }, json, (value, response)=>{
                    value.status = response.statusCode;
                    return value;
                });
                if (result.data) {
                    return result.data;
                }
                const errorMessage = result.message || "unknown error";
                if (result.status >= 400 && result.status < 500) {
                    return logger$14.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, {
                        url,
                        errorMessage
                    });
                }
                errorMessages.push(errorMessage);
            }
            return logger$14.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m)=>JSON.stringify(m)).join(", ")}`, Logger.errors.SERVER_ERROR, {
                urls,
                errorMessages
            });
        });
    }
    _getInternalBlockNumber(maxAge) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this._ready();
            if (maxAge > 0) {
                while(this._internalBlockNumber){
                    const internalBlockNumber = this._internalBlockNumber;
                    try {
                        const result = yield internalBlockNumber;
                        if (getTime() - result.respTime <= maxAge) {
                            return result.blockNumber;
                        }
                        break;
                    } catch (error) {
                        if (this._internalBlockNumber === internalBlockNumber) {
                            break;
                        }
                    }
                }
            }
            const reqTime = getTime();
            const checkInternalBlockNumber = resolveProperties({
                blockNumber: this.perform("getBlockNumber", {}),
                networkError: this.getNetwork().then((network)=>null, (error)=>error)
            }).then(({ blockNumber, networkError })=>{
                if (networkError) {
                    if (this._internalBlockNumber === checkInternalBlockNumber) {
                        this._internalBlockNumber = null;
                    }
                    throw networkError;
                }
                const respTime = getTime();
                blockNumber = BigNumber.from(blockNumber).toNumber();
                if (blockNumber < this._maxInternalBlockNumber) {
                    blockNumber = this._maxInternalBlockNumber;
                }
                this._maxInternalBlockNumber = blockNumber;
                this._setFastBlockNumber(blockNumber);
                return {
                    blockNumber,
                    reqTime,
                    respTime
                };
            });
            this._internalBlockNumber = checkInternalBlockNumber;
            checkInternalBlockNumber.catch((error)=>{
                if (this._internalBlockNumber === checkInternalBlockNumber) {
                    this._internalBlockNumber = null;
                }
            });
            return (yield checkInternalBlockNumber).blockNumber;
        });
    }
    poll() {
        return __awaiter8(this, void 0, void 0, function*() {
            const pollId = nextPollId++;
            const runners = [];
            let blockNumber = null;
            try {
                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
            } catch (error) {
                this.emit("error", error);
                return;
            }
            this._setFastBlockNumber(blockNumber);
            this.emit("poll", pollId, blockNumber);
            if (blockNumber === this._lastBlockNumber) {
                this.emit("didPoll", pollId);
                return;
            }
            if (this._emitted.block === -2) {
                this._emitted.block = blockNumber - 1;
            }
            if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
                logger$14.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
                this.emit("error", logger$14.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
                    blockNumber,
                    event: "blockSkew",
                    previousBlockNumber: this._emitted.block
                }));
                this.emit("block", blockNumber);
            } else {
                for(let i = this._emitted.block + 1; i <= blockNumber; i++){
                    this.emit("block", i);
                }
            }
            if (this._emitted.block !== blockNumber) {
                this._emitted.block = blockNumber;
                Object.keys(this._emitted).forEach((key)=>{
                    if (key === "block") {
                        return;
                    }
                    const eventBlockNumber = this._emitted[key];
                    if (eventBlockNumber === "pending") {
                        return;
                    }
                    if (blockNumber - eventBlockNumber > 12) {
                        delete this._emitted[key];
                    }
                });
            }
            if (this._lastBlockNumber === -2) {
                this._lastBlockNumber = blockNumber - 1;
            }
            this._events.forEach((event)=>{
                switch(event.type){
                    case "tx":
                        {
                            const hash2 = event.hash;
                            let runner = this.getTransactionReceipt(hash2).then((receipt)=>{
                                if (!receipt || receipt.blockNumber == null) {
                                    return null;
                                }
                                this._emitted["t:" + hash2] = receipt.blockNumber;
                                this.emit(hash2, receipt);
                                return null;
                            }).catch((error)=>{
                                this.emit("error", error);
                            });
                            runners.push(runner);
                            break;
                        }
                    case "filter":
                        {
                            if (!event._inflight) {
                                event._inflight = true;
                                if (event._lastBlockNumber === -2) {
                                    event._lastBlockNumber = blockNumber - 1;
                                }
                                const filter = event.filter;
                                filter.fromBlock = event._lastBlockNumber + 1;
                                filter.toBlock = blockNumber;
                                const minFromBlock = filter.toBlock - this._maxFilterBlockRange;
                                if (minFromBlock > filter.fromBlock) {
                                    filter.fromBlock = minFromBlock;
                                }
                                if (filter.fromBlock < 0) {
                                    filter.fromBlock = 0;
                                }
                                const runner = this.getLogs(filter).then((logs)=>{
                                    event._inflight = false;
                                    if (logs.length === 0) {
                                        return;
                                    }
                                    logs.forEach((log)=>{
                                        if (log.blockNumber > event._lastBlockNumber) {
                                            event._lastBlockNumber = log.blockNumber;
                                        }
                                        this._emitted["b:" + log.blockHash] = log.blockNumber;
                                        this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                        this.emit(filter, log);
                                    });
                                }).catch((error)=>{
                                    this.emit("error", error);
                                    event._inflight = false;
                                });
                                runners.push(runner);
                            }
                            break;
                        }
                }
            });
            this._lastBlockNumber = blockNumber;
            Promise.all(runners).then(()=>{
                this.emit("didPoll", pollId);
            }).catch((error)=>{
                this.emit("error", error);
            });
            return;
        });
    }
    resetEventsBlock(blockNumber) {
        this._lastBlockNumber = blockNumber - 1;
        if (this.polling) {
            this.poll();
        }
    }
    get network() {
        return this._network;
    }
    detectNetwork() {
        return __awaiter8(this, void 0, void 0, function*() {
            return logger$14.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "provider.detectNetwork"
            });
        });
    }
    getNetwork() {
        return __awaiter8(this, void 0, void 0, function*() {
            const network = yield this._ready();
            const currentNetwork = yield this.detectNetwork();
            if (network.chainId !== currentNetwork.chainId) {
                if (this.anyNetwork) {
                    this._network = currentNetwork;
                    this._lastBlockNumber = -2;
                    this._fastBlockNumber = null;
                    this._fastBlockNumberPromise = null;
                    this._fastQueryDate = 0;
                    this._emitted.block = -2;
                    this._maxInternalBlockNumber = -1024;
                    this._internalBlockNumber = null;
                    this.emit("network", currentNetwork, network);
                    yield stall(0);
                    return this._network;
                }
                const error = logger$14.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
                    event: "changed",
                    network,
                    detectedNetwork: currentNetwork
                });
                this.emit("error", error);
                throw error;
            }
            return network;
        });
    }
    get blockNumber() {
        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber)=>{
            this._setFastBlockNumber(blockNumber);
        }, (error)=>{});
        return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
    }
    get polling() {
        return this._poller != null;
    }
    set polling(value) {
        if (value && !this._poller) {
            this._poller = setInterval(()=>{
                this.poll();
            }, this.pollingInterval);
            if (!this._bootstrapPoll) {
                this._bootstrapPoll = setTimeout(()=>{
                    this.poll();
                    this._bootstrapPoll = setTimeout(()=>{
                        if (!this._poller) {
                            this.poll();
                        }
                        this._bootstrapPoll = null;
                    }, this.pollingInterval);
                }, 0);
            }
        } else if (!value && this._poller) {
            clearInterval(this._poller);
            this._poller = null;
        }
    }
    get pollingInterval() {
        return this._pollingInterval;
    }
    set pollingInterval(value) {
        if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
            throw new Error("invalid polling interval");
        }
        this._pollingInterval = value;
        if (this._poller) {
            clearInterval(this._poller);
            this._poller = setInterval(()=>{
                this.poll();
            }, this._pollingInterval);
        }
    }
    _getFastBlockNumber() {
        const now2 = getTime();
        if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {
            this._fastQueryDate = now2;
            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber)=>{
                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                    this._fastBlockNumber = blockNumber;
                }
                return this._fastBlockNumber;
            });
        }
        return this._fastBlockNumberPromise;
    }
    _setFastBlockNumber(blockNumber) {
        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
            return;
        }
        this._fastQueryDate = getTime();
        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
            this._fastBlockNumber = blockNumber;
            this._fastBlockNumberPromise = Promise.resolve(blockNumber);
        }
    }
    waitForTransaction(transactionHash, confirmations, timeout) {
        return __awaiter8(this, void 0, void 0, function*() {
            return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);
        });
    }
    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
        return __awaiter8(this, void 0, void 0, function*() {
            const receipt = yield this.getTransactionReceipt(transactionHash);
            if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                return receipt;
            }
            return new Promise((resolve, reject)=>{
                const cancelFuncs = [];
                let done = false;
                const alreadyDone = function() {
                    if (done) {
                        return true;
                    }
                    done = true;
                    cancelFuncs.forEach((func)=>{
                        func();
                    });
                    return false;
                };
                const minedHandler = (receipt2)=>{
                    if (receipt2.confirmations < confirmations) {
                        return;
                    }
                    if (alreadyDone()) {
                        return;
                    }
                    resolve(receipt2);
                };
                this.on(transactionHash, minedHandler);
                cancelFuncs.push(()=>{
                    this.removeListener(transactionHash, minedHandler);
                });
                if (replaceable) {
                    let lastBlockNumber = replaceable.startBlock;
                    let scannedBlock = null;
                    const replaceHandler = (blockNumber)=>__awaiter8(this, void 0, void 0, function*() {
                            if (done) {
                                return;
                            }
                            yield stall(1e3);
                            this.getTransactionCount(replaceable.from).then((nonce)=>__awaiter8(this, void 0, void 0, function*() {
                                    if (done) {
                                        return;
                                    }
                                    if (nonce <= replaceable.nonce) {
                                        lastBlockNumber = blockNumber;
                                    } else {
                                        {
                                            const mined = yield this.getTransaction(transactionHash);
                                            if (mined && mined.blockNumber != null) {
                                                return;
                                            }
                                        }
                                        if (scannedBlock == null) {
                                            scannedBlock = lastBlockNumber - 3;
                                            if (scannedBlock < replaceable.startBlock) {
                                                scannedBlock = replaceable.startBlock;
                                            }
                                        }
                                        while(scannedBlock <= blockNumber){
                                            if (done) {
                                                return;
                                            }
                                            const block = yield this.getBlockWithTransactions(scannedBlock);
                                            for(let ti = 0; ti < block.transactions.length; ti++){
                                                const tx = block.transactions[ti];
                                                if (tx.hash === transactionHash) {
                                                    return;
                                                }
                                                if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                                                    if (done) {
                                                        return;
                                                    }
                                                    const receipt2 = yield this.waitForTransaction(tx.hash, confirmations);
                                                    if (alreadyDone()) {
                                                        return;
                                                    }
                                                    let reason = "replaced";
                                                    if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                                        reason = "repriced";
                                                    } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                                        reason = "cancelled";
                                                    }
                                                    reject(logger$14.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                                                        cancelled: reason === "replaced" || reason === "cancelled",
                                                        reason,
                                                        replacement: this._wrapTransaction(tx),
                                                        hash: transactionHash,
                                                        receipt: receipt2
                                                    }));
                                                    return;
                                                }
                                            }
                                            scannedBlock++;
                                        }
                                    }
                                    if (done) {
                                        return;
                                    }
                                    this.once("block", replaceHandler);
                                }), (error)=>{
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                            });
                        });
                    if (done) {
                        return;
                    }
                    this.once("block", replaceHandler);
                    cancelFuncs.push(()=>{
                        this.removeListener("block", replaceHandler);
                    });
                }
                if (typeof timeout === "number" && timeout > 0) {
                    const timer2 = setTimeout(()=>{
                        if (alreadyDone()) {
                            return;
                        }
                        reject(logger$14.makeError("timeout exceeded", Logger.errors.TIMEOUT, {
                            timeout
                        }));
                    }, timeout);
                    if (timer2.unref) {
                        timer2.unref();
                    }
                    cancelFuncs.push(()=>{
                        clearTimeout(timer2);
                    });
                }
            });
        });
    }
    getBlockNumber() {
        return __awaiter8(this, void 0, void 0, function*() {
            return this._getInternalBlockNumber(0);
        });
    }
    getGasPrice() {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const result = yield this.perform("getGasPrice", {});
            try {
                return BigNumber.from(result);
            } catch (error) {
                return logger$14.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                    method: "getGasPrice",
                    result,
                    error
                });
            }
        });
    }
    getBalance(addressOrName, blockTag) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
            });
            const result = yield this.perform("getBalance", params);
            try {
                return BigNumber.from(result);
            } catch (error) {
                return logger$14.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                    method: "getBalance",
                    params,
                    result,
                    error
                });
            }
        });
    }
    getTransactionCount(addressOrName, blockTag) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
            });
            const result = yield this.perform("getTransactionCount", params);
            try {
                return BigNumber.from(result).toNumber();
            } catch (error) {
                return logger$14.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                    method: "getTransactionCount",
                    params,
                    result,
                    error
                });
            }
        });
    }
    getCode(addressOrName, blockTag) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
            });
            const result = yield this.perform("getCode", params);
            try {
                return hexlify(result);
            } catch (error) {
                return logger$14.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                    method: "getCode",
                    params,
                    result,
                    error
                });
            }
        });
    }
    getStorageAt(addressOrName, position, blockTag) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag),
                position: Promise.resolve(position).then((p)=>hexValue(p))
            });
            const result = yield this.perform("getStorageAt", params);
            try {
                return hexlify(result);
            } catch (error) {
                return logger$14.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                    method: "getStorageAt",
                    params,
                    result,
                    error
                });
            }
        });
    }
    _wrapTransaction(tx, hash2, startBlock) {
        if (hash2 != null && hexDataLength(hash2) !== 32) {
            throw new Error("invalid response - sendTransaction");
        }
        const result = tx;
        if (hash2 != null && tx.hash !== hash2) {
            logger$14.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, {
                expectedHash: tx.hash,
                returnedHash: hash2
            });
        }
        result.wait = (confirms, timeout)=>__awaiter8(this, void 0, void 0, function*() {
                if (confirms == null) {
                    confirms = 1;
                }
                if (timeout == null) {
                    timeout = 0;
                }
                let replacement = void 0;
                if (confirms !== 0 && startBlock != null) {
                    replacement = {
                        data: tx.data,
                        from: tx.from,
                        nonce: tx.nonce,
                        to: tx.to,
                        value: tx.value,
                        startBlock
                    };
                }
                const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
                if (receipt == null && confirms === 0) {
                    return null;
                }
                this._emitted["t:" + tx.hash] = receipt.blockNumber;
                if (receipt.status === 0) {
                    logger$14.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
                        transactionHash: tx.hash,
                        transaction: tx,
                        receipt
                    });
                }
                return receipt;
            });
        return result;
    }
    sendTransaction(signedTransaction) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const hexTx = yield Promise.resolve(signedTransaction).then((t)=>hexlify(t));
            const tx = this.formatter.transaction(signedTransaction);
            if (tx.confirmations == null) {
                tx.confirmations = 0;
            }
            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
            try {
                const hash2 = yield this.perform("sendTransaction", {
                    signedTransaction: hexTx
                });
                return this._wrapTransaction(tx, hash2, blockNumber);
            } catch (error) {
                error.transaction = tx;
                error.transactionHash = tx.hash;
                throw error;
            }
        });
    }
    _getTransactionRequest(transaction) {
        return __awaiter8(this, void 0, void 0, function*() {
            const values = yield transaction;
            const tx = {};
            [
                "from",
                "to"
            ].forEach((key)=>{
                if (values[key] == null) {
                    return;
                }
                tx[key] = Promise.resolve(values[key]).then((v)=>v ? this._getAddress(v) : null);
            });
            [
                "gasLimit",
                "gasPrice",
                "maxFeePerGas",
                "maxPriorityFeePerGas",
                "value"
            ].forEach((key)=>{
                if (values[key] == null) {
                    return;
                }
                tx[key] = Promise.resolve(values[key]).then((v)=>v ? BigNumber.from(v) : null);
            });
            [
                "type"
            ].forEach((key)=>{
                if (values[key] == null) {
                    return;
                }
                tx[key] = Promise.resolve(values[key]).then((v)=>v != null ? v : null);
            });
            if (values.accessList) {
                tx.accessList = this.formatter.accessList(values.accessList);
            }
            [
                "data"
            ].forEach((key)=>{
                if (values[key] == null) {
                    return;
                }
                tx[key] = Promise.resolve(values[key]).then((v)=>v ? hexlify(v) : null);
            });
            return this.formatter.transactionRequest((yield resolveProperties(tx)));
        });
    }
    _getFilter(filter) {
        return __awaiter8(this, void 0, void 0, function*() {
            filter = yield filter;
            const result = {};
            if (filter.address != null) {
                result.address = this._getAddress(filter.address);
            }
            [
                "blockHash",
                "topics"
            ].forEach((key)=>{
                if (filter[key] == null) {
                    return;
                }
                result[key] = filter[key];
            });
            [
                "fromBlock",
                "toBlock"
            ].forEach((key)=>{
                if (filter[key] == null) {
                    return;
                }
                result[key] = this._getBlockTag(filter[key]);
            });
            return this.formatter.filter((yield resolveProperties(result)));
        });
    }
    _call(transaction, blockTag, attempt) {
        return __awaiter8(this, void 0, void 0, function*() {
            if (attempt >= 10) {
                logger$14.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
                    redirects: attempt,
                    transaction
                });
            }
            const txSender = transaction.to;
            const result = yield this.perform("call", {
                transaction,
                blockTag
            });
            if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && hexDataLength(result) % 32 === 4) {
                try {
                    const data = hexDataSlice(result, 4);
                    const sender = hexDataSlice(data, 0, 32);
                    if (!BigNumber.from(sender).eq(txSender)) {
                        logger$14.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
                            name: "OffchainLookup",
                            signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                            transaction,
                            data: result
                        });
                    }
                    const urls = [];
                    const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();
                    const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
                    const urlsData = hexDataSlice(data, urlsOffset + 32);
                    for(let u = 0; u < urlsLength; u++){
                        const url = _parseString(urlsData, u * 32);
                        if (url == null) {
                            logger$14.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction,
                                data: result
                            });
                        }
                        urls.push(url);
                    }
                    const calldata = _parseBytes(data, 64);
                    if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {
                        logger$14.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
                            name: "OffchainLookup",
                            signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                            transaction,
                            data: result
                        });
                    }
                    const callbackSelector = hexDataSlice(data, 96, 100);
                    const extraData = _parseBytes(data, 128);
                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
                    if (ccipResult == null) {
                        logger$14.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
                            name: "OffchainLookup",
                            signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                            transaction,
                            data: result
                        });
                    }
                    const tx = {
                        to: txSender,
                        data: hexConcat([
                            callbackSelector,
                            encodeBytes([
                                ccipResult,
                                extraData
                            ])
                        ])
                    };
                    return this._call(tx, blockTag, attempt + 1);
                } catch (error) {
                    if (error.code === Logger.errors.SERVER_ERROR) {
                        throw error;
                    }
                }
            }
            try {
                return hexlify(result);
            } catch (error) {
                return logger$14.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                    method: "call",
                    params: {
                        transaction,
                        blockTag
                    },
                    result,
                    error
                });
            }
        });
    }
    call(transaction, blockTag) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const resolved = yield resolveProperties({
                transaction: this._getTransactionRequest(transaction),
                blockTag: this._getBlockTag(blockTag),
                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
            });
            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
        });
    }
    estimateGas(transaction) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield resolveProperties({
                transaction: this._getTransactionRequest(transaction)
            });
            const result = yield this.perform("estimateGas", params);
            try {
                return BigNumber.from(result);
            } catch (error) {
                return logger$14.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                    method: "estimateGas",
                    params,
                    result,
                    error
                });
            }
        });
    }
    _getAddress(addressOrName) {
        return __awaiter8(this, void 0, void 0, function*() {
            addressOrName = yield addressOrName;
            if (typeof addressOrName !== "string") {
                logger$14.throwArgumentError("invalid address or ENS name", "name", addressOrName);
            }
            const address2 = yield this.resolveName(addressOrName);
            if (address2 == null) {
                logger$14.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: `resolveName(${JSON.stringify(addressOrName)})`
                });
            }
            return address2;
        });
    }
    _getBlock(blockHashOrBlockTag, includeTransactions) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            blockHashOrBlockTag = yield blockHashOrBlockTag;
            let blockNumber = -128;
            const params = {
                includeTransactions: !!includeTransactions
            };
            if (isHexString(blockHashOrBlockTag, 32)) {
                params.blockHash = blockHashOrBlockTag;
            } else {
                try {
                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                    if (isHexString(params.blockTag)) {
                        blockNumber = parseInt(params.blockTag.substring(2), 16);
                    }
                } catch (error) {
                    logger$14.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                }
            }
            return poll(()=>__awaiter8(this, void 0, void 0, function*() {
                    const block = yield this.perform("getBlock", params);
                    if (block == null) {
                        if (params.blockHash != null) {
                            if (this._emitted["b:" + params.blockHash] == null) {
                                return null;
                            }
                        }
                        if (params.blockTag != null) {
                            if (blockNumber > this._emitted.block) {
                                return null;
                            }
                        }
                        return void 0;
                    }
                    if (includeTransactions) {
                        let blockNumber2 = null;
                        for(let i = 0; i < block.transactions.length; i++){
                            const tx = block.transactions[i];
                            if (tx.blockNumber == null) {
                                tx.confirmations = 0;
                            } else if (tx.confirmations == null) {
                                if (blockNumber2 == null) {
                                    blockNumber2 = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                }
                                let confirmations = blockNumber2 - tx.blockNumber + 1;
                                if (confirmations <= 0) {
                                    confirmations = 1;
                                }
                                tx.confirmations = confirmations;
                            }
                        }
                        const blockWithTxs = this.formatter.blockWithTransactions(block);
                        blockWithTxs.transactions = blockWithTxs.transactions.map((tx)=>this._wrapTransaction(tx));
                        return blockWithTxs;
                    }
                    return this.formatter.block(block);
                }), {
                oncePoll: this
            });
        });
    }
    getBlock(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, false);
    }
    getBlockWithTransactions(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, true);
    }
    getTransaction(transactionHash) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            transactionHash = yield transactionHash;
            const params = {
                transactionHash: this.formatter.hash(transactionHash, true)
            };
            return poll(()=>__awaiter8(this, void 0, void 0, function*() {
                    const result = yield this.perform("getTransaction", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return void 0;
                    }
                    const tx = this.formatter.transactionResponse(result);
                    if (tx.blockNumber == null) {
                        tx.confirmations = 0;
                    } else if (tx.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        let confirmations = blockNumber - tx.blockNumber + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        tx.confirmations = confirmations;
                    }
                    return this._wrapTransaction(tx);
                }), {
                oncePoll: this
            });
        });
    }
    getTransactionReceipt(transactionHash) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            transactionHash = yield transactionHash;
            const params = {
                transactionHash: this.formatter.hash(transactionHash, true)
            };
            return poll(()=>__awaiter8(this, void 0, void 0, function*() {
                    const result = yield this.perform("getTransactionReceipt", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return void 0;
                    }
                    if (result.blockHash == null) {
                        return void 0;
                    }
                    const receipt = this.formatter.receipt(result);
                    if (receipt.blockNumber == null) {
                        receipt.confirmations = 0;
                    } else if (receipt.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        let confirmations = blockNumber - receipt.blockNumber + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        receipt.confirmations = confirmations;
                    }
                    return receipt;
                }), {
                oncePoll: this
            });
        });
    }
    getLogs(filter) {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield resolveProperties({
                filter: this._getFilter(filter)
            });
            const logs = yield this.perform("getLogs", params);
            logs.forEach((log)=>{
                if (log.removed == null) {
                    log.removed = false;
                }
            });
            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
        });
    }
    getEtherPrice() {
        return __awaiter8(this, void 0, void 0, function*() {
            yield this.getNetwork();
            return this.perform("getEtherPrice", {});
        });
    }
    _getBlockTag(blockTag) {
        return __awaiter8(this, void 0, void 0, function*() {
            blockTag = yield blockTag;
            if (typeof blockTag === "number" && blockTag < 0) {
                if (blockTag % 1) {
                    logger$14.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                }
                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                blockNumber += blockTag;
                if (blockNumber < 0) {
                    blockNumber = 0;
                }
                return this.formatter.blockTag(blockNumber);
            }
            return this.formatter.blockTag(blockTag);
        });
    }
    getResolver(name) {
        return __awaiter8(this, void 0, void 0, function*() {
            let currentName = name;
            while(true){
                if (currentName === "" || currentName === ".") {
                    return null;
                }
                if (name !== "eth" && currentName === "eth") {
                    return null;
                }
                const addr = yield this._getResolver(currentName, "getResolver");
                if (addr != null) {
                    const resolver = new Resolver(this, addr, name);
                    if (currentName !== name && !(yield resolver.supportsWildcard())) {
                        return null;
                    }
                    return resolver;
                }
                currentName = currentName.split(".").slice(1).join(".");
            }
        });
    }
    _getResolver(name, operation) {
        return __awaiter8(this, void 0, void 0, function*() {
            if (operation == null) {
                operation = "ENS";
            }
            const network = yield this.getNetwork();
            if (!network.ensAddress) {
                logger$14.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation,
                    network: network.name
                });
            }
            try {
                const addrData = yield this.call({
                    to: network.ensAddress,
                    data: "0x0178b8bf" + namehash(name).substring(2)
                });
                return this.formatter.callAddress(addrData);
            } catch (error) {}
            return null;
        });
    }
    resolveName(name) {
        return __awaiter8(this, void 0, void 0, function*() {
            name = yield name;
            try {
                return Promise.resolve(this.formatter.address(name));
            } catch (error) {
                if (isHexString(name)) {
                    throw error;
                }
            }
            if (typeof name !== "string") {
                logger$14.throwArgumentError("invalid ENS name", "name", name);
            }
            const resolver = yield this.getResolver(name);
            if (!resolver) {
                return null;
            }
            return yield resolver.getAddress();
        });
    }
    lookupAddress(address2) {
        return __awaiter8(this, void 0, void 0, function*() {
            address2 = yield address2;
            address2 = this.formatter.address(address2);
            const node = address2.substring(2).toLowerCase() + ".addr.reverse";
            const resolverAddr = yield this._getResolver(node, "lookupAddress");
            if (resolverAddr == null) {
                return null;
            }
            const name = _parseString((yield this.call({
                to: resolverAddr,
                data: "0x691f3431" + namehash(node).substring(2)
            })), 0);
            const addr = yield this.resolveName(name);
            if (addr != address2) {
                return null;
            }
            return name;
        });
    }
    getAvatar(nameOrAddress) {
        return __awaiter8(this, void 0, void 0, function*() {
            let resolver = null;
            if (isHexString(nameOrAddress)) {
                const address2 = this.formatter.address(nameOrAddress);
                const node = address2.substring(2).toLowerCase() + ".addr.reverse";
                const resolverAddress = yield this._getResolver(node, "getAvatar");
                if (!resolverAddress) {
                    return null;
                }
                resolver = new Resolver(this, resolverAddress, node);
                try {
                    const avatar2 = yield resolver.getAvatar();
                    if (avatar2) {
                        return avatar2.url;
                    }
                } catch (error) {
                    if (error.code !== Logger.errors.CALL_EXCEPTION) {
                        throw error;
                    }
                }
                try {
                    const name = _parseString((yield this.call({
                        to: resolverAddress,
                        data: "0x691f3431" + namehash(node).substring(2)
                    })), 0);
                    resolver = yield this.getResolver(name);
                } catch (error) {
                    if (error.code !== Logger.errors.CALL_EXCEPTION) {
                        throw error;
                    }
                    return null;
                }
            } else {
                resolver = yield this.getResolver(nameOrAddress);
                if (!resolver) {
                    return null;
                }
            }
            const avatar = yield resolver.getAvatar();
            if (avatar == null) {
                return null;
            }
            return avatar.url;
        });
    }
    perform(method, params) {
        return logger$14.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, {
            operation: method
        });
    }
    _startEvent(event) {
        this.polling = this._events.filter((e)=>e.pollable()).length > 0;
    }
    _stopEvent(event) {
        this.polling = this._events.filter((e)=>e.pollable()).length > 0;
    }
    _addEventListener(eventName, listener, once) {
        const event = new Event(getEventTag1(eventName), listener, once);
        this._events.push(event);
        this._startEvent(event);
        return this;
    }
    on(eventName, listener) {
        return this._addEventListener(eventName, listener, false);
    }
    once(eventName, listener) {
        return this._addEventListener(eventName, listener, true);
    }
    emit(eventName, ...args) {
        let result = false;
        let stopped = [];
        let eventTag = getEventTag1(eventName);
        this._events = this._events.filter((event)=>{
            if (event.tag !== eventTag) {
                return true;
            }
            setTimeout(()=>{
                event.listener.apply(this, args);
            }, 0);
            result = true;
            if (event.once) {
                stopped.push(event);
                return false;
            }
            return true;
        });
        stopped.forEach((event)=>{
            this._stopEvent(event);
        });
        return result;
    }
    listenerCount(eventName) {
        if (!eventName) {
            return this._events.length;
        }
        let eventTag = getEventTag1(eventName);
        return this._events.filter((event)=>{
            return event.tag === eventTag;
        }).length;
    }
    listeners(eventName) {
        if (eventName == null) {
            return this._events.map((event)=>event.listener);
        }
        let eventTag = getEventTag1(eventName);
        return this._events.filter((event)=>event.tag === eventTag).map((event)=>event.listener);
    }
    off(eventName, listener) {
        if (listener == null) {
            return this.removeAllListeners(eventName);
        }
        const stopped = [];
        let found = false;
        let eventTag = getEventTag1(eventName);
        this._events = this._events.filter((event)=>{
            if (event.tag !== eventTag || event.listener != listener) {
                return true;
            }
            if (found) {
                return true;
            }
            found = true;
            stopped.push(event);
            return false;
        });
        stopped.forEach((event)=>{
            this._stopEvent(event);
        });
        return this;
    }
    removeAllListeners(eventName) {
        let stopped = [];
        if (eventName == null) {
            stopped = this._events;
            this._events = [];
        } else {
            const eventTag = getEventTag1(eventName);
            this._events = this._events.filter((event)=>{
                if (event.tag !== eventTag) {
                    return true;
                }
                stopped.push(event);
                return false;
            });
        }
        stopped.forEach((event)=>{
            this._stopEvent(event);
        });
        return this;
    }
}
var __awaiter$11 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger$21 = new Logger(version23);
const errorGas = [
    "call",
    "estimateGas"
];
function spelunk(value, requireData) {
    if (value == null) {
        return null;
    }
    if (typeof value.message === "string" && value.message.match("reverted")) {
        const data = isHexString(value.data) ? value.data : null;
        if (!requireData || data) {
            return {
                message: value.message,
                data
            };
        }
    }
    if (typeof value === "object") {
        for(const key in value){
            const result = spelunk(value[key], requireData);
            if (result) {
                return result;
            }
        }
        return null;
    }
    if (typeof value === "string") {
        try {
            return spelunk(JSON.parse(value), requireData);
        } catch (error) {}
    }
    return null;
}
function checkError(method, error, params) {
    const transaction = params.transaction || params.signedTransaction;
    if (method === "call") {
        const result = spelunk(error, true);
        if (result) {
            return result.data;
        }
        logger$21.throwError("missing revert data in call exception; Transaction reverted without a reason string", Logger.errors.CALL_EXCEPTION, {
            data: "0x",
            transaction,
            error
        });
    }
    if (method === "estimateGas") {
        let result = spelunk(error.body, false);
        if (result == null) {
            result = spelunk(error, false);
        }
        if (result) {
            logger$21.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                reason: result.message,
                method,
                transaction,
                error
            });
        }
    }
    let message = error.message;
    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
        message = error.error.message;
    } else if (typeof error.body === "string") {
        message = error.body;
    } else if (typeof error.responseText === "string") {
        message = error.responseText;
    }
    message = (message || "").toLowerCase();
    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
        logger$21.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
            error,
            method,
            transaction
        });
    }
    if (message.match(/nonce (is )?too low/i)) {
        logger$21.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
            error,
            method,
            transaction
        });
    }
    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
        logger$21.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
            error,
            method,
            transaction
        });
    }
    if (message.match(/only replay-protected/i)) {
        logger$21.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
            error,
            method,
            transaction
        });
    }
    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
        logger$21.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
            error,
            method,
            transaction
        });
    }
    throw error;
}
function timer(timeout) {
    return new Promise(function(resolve) {
        setTimeout(resolve, timeout);
    });
}
function getResult(payload) {
    if (payload.error) {
        const error = new Error(payload.error.message);
        error.code = payload.error.code;
        error.data = payload.error.data;
        throw error;
    }
    return payload.result;
}
function getLowerCase(value) {
    if (value) {
        return value.toLowerCase();
    }
    return value;
}
const _constructorGuard3 = {};
class JsonRpcSigner extends Signer {
    constructor(constructorGuard, provider, addressOrIndex){
        super();
        if (constructorGuard !== _constructorGuard3) {
            throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
        }
        defineReadOnly(this, "provider", provider);
        if (addressOrIndex == null) {
            addressOrIndex = 0;
        }
        if (typeof addressOrIndex === "string") {
            defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
            defineReadOnly(this, "_index", null);
        } else if (typeof addressOrIndex === "number") {
            defineReadOnly(this, "_index", addressOrIndex);
            defineReadOnly(this, "_address", null);
        } else {
            logger$21.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
        }
    }
    connect(provider) {
        return logger$21.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "connect"
        });
    }
    connectUnchecked() {
        return new UncheckedJsonRpcSigner(_constructorGuard3, this.provider, this._address || this._index);
    }
    getAddress() {
        if (this._address) {
            return Promise.resolve(this._address);
        }
        return this.provider.send("eth_accounts", []).then((accounts)=>{
            if (accounts.length <= this._index) {
                logger$21.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getAddress"
                });
            }
            return this.provider.formatter.address(accounts[this._index]);
        });
    }
    sendUncheckedTransaction(transaction) {
        transaction = shallowCopy(transaction);
        const fromAddress = this.getAddress().then((address2)=>{
            if (address2) {
                address2 = address2.toLowerCase();
            }
            return address2;
        });
        if (transaction.gasLimit == null) {
            const estimate = shallowCopy(transaction);
            estimate.from = fromAddress;
            transaction.gasLimit = this.provider.estimateGas(estimate);
        }
        if (transaction.to != null) {
            transaction.to = Promise.resolve(transaction.to).then((to)=>__awaiter$11(this, void 0, void 0, function*() {
                    if (to == null) {
                        return null;
                    }
                    const address2 = yield this.provider.resolveName(to);
                    if (address2 == null) {
                        logger$21.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                    }
                    return address2;
                }));
        }
        return resolveProperties({
            tx: resolveProperties(transaction),
            sender: fromAddress
        }).then(({ tx, sender })=>{
            if (tx.from != null) {
                if (tx.from.toLowerCase() !== sender) {
                    logger$21.throwArgumentError("from address mismatch", "transaction", transaction);
                }
            } else {
                tx.from = sender;
            }
            const hexTx = this.provider.constructor.hexlifyTransaction(tx, {
                from: true
            });
            return this.provider.send("eth_sendTransaction", [
                hexTx
            ]).then((hash2)=>{
                return hash2;
            }, (error)=>{
                if (typeof error.message === "string" && error.message.match(/user denied/i)) {
                    logger$21.throwError("user rejected transaction", Logger.errors.ACTION_REJECTED, {
                        action: "sendTransaction",
                        transaction: tx
                    });
                }
                return checkError("sendTransaction", error, hexTx);
            });
        });
    }
    signTransaction(transaction) {
        return logger$21.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "signTransaction"
        });
    }
    sendTransaction(transaction) {
        return __awaiter$11(this, void 0, void 0, function*() {
            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
            const hash2 = yield this.sendUncheckedTransaction(transaction);
            try {
                return yield poll(()=>__awaiter$11(this, void 0, void 0, function*() {
                        const tx = yield this.provider.getTransaction(hash2);
                        if (tx === null) {
                            return void 0;
                        }
                        return this.provider._wrapTransaction(tx, hash2, blockNumber);
                    }), {
                    oncePoll: this.provider
                });
            } catch (error) {
                error.transactionHash = hash2;
                throw error;
            }
        });
    }
    signMessage(message) {
        return __awaiter$11(this, void 0, void 0, function*() {
            const data = typeof message === "string" ? toUtf8Bytes(message) : message;
            const address2 = yield this.getAddress();
            try {
                return yield this.provider.send("personal_sign", [
                    hexlify(data),
                    address2.toLowerCase()
                ]);
            } catch (error) {
                if (typeof error.message === "string" && error.message.match(/user denied/i)) {
                    logger$21.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                        action: "signMessage",
                        from: address2,
                        messageData: message
                    });
                }
                throw error;
            }
        });
    }
    _legacySignMessage(message) {
        return __awaiter$11(this, void 0, void 0, function*() {
            const data = typeof message === "string" ? toUtf8Bytes(message) : message;
            const address2 = yield this.getAddress();
            try {
                return yield this.provider.send("eth_sign", [
                    address2.toLowerCase(),
                    hexlify(data)
                ]);
            } catch (error) {
                if (typeof error.message === "string" && error.message.match(/user denied/i)) {
                    logger$21.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                        action: "_legacySignMessage",
                        from: address2,
                        messageData: message
                    });
                }
                throw error;
            }
        });
    }
    _signTypedData(domain, types, value) {
        return __awaiter$11(this, void 0, void 0, function*() {
            const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name)=>{
                return this.provider.resolveName(name);
            });
            const address2 = yield this.getAddress();
            try {
                return yield this.provider.send("eth_signTypedData_v4", [
                    address2.toLowerCase(),
                    JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
                ]);
            } catch (error) {
                if (typeof error.message === "string" && error.message.match(/user denied/i)) {
                    logger$21.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                        action: "_signTypedData",
                        from: address2,
                        messageData: {
                            domain: populated.domain,
                            types,
                            value: populated.value
                        }
                    });
                }
                throw error;
            }
        });
    }
    unlock(password) {
        return __awaiter$11(this, void 0, void 0, function*() {
            const provider = this.provider;
            const address2 = yield this.getAddress();
            return provider.send("personal_unlockAccount", [
                address2.toLowerCase(),
                password,
                null
            ]);
        });
    }
}
class UncheckedJsonRpcSigner extends JsonRpcSigner {
    sendTransaction(transaction) {
        return this.sendUncheckedTransaction(transaction).then((hash2)=>{
            return {
                hash: hash2,
                nonce: null,
                gasLimit: null,
                gasPrice: null,
                data: null,
                value: null,
                chainId: null,
                confirmations: 0,
                from: null,
                wait: (confirmations)=>{
                    return this.provider.waitForTransaction(hash2, confirmations);
                }
            };
        });
    }
}
const allowedTransactionKeys3 = {
    chainId: true,
    data: true,
    gasLimit: true,
    gasPrice: true,
    nonce: true,
    to: true,
    value: true,
    type: true,
    accessList: true,
    maxFeePerGas: true,
    maxPriorityFeePerGas: true
};
class JsonRpcProvider extends BaseProvider {
    constructor(url, network){
        let networkOrReady = network;
        if (networkOrReady == null) {
            networkOrReady = new Promise((resolve, reject)=>{
                setTimeout(()=>{
                    this.detectNetwork().then((network2)=>{
                        resolve(network2);
                    }, (error)=>{
                        reject(error);
                    });
                }, 0);
            });
        }
        super(networkOrReady);
        if (!url) {
            url = getStatic(this.constructor, "defaultUrl")();
        }
        if (typeof url === "string") {
            defineReadOnly(this, "connection", Object.freeze({
                url
            }));
        } else {
            defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
        }
        this._nextId = 42;
    }
    get _cache() {
        if (this._eventLoopCache == null) {
            this._eventLoopCache = {};
        }
        return this._eventLoopCache;
    }
    static defaultUrl() {
        return "http://localhost:8545";
    }
    detectNetwork() {
        if (!this._cache["detectNetwork"]) {
            this._cache["detectNetwork"] = this._uncachedDetectNetwork();
            setTimeout(()=>{
                this._cache["detectNetwork"] = null;
            }, 0);
        }
        return this._cache["detectNetwork"];
    }
    _uncachedDetectNetwork() {
        return __awaiter$11(this, void 0, void 0, function*() {
            yield timer(0);
            let chainId = null;
            try {
                chainId = yield this.send("eth_chainId", []);
            } catch (error) {
                try {
                    chainId = yield this.send("net_version", []);
                } catch (error2) {}
            }
            if (chainId != null) {
                const getNetwork3 = getStatic(this.constructor, "getNetwork");
                try {
                    return getNetwork3(BigNumber.from(chainId).toNumber());
                } catch (error) {
                    return logger$21.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                        chainId,
                        event: "invalidNetwork",
                        serverError: error
                    });
                }
            }
            return logger$21.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                event: "noNetwork"
            });
        });
    }
    getSigner(addressOrIndex) {
        return new JsonRpcSigner(_constructorGuard3, this, addressOrIndex);
    }
    getUncheckedSigner(addressOrIndex) {
        return this.getSigner(addressOrIndex).connectUnchecked();
    }
    listAccounts() {
        return this.send("eth_accounts", []).then((accounts)=>{
            return accounts.map((a)=>this.formatter.address(a));
        });
    }
    send(method, params) {
        const request = {
            method,
            params,
            id: this._nextId++,
            jsonrpc: "2.0"
        };
        this.emit("debug", {
            action: "request",
            request: deepCopy(request),
            provider: this
        });
        const cache = [
            "eth_chainId",
            "eth_blockNumber"
        ].indexOf(method) >= 0;
        if (cache && this._cache[method]) {
            return this._cache[method];
        }
        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result2)=>{
            this.emit("debug", {
                action: "response",
                request,
                response: result2,
                provider: this
            });
            return result2;
        }, (error)=>{
            this.emit("debug", {
                action: "response",
                error,
                request,
                provider: this
            });
            throw error;
        });
        if (cache) {
            this._cache[method] = result;
            setTimeout(()=>{
                this._cache[method] = null;
            }, 0);
        }
        return result;
    }
    prepareRequest(method, params) {
        switch(method){
            case "getBlockNumber":
                return [
                    "eth_blockNumber",
                    []
                ];
            case "getGasPrice":
                return [
                    "eth_gasPrice",
                    []
                ];
            case "getBalance":
                return [
                    "eth_getBalance",
                    [
                        getLowerCase(params.address),
                        params.blockTag
                    ]
                ];
            case "getTransactionCount":
                return [
                    "eth_getTransactionCount",
                    [
                        getLowerCase(params.address),
                        params.blockTag
                    ]
                ];
            case "getCode":
                return [
                    "eth_getCode",
                    [
                        getLowerCase(params.address),
                        params.blockTag
                    ]
                ];
            case "getStorageAt":
                return [
                    "eth_getStorageAt",
                    [
                        getLowerCase(params.address),
                        hexZeroPad(params.position, 32),
                        params.blockTag
                    ]
                ];
            case "sendTransaction":
                return [
                    "eth_sendRawTransaction",
                    [
                        params.signedTransaction
                    ]
                ];
            case "getBlock":
                if (params.blockTag) {
                    return [
                        "eth_getBlockByNumber",
                        [
                            params.blockTag,
                            !!params.includeTransactions
                        ]
                    ];
                } else if (params.blockHash) {
                    return [
                        "eth_getBlockByHash",
                        [
                            params.blockHash,
                            !!params.includeTransactions
                        ]
                    ];
                }
                return null;
            case "getTransaction":
                return [
                    "eth_getTransactionByHash",
                    [
                        params.transactionHash
                    ]
                ];
            case "getTransactionReceipt":
                return [
                    "eth_getTransactionReceipt",
                    [
                        params.transactionHash
                    ]
                ];
            case "call":
                {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return [
                        "eth_call",
                        [
                            hexlifyTransaction(params.transaction, {
                                from: true
                            }),
                            params.blockTag
                        ]
                    ];
                }
            case "estimateGas":
                {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return [
                        "eth_estimateGas",
                        [
                            hexlifyTransaction(params.transaction, {
                                from: true
                            })
                        ]
                    ];
                }
            case "getLogs":
                if (params.filter && params.filter.address != null) {
                    params.filter.address = getLowerCase(params.filter.address);
                }
                return [
                    "eth_getLogs",
                    [
                        params.filter
                    ]
                ];
        }
        return null;
    }
    perform(method, params) {
        return __awaiter$11(this, void 0, void 0, function*() {
            if (method === "call" || method === "estimateGas") {
                const tx = params.transaction;
                if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                        const feeData = yield this.getFeeData();
                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                            params = shallowCopy(params);
                            params.transaction = shallowCopy(tx);
                            delete params.transaction.type;
                        }
                    }
                }
            }
            const args = this.prepareRequest(method, params);
            if (args == null) {
                logger$21.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, {
                    operation: method
                });
            }
            try {
                return yield this.send(args[0], args[1]);
            } catch (error) {
                return checkError(method, error, params);
            }
        });
    }
    _startEvent(event) {
        if (event.tag === "pending") {
            this._startPending();
        }
        super._startEvent(event);
    }
    _startPending() {
        if (this._pendingFilter != null) {
            return;
        }
        const self1 = this;
        const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
        this._pendingFilter = pendingFilter;
        pendingFilter.then(function(filterId) {
            function poll2() {
                self1.send("eth_getFilterChanges", [
                    filterId
                ]).then(function(hashes) {
                    if (self1._pendingFilter != pendingFilter) {
                        return null;
                    }
                    let seq = Promise.resolve();
                    hashes.forEach(function(hash2) {
                        self1._emitted["t:" + hash2.toLowerCase()] = "pending";
                        seq = seq.then(function() {
                            return self1.getTransaction(hash2).then(function(tx) {
                                self1.emit("pending", tx);
                                return null;
                            });
                        });
                    });
                    return seq.then(function() {
                        return timer(1e3);
                    });
                }).then(function() {
                    if (self1._pendingFilter != pendingFilter) {
                        self1.send("eth_uninstallFilter", [
                            filterId
                        ]);
                        return;
                    }
                    setTimeout(function() {
                        poll2();
                    }, 0);
                    return null;
                }).catch((error)=>{});
            }
            poll2();
            return filterId;
        }).catch((error)=>{});
    }
    _stopEvent(event) {
        if (event.tag === "pending" && this.listenerCount("pending") === 0) {
            this._pendingFilter = null;
        }
        super._stopEvent(event);
    }
    static hexlifyTransaction(transaction, allowExtra) {
        const allowed = shallowCopy(allowedTransactionKeys3);
        if (allowExtra) {
            for(const key in allowExtra){
                if (allowExtra[key]) {
                    allowed[key] = true;
                }
            }
        }
        checkProperties(transaction, allowed);
        const result = {};
        [
            "chainId",
            "gasLimit",
            "gasPrice",
            "type",
            "maxFeePerGas",
            "maxPriorityFeePerGas",
            "nonce",
            "value"
        ].forEach(function(key) {
            if (transaction[key] == null) {
                return;
            }
            const value = hexValue(BigNumber.from(transaction[key]));
            if (key === "gasLimit") {
                key = "gas";
            }
            result[key] = value;
        });
        [
            "from",
            "to",
            "data"
        ].forEach(function(key) {
            if (transaction[key] == null) {
                return;
            }
            result[key] = hexlify(transaction[key]);
        });
        if (transaction.accessList) {
            result["accessList"] = accessListify(transaction.accessList);
        }
        return result;
    }
}
let WS = null;
try {
    WS = WebSocket;
    if (WS == null) {
        throw new Error("inject please");
    }
} catch (error) {
    const logger3 = new Logger(version23);
    WS = function() {
        logger3.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new WebSocket()"
        });
    };
}
var __awaiter$2 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger$31 = new Logger(version23);
let NextId = 1;
class WebSocketProvider extends JsonRpcProvider {
    constructor(url, network){
        if (network === "any") {
            logger$31.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "network:any"
            });
        }
        if (typeof url === "string") {
            super(url, network);
        } else {
            super("_websocket", network);
        }
        this._pollingInterval = -1;
        this._wsReady = false;
        if (typeof url === "string") {
            defineReadOnly(this, "_websocket", new WS(this.connection.url));
        } else {
            defineReadOnly(this, "_websocket", url);
        }
        defineReadOnly(this, "_requests", {});
        defineReadOnly(this, "_subs", {});
        defineReadOnly(this, "_subIds", {});
        defineReadOnly(this, "_detectNetwork", super.detectNetwork());
        this.websocket.onopen = ()=>{
            this._wsReady = true;
            Object.keys(this._requests).forEach((id)=>{
                this.websocket.send(this._requests[id].payload);
            });
        };
        this.websocket.onmessage = (messageEvent)=>{
            const data = messageEvent.data;
            const result = JSON.parse(data);
            if (result.id != null) {
                const id = String(result.id);
                const request = this._requests[id];
                delete this._requests[id];
                if (result.result !== void 0) {
                    request.callback(null, result.result);
                    this.emit("debug", {
                        action: "response",
                        request: JSON.parse(request.payload),
                        response: result.result,
                        provider: this
                    });
                } else {
                    let error = null;
                    if (result.error) {
                        error = new Error(result.error.message || "unknown error");
                        defineReadOnly(error, "code", result.error.code || null);
                        defineReadOnly(error, "response", data);
                    } else {
                        error = new Error("unknown error");
                    }
                    request.callback(error, void 0);
                    this.emit("debug", {
                        action: "response",
                        error,
                        request: JSON.parse(request.payload),
                        provider: this
                    });
                }
            } else if (result.method === "eth_subscription") {
                const sub = this._subs[result.params.subscription];
                if (sub) {
                    sub.processFunc(result.params.result);
                }
            } else {
                console.warn("this should not happen");
            }
        };
        const fauxPoll = setInterval(()=>{
            this.emit("poll");
        }, 1e3);
        if (fauxPoll.unref) {
            fauxPoll.unref();
        }
    }
    get websocket() {
        return this._websocket;
    }
    detectNetwork() {
        return this._detectNetwork;
    }
    get pollingInterval() {
        return 0;
    }
    resetEventsBlock(blockNumber) {
        logger$31.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "resetEventBlock"
        });
    }
    set pollingInterval(value) {
        logger$31.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setPollingInterval"
        });
    }
    poll() {
        return __awaiter$2(this, void 0, void 0, function*() {
            return null;
        });
    }
    set polling(value) {
        if (!value) {
            return;
        }
        logger$31.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setPolling"
        });
    }
    send(method, params) {
        const rid = NextId++;
        return new Promise((resolve, reject)=>{
            function callback(error, result) {
                if (error) {
                    return reject(error);
                }
                return resolve(result);
            }
            const payload = JSON.stringify({
                method,
                params,
                id: rid,
                jsonrpc: "2.0"
            });
            this.emit("debug", {
                action: "request",
                request: JSON.parse(payload),
                provider: this
            });
            this._requests[String(rid)] = {
                callback,
                payload
            };
            if (this._wsReady) {
                this.websocket.send(payload);
            }
        });
    }
    static defaultUrl() {
        return "ws://localhost:8546";
    }
    _subscribe(tag, param, processFunc) {
        return __awaiter$2(this, void 0, void 0, function*() {
            let subIdPromise = this._subIds[tag];
            if (subIdPromise == null) {
                subIdPromise = Promise.all(param).then((param2)=>{
                    return this.send("eth_subscribe", param2);
                });
                this._subIds[tag] = subIdPromise;
            }
            const subId = yield subIdPromise;
            this._subs[subId] = {
                tag,
                processFunc
            };
        });
    }
    _startEvent(event) {
        switch(event.type){
            case "block":
                this._subscribe("block", [
                    "newHeads"
                ], (result)=>{
                    const blockNumber = BigNumber.from(result.number).toNumber();
                    this._emitted.block = blockNumber;
                    this.emit("block", blockNumber);
                });
                break;
            case "pending":
                this._subscribe("pending", [
                    "newPendingTransactions"
                ], (result)=>{
                    this.emit("pending", result);
                });
                break;
            case "filter":
                this._subscribe(event.tag, [
                    "logs",
                    this._getFilter(event.filter)
                ], (result)=>{
                    if (result.removed == null) {
                        result.removed = false;
                    }
                    this.emit(event.filter, this.formatter.filterLog(result));
                });
                break;
            case "tx":
                {
                    const emitReceipt = (event2)=>{
                        const hash2 = event2.hash;
                        this.getTransactionReceipt(hash2).then((receipt)=>{
                            if (!receipt) {
                                return;
                            }
                            this.emit(hash2, receipt);
                        });
                    };
                    emitReceipt(event);
                    this._subscribe("tx", [
                        "newHeads"
                    ], (result)=>{
                        this._events.filter((e)=>e.type === "tx").forEach(emitReceipt);
                    });
                    break;
                }
            case "debug":
            case "poll":
            case "willPoll":
            case "didPoll":
            case "error":
                break;
            default:
                console.log("unhandled:", event);
                break;
        }
    }
    _stopEvent(event) {
        let tag = event.tag;
        if (event.type === "tx") {
            if (this._events.filter((e)=>e.type === "tx").length) {
                return;
            }
            tag = "tx";
        } else if (this.listenerCount(event.event)) {
            return;
        }
        const subId = this._subIds[tag];
        if (!subId) {
            return;
        }
        delete this._subIds[tag];
        subId.then((subId2)=>{
            if (!this._subs[subId2]) {
                return;
            }
            delete this._subs[subId2];
            this.send("eth_unsubscribe", [
                subId2
            ]);
        });
    }
    destroy() {
        return __awaiter$2(this, void 0, void 0, function*() {
            if (this.websocket.readyState === WS.CONNECTING) {
                yield new Promise((resolve)=>{
                    this.websocket.onopen = function() {
                        resolve(true);
                    };
                    this.websocket.onerror = function() {
                        resolve(false);
                    };
                });
            }
            this.websocket.close(1e3);
        });
    }
}
var __awaiter$3 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger$41 = new Logger(version23);
class StaticJsonRpcProvider extends JsonRpcProvider {
    detectNetwork() {
        const _super = Object.create(null, {
            detectNetwork: {
                get: ()=>super.detectNetwork
            }
        });
        return __awaiter$3(this, void 0, void 0, function*() {
            let network = this.network;
            if (network == null) {
                network = yield _super.detectNetwork.call(this);
                if (!network) {
                    logger$41.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                }
                if (this._network == null) {
                    defineReadOnly(this, "_network", network);
                    this.emit("network", network, null);
                }
            }
            return network;
        });
    }
}
class UrlJsonRpcProvider extends StaticJsonRpcProvider {
    constructor(network, apiKey){
        logger$41.checkAbstract(new.target, UrlJsonRpcProvider);
        network = getStatic(new.target, "getNetwork")(network);
        apiKey = getStatic(new.target, "getApiKey")(apiKey);
        const connection = getStatic(new.target, "getUrl")(network, apiKey);
        super(connection, network);
        if (typeof apiKey === "string") {
            defineReadOnly(this, "apiKey", apiKey);
        } else if (apiKey != null) {
            Object.keys(apiKey).forEach((key)=>{
                defineReadOnly(this, key, apiKey[key]);
            });
        }
    }
    _startPending() {
        logger$41.warn("WARNING: API provider does not support pending filters");
    }
    isCommunityResource() {
        return false;
    }
    getSigner(address2) {
        return logger$41.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "getSigner"
        });
    }
    listAccounts() {
        return Promise.resolve([]);
    }
    static getApiKey(apiKey) {
        return apiKey;
    }
    static getUrl(network, apiKey) {
        return logger$41.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
            operation: "getUrl"
        });
    }
}
const logger$5 = new Logger(version23);
const defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
class AlchemyWebSocketProvider extends WebSocketProvider {
    constructor(network, apiKey){
        const provider = new AlchemyProvider(network, apiKey);
        const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
        super(url, provider.network);
        defineReadOnly(this, "apiKey", provider.apiKey);
    }
    isCommunityResource() {
        return this.apiKey === defaultApiKey;
    }
}
class AlchemyProvider extends UrlJsonRpcProvider {
    static getWebSocketProvider(network, apiKey) {
        return new AlchemyWebSocketProvider(network, apiKey);
    }
    static getApiKey(apiKey) {
        if (apiKey == null) {
            return defaultApiKey;
        }
        if (apiKey && typeof apiKey !== "string") {
            logger$5.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        }
        return apiKey;
    }
    static getUrl(network, apiKey) {
        let host = null;
        switch(network.name){
            case "homestead":
                host = "eth-mainnet.alchemyapi.io/v2/";
                break;
            case "goerli":
                host = "eth-goerli.g.alchemy.com/v2/";
                break;
            case "matic":
                host = "polygon-mainnet.g.alchemy.com/v2/";
                break;
            case "maticmum":
                host = "polygon-mumbai.g.alchemy.com/v2/";
                break;
            case "arbitrum":
                host = "arb-mainnet.g.alchemy.com/v2/";
                break;
            case "arbitrum-goerli":
                host = "arb-goerli.g.alchemy.com/v2/";
                break;
            case "optimism":
                host = "opt-mainnet.g.alchemy.com/v2/";
                break;
            case "optimism-goerli":
                host = "opt-goerli.g.alchemy.com/v2/";
                break;
            default:
                logger$5.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return {
            allowGzip: true,
            url: "https://" + host + apiKey,
            throttleCallback: (attempt, url)=>{
                if (apiKey === defaultApiKey) {
                    showThrottleMessage();
                }
                return Promise.resolve(true);
            }
        };
    }
    isCommunityResource() {
        return this.apiKey === defaultApiKey;
    }
}
const logger$6 = new Logger(version23);
const defaultApiKey$1 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
function getHost(name) {
    switch(name){
        case "homestead":
            return "rpc.ankr.com/eth/";
        case "ropsten":
            return "rpc.ankr.com/eth_ropsten/";
        case "rinkeby":
            return "rpc.ankr.com/eth_rinkeby/";
        case "goerli":
            return "rpc.ankr.com/eth_goerli/";
        case "matic":
            return "rpc.ankr.com/polygon/";
        case "arbitrum":
            return "rpc.ankr.com/arbitrum/";
    }
    return logger$6.throwArgumentError("unsupported network", "name", name);
}
class AnkrProvider extends UrlJsonRpcProvider {
    isCommunityResource() {
        return this.apiKey === defaultApiKey$1;
    }
    static getApiKey(apiKey) {
        if (apiKey == null) {
            return defaultApiKey$1;
        }
        return apiKey;
    }
    static getUrl(network, apiKey) {
        if (apiKey == null) {
            apiKey = defaultApiKey$1;
        }
        const connection = {
            allowGzip: true,
            url: "https://" + getHost(network.name) + apiKey,
            throttleCallback: (attempt, url)=>{
                if (apiKey.apiKey === defaultApiKey$1) {
                    showThrottleMessage();
                }
                return Promise.resolve(true);
            }
        };
        if (apiKey.projectSecret != null) {
            connection.user = "";
            connection.password = apiKey.projectSecret;
        }
        return connection;
    }
}
var __awaiter$4 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger$7 = new Logger(version23);
class CloudflareProvider extends UrlJsonRpcProvider {
    static getApiKey(apiKey) {
        if (apiKey != null) {
            logger$7.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
        }
        return null;
    }
    static getUrl(network, apiKey) {
        let host = null;
        switch(network.name){
            case "homestead":
                host = "https://cloudflare-eth.com/";
                break;
            default:
                logger$7.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host;
    }
    perform(method, params) {
        const _super = Object.create(null, {
            perform: {
                get: ()=>super.perform
            }
        });
        return __awaiter$4(this, void 0, void 0, function*() {
            if (method === "getBlockNumber") {
                const block = yield _super.perform.call(this, "getBlock", {
                    blockTag: "latest"
                });
                return block.number;
            }
            return _super.perform.call(this, method, params);
        });
    }
}
var __awaiter$5 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger$8 = new Logger(version23);
function getTransactionPostData(transaction) {
    const result = {};
    for(let key in transaction){
        if (transaction[key] == null) {
            continue;
        }
        let value = transaction[key];
        if (key === "type" && value === 0) {
            continue;
        }
        if (({
            type: true,
            gasLimit: true,
            gasPrice: true,
            maxFeePerGs: true,
            maxPriorityFeePerGas: true,
            nonce: true,
            value: true
        })[key]) {
            value = hexValue(hexlify(value));
        } else if (key === "accessList") {
            value = "[" + accessListify(value).map((set)=>{
                return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
            }).join(",") + "]";
        } else {
            value = hexlify(value);
        }
        result[key] = value;
    }
    return result;
}
function getResult$1(result) {
    if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
        return result.result;
    }
    if (result.status != 1 || typeof result.message !== "string" || !result.message.match(/^OK/)) {
        const error = new Error("invalid response");
        error.result = JSON.stringify(result);
        if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
            error.throttleRetry = true;
        }
        throw error;
    }
    return result.result;
}
function getJsonResult(result) {
    if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
        const error = new Error("throttled response");
        error.result = JSON.stringify(result);
        error.throttleRetry = true;
        throw error;
    }
    if (result.jsonrpc != "2.0") {
        const error = new Error("invalid response");
        error.result = JSON.stringify(result);
        throw error;
    }
    if (result.error) {
        const error = new Error(result.error.message || "unknown error");
        if (result.error.code) {
            error.code = result.error.code;
        }
        if (result.error.data) {
            error.data = result.error.data;
        }
        throw error;
    }
    return result.result;
}
function checkLogTag(blockTag) {
    if (blockTag === "pending") {
        throw new Error("pending not supported");
    }
    if (blockTag === "latest") {
        return blockTag;
    }
    return parseInt(blockTag.substring(2), 16);
}
function checkError$1(method, error, transaction) {
    if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
        const e = error.error;
        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
            let data = e.data;
            if (data) {
                data = "0x" + data.replace(/^.*0x/i, "");
            }
            if (isHexString(data)) {
                return data;
            }
            logger$8.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
                error,
                data: "0x"
            });
        }
    }
    let message = error.message;
    if (error.code === Logger.errors.SERVER_ERROR) {
        if (error.error && typeof error.error.message === "string") {
            message = error.error.message;
        } else if (typeof error.body === "string") {
            message = error.body;
        } else if (typeof error.responseText === "string") {
            message = error.responseText;
        }
    }
    message = (message || "").toLowerCase();
    if (message.match(/insufficient funds/)) {
        logger$8.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
            error,
            method,
            transaction
        });
    }
    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
        logger$8.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
            error,
            method,
            transaction
        });
    }
    if (message.match(/another transaction with same nonce/)) {
        logger$8.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
            error,
            method,
            transaction
        });
    }
    if (message.match(/execution failed due to an exception|execution reverted/)) {
        logger$8.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
            error,
            method,
            transaction
        });
    }
    throw error;
}
class EtherscanProvider extends BaseProvider {
    constructor(network, apiKey){
        super(network);
        defineReadOnly(this, "baseUrl", this.getBaseUrl());
        defineReadOnly(this, "apiKey", apiKey || null);
    }
    getBaseUrl() {
        switch(this.network ? this.network.name : "invalid"){
            case "homestead":
                return "https://api.etherscan.io";
            case "goerli":
                return "https://api-goerli.etherscan.io";
            case "sepolia":
                return "https://api-sepolia.etherscan.io";
            case "matic":
                return "https://api.polygonscan.com";
            case "maticmum":
                return "https://api-testnet.polygonscan.com";
            case "arbitrum":
                return "https://api.arbiscan.io";
            case "arbitrum-goerli":
                return "https://api-goerli.arbiscan.io";
            case "optimism":
                return "https://api-optimistic.etherscan.io";
            case "optimism-goerli":
                return "https://api-goerli-optimistic.etherscan.io";
        }
        return logger$8.throwArgumentError("unsupported network", "network", this.network.name);
    }
    getUrl(module, params) {
        const query = Object.keys(params).reduce((accum, key)=>{
            const value = params[key];
            if (value != null) {
                accum += `&${key}=${value}`;
            }
            return accum;
        }, "");
        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
    }
    getPostUrl() {
        return `${this.baseUrl}/api`;
    }
    getPostData(module, params) {
        params.module = module;
        params.apikey = this.apiKey;
        return params;
    }
    fetch(module, params, post) {
        return __awaiter$5(this, void 0, void 0, function*() {
            const url = post ? this.getPostUrl() : this.getUrl(module, params);
            const payload = post ? this.getPostData(module, params) : null;
            const procFunc = module === "proxy" ? getJsonResult : getResult$1;
            this.emit("debug", {
                action: "request",
                request: url,
                provider: this
            });
            const connection = {
                url,
                throttleSlotInterval: 1e3,
                throttleCallback: (attempt, url2)=>{
                    if (this.isCommunityResource()) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
            let payloadStr = null;
            if (payload) {
                connection.headers = {
                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                };
                payloadStr = Object.keys(payload).map((key)=>{
                    return `${key}=${payload[key]}`;
                }).join("&");
            }
            const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
            this.emit("debug", {
                action: "response",
                request: url,
                response: deepCopy(result),
                provider: this
            });
            return result;
        });
    }
    detectNetwork() {
        return __awaiter$5(this, void 0, void 0, function*() {
            return this.network;
        });
    }
    perform(method, params) {
        const _super = Object.create(null, {
            perform: {
                get: ()=>super.perform
            }
        });
        return __awaiter$5(this, void 0, void 0, function*() {
            switch(method){
                case "getBlockNumber":
                    return this.fetch("proxy", {
                        action: "eth_blockNumber"
                    });
                case "getGasPrice":
                    return this.fetch("proxy", {
                        action: "eth_gasPrice"
                    });
                case "getBalance":
                    return this.fetch("account", {
                        action: "balance",
                        address: params.address,
                        tag: params.blockTag
                    });
                case "getTransactionCount":
                    return this.fetch("proxy", {
                        action: "eth_getTransactionCount",
                        address: params.address,
                        tag: params.blockTag
                    });
                case "getCode":
                    return this.fetch("proxy", {
                        action: "eth_getCode",
                        address: params.address,
                        tag: params.blockTag
                    });
                case "getStorageAt":
                    return this.fetch("proxy", {
                        action: "eth_getStorageAt",
                        address: params.address,
                        position: params.position,
                        tag: params.blockTag
                    });
                case "sendTransaction":
                    return this.fetch("proxy", {
                        action: "eth_sendRawTransaction",
                        hex: params.signedTransaction
                    }, true).catch((error)=>{
                        return checkError$1("sendTransaction", error, params.signedTransaction);
                    });
                case "getBlock":
                    if (params.blockTag) {
                        return this.fetch("proxy", {
                            action: "eth_getBlockByNumber",
                            tag: params.blockTag,
                            boolean: params.includeTransactions ? "true" : "false"
                        });
                    }
                    throw new Error("getBlock by blockHash not implemented");
                case "getTransaction":
                    return this.fetch("proxy", {
                        action: "eth_getTransactionByHash",
                        txhash: params.transactionHash
                    });
                case "getTransactionReceipt":
                    return this.fetch("proxy", {
                        action: "eth_getTransactionReceipt",
                        txhash: params.transactionHash
                    });
                case "call":
                    {
                        if (params.blockTag !== "latest") {
                            throw new Error("EtherscanProvider does not support blockTag for call");
                        }
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_call";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        } catch (error) {
                            return checkError$1("call", error, params.transaction);
                        }
                    }
                case "estimateGas":
                    {
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_estimateGas";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        } catch (error) {
                            return checkError$1("estimateGas", error, params.transaction);
                        }
                    }
                case "getLogs":
                    {
                        const args = {
                            action: "getLogs"
                        };
                        if (params.filter.fromBlock) {
                            args.fromBlock = checkLogTag(params.filter.fromBlock);
                        }
                        if (params.filter.toBlock) {
                            args.toBlock = checkLogTag(params.filter.toBlock);
                        }
                        if (params.filter.address) {
                            args.address = params.filter.address;
                        }
                        if (params.filter.topics && params.filter.topics.length > 0) {
                            if (params.filter.topics.length > 1) {
                                logger$8.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, {
                                    topics: params.filter.topics
                                });
                            }
                            if (params.filter.topics.length === 1) {
                                const topic0 = params.filter.topics[0];
                                if (typeof topic0 !== "string" || topic0.length !== 66) {
                                    logger$8.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, {
                                        topic0
                                    });
                                }
                                args.topic0 = topic0;
                            }
                        }
                        const logs = yield this.fetch("logs", args);
                        let blocks = {};
                        for(let i = 0; i < logs.length; i++){
                            const log = logs[i];
                            if (log.blockHash != null) {
                                continue;
                            }
                            if (blocks[log.blockNumber] == null) {
                                const block = yield this.getBlock(log.blockNumber);
                                if (block) {
                                    blocks[log.blockNumber] = block.hash;
                                }
                            }
                            log.blockHash = blocks[log.blockNumber];
                        }
                        return logs;
                    }
                case "getEtherPrice":
                    if (this.network.name !== "homestead") {
                        return 0;
                    }
                    return parseFloat((yield this.fetch("stats", {
                        action: "ethprice"
                    })).ethusd);
            }
            return _super.perform.call(this, method, params);
        });
    }
    getHistory(addressOrName, startBlock, endBlock) {
        return __awaiter$5(this, void 0, void 0, function*() {
            const params = {
                action: "txlist",
                address: yield this.resolveName(addressOrName),
                startblock: startBlock == null ? 0 : startBlock,
                endblock: endBlock == null ? 99999999 : endBlock,
                sort: "asc"
            };
            const result = yield this.fetch("account", params);
            return result.map((tx)=>{
                [
                    "contractAddress",
                    "to"
                ].forEach(function(key) {
                    if (tx[key] == "") {
                        delete tx[key];
                    }
                });
                if (tx.creates == null && tx.contractAddress != null) {
                    tx.creates = tx.contractAddress;
                }
                const item = this.formatter.transactionResponse(tx);
                if (tx.timeStamp) {
                    item.timestamp = parseInt(tx.timeStamp);
                }
                return item;
            });
        });
    }
    isCommunityResource() {
        return this.apiKey == null;
    }
}
var __awaiter$6 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger$9 = new Logger(version23);
function now() {
    return new Date().getTime();
}
function checkNetworks(networks3) {
    let result = null;
    for(let i = 0; i < networks3.length; i++){
        const network = networks3[i];
        if (network == null) {
            return null;
        }
        if (result) {
            if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
                logger$9.throwArgumentError("provider mismatch", "networks", networks3);
            }
        } else {
            result = network;
        }
    }
    return result;
}
function median(values, maxDelta) {
    values = values.slice().sort();
    const middle = Math.floor(values.length / 2);
    if (values.length % 2) {
        return values[middle];
    }
    const a = values[middle - 1], b = values[middle];
    if (maxDelta != null && Math.abs(a - b) > maxDelta) {
        return null;
    }
    return (a + b) / 2;
}
function serialize1(value) {
    if (value === null) {
        return "null";
    } else if (typeof value === "number" || typeof value === "boolean") {
        return JSON.stringify(value);
    } else if (typeof value === "string") {
        return value;
    } else if (BigNumber.isBigNumber(value)) {
        return value.toString();
    } else if (Array.isArray(value)) {
        return JSON.stringify(value.map((i)=>serialize1(i)));
    } else if (typeof value === "object") {
        const keys = Object.keys(value);
        keys.sort();
        return "{" + keys.map((key)=>{
            let v = value[key];
            if (typeof v === "function") {
                v = "[function]";
            } else {
                v = serialize1(v);
            }
            return JSON.stringify(key) + ":" + v;
        }).join(",") + "}";
    }
    throw new Error("unknown value type: " + typeof value);
}
let nextRid = 1;
function stall$1(duration) {
    let cancel = null;
    let timer2 = null;
    let promise = new Promise((resolve)=>{
        cancel = function() {
            if (timer2) {
                clearTimeout(timer2);
                timer2 = null;
            }
            resolve();
        };
        timer2 = setTimeout(cancel, duration);
    });
    const wait = (func)=>{
        promise = promise.then(func);
        return promise;
    };
    function getPromise() {
        return promise;
    }
    return {
        cancel,
        getPromise,
        wait
    };
}
const ForwardErrors = [
    Logger.errors.CALL_EXCEPTION,
    Logger.errors.INSUFFICIENT_FUNDS,
    Logger.errors.NONCE_EXPIRED,
    Logger.errors.REPLACEMENT_UNDERPRICED,
    Logger.errors.UNPREDICTABLE_GAS_LIMIT
];
const ForwardProperties = [
    "address",
    "args",
    "errorArgs",
    "errorSignature",
    "method",
    "transaction"
];
function exposeDebugConfig(config, now2) {
    const result = {
        weight: config.weight
    };
    Object.defineProperty(result, "provider", {
        get: ()=>config.provider
    });
    if (config.start) {
        result.start = config.start;
    }
    if (now2) {
        result.duration = now2 - config.start;
    }
    if (config.done) {
        if (config.error) {
            result.error = config.error;
        } else {
            result.result = config.result || null;
        }
    }
    return result;
}
function normalizedTally(normalize, quorum) {
    return function(configs) {
        const tally = {};
        configs.forEach((c)=>{
            const value = normalize(c.result);
            if (!tally[value]) {
                tally[value] = {
                    count: 0,
                    result: c.result
                };
            }
            tally[value].count++;
        });
        const keys = Object.keys(tally);
        for(let i = 0; i < keys.length; i++){
            const check = tally[keys[i]];
            if (check.count >= quorum) {
                return check.result;
            }
        }
        return void 0;
    };
}
function getProcessFunc(provider, method, params) {
    let normalize = serialize1;
    switch(method){
        case "getBlockNumber":
            return function(configs) {
                const values = configs.map((c)=>c.result);
                let blockNumber = median(configs.map((c)=>c.result), 2);
                if (blockNumber == null) {
                    return void 0;
                }
                blockNumber = Math.ceil(blockNumber);
                if (values.indexOf(blockNumber + 1) >= 0) {
                    blockNumber++;
                }
                if (blockNumber >= provider._highestBlockNumber) {
                    provider._highestBlockNumber = blockNumber;
                }
                return provider._highestBlockNumber;
            };
        case "getGasPrice":
            return function(configs) {
                const values = configs.map((c)=>c.result);
                values.sort();
                return values[Math.floor(values.length / 2)];
            };
        case "getEtherPrice":
            return function(configs) {
                return median(configs.map((c)=>c.result));
            };
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
        case "getStorageAt":
        case "call":
        case "estimateGas":
        case "getLogs":
            break;
        case "getTransaction":
        case "getTransactionReceipt":
            normalize = function(tx) {
                if (tx == null) {
                    return null;
                }
                tx = shallowCopy(tx);
                tx.confirmations = -1;
                return serialize1(tx);
            };
            break;
        case "getBlock":
            if (params.includeTransactions) {
                normalize = function(block) {
                    if (block == null) {
                        return null;
                    }
                    block = shallowCopy(block);
                    block.transactions = block.transactions.map((tx)=>{
                        tx = shallowCopy(tx);
                        tx.confirmations = -1;
                        return tx;
                    });
                    return serialize1(block);
                };
            } else {
                normalize = function(block) {
                    if (block == null) {
                        return null;
                    }
                    return serialize1(block);
                };
            }
            break;
        default:
            throw new Error("unknown method: " + method);
    }
    return normalizedTally(normalize, provider.quorum);
}
function waitForSync(config, blockNumber) {
    return __awaiter$6(this, void 0, void 0, function*() {
        const provider = config.provider;
        if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
            return provider;
        }
        return poll(()=>{
            return new Promise((resolve, reject)=>{
                setTimeout(function() {
                    if (provider.blockNumber >= blockNumber) {
                        return resolve(provider);
                    }
                    if (config.cancelled) {
                        return resolve(null);
                    }
                    return resolve(void 0);
                }, 0);
            });
        }, {
            oncePoll: provider
        });
    });
}
function getRunner(config, currentBlockNumber, method, params) {
    return __awaiter$6(this, void 0, void 0, function*() {
        let provider = config.provider;
        switch(method){
            case "getBlockNumber":
            case "getGasPrice":
                return provider[method]();
            case "getEtherPrice":
                if (provider.getEtherPrice) {
                    return provider.getEtherPrice();
                }
                break;
            case "getBalance":
            case "getTransactionCount":
            case "getCode":
                if (params.blockTag && isHexString(params.blockTag)) {
                    provider = yield waitForSync(config, currentBlockNumber);
                }
                return provider[method](params.address, params.blockTag || "latest");
            case "getStorageAt":
                if (params.blockTag && isHexString(params.blockTag)) {
                    provider = yield waitForSync(config, currentBlockNumber);
                }
                return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
            case "getBlock":
                if (params.blockTag && isHexString(params.blockTag)) {
                    provider = yield waitForSync(config, currentBlockNumber);
                }
                return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
            case "call":
            case "estimateGas":
                if (params.blockTag && isHexString(params.blockTag)) {
                    provider = yield waitForSync(config, currentBlockNumber);
                }
                if (method === "call" && params.blockTag) {
                    return provider[method](params.transaction, params.blockTag);
                }
                return provider[method](params.transaction);
            case "getTransaction":
            case "getTransactionReceipt":
                return provider[method](params.transactionHash);
            case "getLogs":
                {
                    let filter = params.filter;
                    if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider.getLogs(filter);
                }
        }
        return logger$9.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
            method,
            params
        });
    });
}
class FallbackProvider extends BaseProvider {
    constructor(providers, quorum){
        if (providers.length === 0) {
            logger$9.throwArgumentError("missing providers", "providers", providers);
        }
        const providerConfigs = providers.map((configOrProvider, index)=>{
            if (Provider.isProvider(configOrProvider)) {
                const stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
                return Object.freeze({
                    provider: configOrProvider,
                    weight: 1,
                    stallTimeout,
                    priority: 1
                });
            }
            const config = shallowCopy(configOrProvider);
            if (config.priority == null) {
                config.priority = 1;
            }
            if (config.stallTimeout == null) {
                config.stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
            }
            if (config.weight == null) {
                config.weight = 1;
            }
            const weight = config.weight;
            if (weight % 1 || weight > 512 || weight < 1) {
                logger$9.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
            }
            return Object.freeze(config);
        });
        const total = providerConfigs.reduce((accum, c)=>accum + c.weight, 0);
        if (quorum == null) {
            quorum = total / 2;
        } else if (quorum > total) {
            logger$9.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
        }
        let networkOrReady = checkNetworks(providerConfigs.map((c)=>c.provider.network));
        if (networkOrReady == null) {
            networkOrReady = new Promise((resolve, reject)=>{
                setTimeout(()=>{
                    this.detectNetwork().then(resolve, reject);
                }, 0);
            });
        }
        super(networkOrReady);
        defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
        defineReadOnly(this, "quorum", quorum);
        this._highestBlockNumber = -1;
    }
    detectNetwork() {
        return __awaiter$6(this, void 0, void 0, function*() {
            const networks3 = yield Promise.all(this.providerConfigs.map((c)=>c.provider.getNetwork()));
            return checkNetworks(networks3);
        });
    }
    perform(method, params) {
        return __awaiter$6(this, void 0, void 0, function*() {
            if (method === "sendTransaction") {
                const results = yield Promise.all(this.providerConfigs.map((c)=>{
                    return c.provider.sendTransaction(params.signedTransaction).then((result)=>{
                        return result.hash;
                    }, (error)=>{
                        return error;
                    });
                }));
                for(let i2 = 0; i2 < results.length; i2++){
                    const result = results[i2];
                    if (typeof result === "string") {
                        return result;
                    }
                }
                throw results[0];
            }
            if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
                yield this.getBlockNumber();
            }
            const processFunc = getProcessFunc(this, method, params);
            const configs = shuffled(this.providerConfigs.map(shallowCopy));
            configs.sort((a, b)=>a.priority - b.priority);
            const currentBlockNumber = this._highestBlockNumber;
            let i = 0;
            let first = true;
            while(true){
                const t0 = now();
                let inflightWeight = configs.filter((c)=>c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c)=>accum + c.weight, 0);
                while(inflightWeight < this.quorum && i < configs.length){
                    const config = configs[i++];
                    const rid = nextRid++;
                    config.start = now();
                    config.staller = stall$1(config.stallTimeout);
                    config.staller.wait(()=>{
                        config.staller = null;
                    });
                    config.runner = getRunner(config, currentBlockNumber, method, params).then((result)=>{
                        config.done = true;
                        config.result = result;
                        if (this.listenerCount("debug")) {
                            this.emit("debug", {
                                action: "request",
                                rid,
                                backend: exposeDebugConfig(config, now()),
                                request: {
                                    method,
                                    params: deepCopy(params)
                                },
                                provider: this
                            });
                        }
                    }, (error)=>{
                        config.done = true;
                        config.error = error;
                        if (this.listenerCount("debug")) {
                            this.emit("debug", {
                                action: "request",
                                rid,
                                backend: exposeDebugConfig(config, now()),
                                request: {
                                    method,
                                    params: deepCopy(params)
                                },
                                provider: this
                            });
                        }
                    });
                    if (this.listenerCount("debug")) {
                        this.emit("debug", {
                            action: "request",
                            rid,
                            backend: exposeDebugConfig(config, null),
                            request: {
                                method,
                                params: deepCopy(params)
                            },
                            provider: this
                        });
                    }
                    inflightWeight += config.weight;
                }
                const waiting = [];
                configs.forEach((c)=>{
                    if (c.done || !c.runner) {
                        return;
                    }
                    waiting.push(c.runner);
                    if (c.staller) {
                        waiting.push(c.staller.getPromise());
                    }
                });
                if (waiting.length) {
                    yield Promise.race(waiting);
                }
                const results = configs.filter((c)=>c.done && c.error == null);
                if (results.length >= this.quorum) {
                    const result = processFunc(results);
                    if (result !== void 0) {
                        configs.forEach((c)=>{
                            if (c.staller) {
                                c.staller.cancel();
                            }
                            c.cancelled = true;
                        });
                        return result;
                    }
                    if (!first) {
                        yield stall$1(100).getPromise();
                    }
                    first = false;
                }
                const errors = configs.reduce((accum, c)=>{
                    if (!c.done || c.error == null) {
                        return accum;
                    }
                    const code = c.error.code;
                    if (ForwardErrors.indexOf(code) >= 0) {
                        if (!accum[code]) {
                            accum[code] = {
                                error: c.error,
                                weight: 0
                            };
                        }
                        accum[code].weight += c.weight;
                    }
                    return accum;
                }, {});
                Object.keys(errors).forEach((errorCode)=>{
                    const tally = errors[errorCode];
                    if (tally.weight < this.quorum) {
                        return;
                    }
                    configs.forEach((c)=>{
                        if (c.staller) {
                            c.staller.cancel();
                        }
                        c.cancelled = true;
                    });
                    const e = tally.error;
                    const props = {};
                    ForwardProperties.forEach((name)=>{
                        if (e[name] == null) {
                            return;
                        }
                        props[name] = e[name];
                    });
                    logger$9.throwError(e.reason || e.message, errorCode, props);
                });
                if (configs.filter((c)=>!c.done).length === 0) {
                    break;
                }
            }
            configs.forEach((c)=>{
                if (c.staller) {
                    c.staller.cancel();
                }
                c.cancelled = true;
            });
            return logger$9.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
                method,
                params,
                results: configs.map((c)=>exposeDebugConfig(c)),
                provider: this
            });
        });
    }
}
const logger$a = new Logger(version23);
const defaultProjectId = "84842078b09946638c03157f83405213";
class InfuraWebSocketProvider extends WebSocketProvider {
    constructor(network, apiKey){
        const provider = new InfuraProvider(network, apiKey);
        const connection = provider.connection;
        if (connection.password) {
            logger$a.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "InfuraProvider.getWebSocketProvider()"
            });
        }
        const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
        super(url, network);
        defineReadOnly(this, "apiKey", provider.projectId);
        defineReadOnly(this, "projectId", provider.projectId);
        defineReadOnly(this, "projectSecret", provider.projectSecret);
    }
    isCommunityResource() {
        return this.projectId === defaultProjectId;
    }
}
class InfuraProvider extends UrlJsonRpcProvider {
    static getWebSocketProvider(network, apiKey) {
        return new InfuraWebSocketProvider(network, apiKey);
    }
    static getApiKey(apiKey) {
        const apiKeyObj = {
            apiKey: defaultProjectId,
            projectId: defaultProjectId,
            projectSecret: null
        };
        if (apiKey == null) {
            return apiKeyObj;
        }
        if (typeof apiKey === "string") {
            apiKeyObj.projectId = apiKey;
        } else if (apiKey.projectSecret != null) {
            logger$a.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
            logger$a.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
            apiKeyObj.projectId = apiKey.projectId;
            apiKeyObj.projectSecret = apiKey.projectSecret;
        } else if (apiKey.projectId) {
            apiKeyObj.projectId = apiKey.projectId;
        }
        apiKeyObj.apiKey = apiKeyObj.projectId;
        return apiKeyObj;
    }
    static getUrl(network, apiKey) {
        let host = null;
        switch(network ? network.name : "unknown"){
            case "homestead":
                host = "mainnet.infura.io";
                break;
            case "goerli":
                host = "goerli.infura.io";
                break;
            case "sepolia":
                host = "sepolia.infura.io";
                break;
            case "matic":
                host = "polygon-mainnet.infura.io";
                break;
            case "maticmum":
                host = "polygon-mumbai.infura.io";
                break;
            case "optimism":
                host = "optimism-mainnet.infura.io";
                break;
            case "optimism-goerli":
                host = "optimism-goerli.infura.io";
                break;
            case "arbitrum":
                host = "arbitrum-mainnet.infura.io";
                break;
            case "arbitrum-goerli":
                host = "arbitrum-goerli.infura.io";
                break;
            default:
                logger$a.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                    argument: "network",
                    value: network
                });
        }
        const connection = {
            allowGzip: true,
            url: "https://" + host + "/v3/" + apiKey.projectId,
            throttleCallback: (attempt, url)=>{
                if (apiKey.projectId === defaultProjectId) {
                    showThrottleMessage();
                }
                return Promise.resolve(true);
            }
        };
        if (apiKey.projectSecret != null) {
            connection.user = "";
            connection.password = apiKey.projectSecret;
        }
        return connection;
    }
    isCommunityResource() {
        return this.projectId === defaultProjectId;
    }
}
class JsonRpcBatchProvider extends JsonRpcProvider {
    send(method, params) {
        const request = {
            method,
            params,
            id: this._nextId++,
            jsonrpc: "2.0"
        };
        if (this._pendingBatch == null) {
            this._pendingBatch = [];
        }
        const inflightRequest = {
            request,
            resolve: null,
            reject: null
        };
        const promise = new Promise((resolve, reject)=>{
            inflightRequest.resolve = resolve;
            inflightRequest.reject = reject;
        });
        this._pendingBatch.push(inflightRequest);
        if (!this._pendingBatchAggregator) {
            this._pendingBatchAggregator = setTimeout(()=>{
                const batch = this._pendingBatch;
                this._pendingBatch = null;
                this._pendingBatchAggregator = null;
                const request2 = batch.map((inflight)=>inflight.request);
                this.emit("debug", {
                    action: "requestBatch",
                    request: deepCopy(request2),
                    provider: this
                });
                return fetchJson(this.connection, JSON.stringify(request2)).then((result)=>{
                    this.emit("debug", {
                        action: "response",
                        request: request2,
                        response: result,
                        provider: this
                    });
                    batch.forEach((inflightRequest2, index)=>{
                        const payload = result[index];
                        if (payload.error) {
                            const error = new Error(payload.error.message);
                            error.code = payload.error.code;
                            error.data = payload.error.data;
                            inflightRequest2.reject(error);
                        } else {
                            inflightRequest2.resolve(payload.result);
                        }
                    });
                }, (error)=>{
                    this.emit("debug", {
                        action: "response",
                        error,
                        request: request2,
                        provider: this
                    });
                    batch.forEach((inflightRequest2)=>{
                        inflightRequest2.reject(error);
                    });
                });
            }, 10);
        }
        return promise;
    }
}
const logger$b = new Logger(version23);
const defaultApiKey$2 = "ETHERS_JS_SHARED";
class NodesmithProvider extends UrlJsonRpcProvider {
    static getApiKey(apiKey) {
        if (apiKey && typeof apiKey !== "string") {
            logger$b.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        }
        return apiKey || defaultApiKey$2;
    }
    static getUrl(network, apiKey) {
        logger$b.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
        let host = null;
        switch(network.name){
            case "homestead":
                host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                break;
            case "ropsten":
                host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                break;
            case "rinkeby":
                host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                break;
            case "goerli":
                host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                break;
            case "kovan":
                host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                break;
            default:
                logger$b.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host + "?apiKey=" + apiKey;
    }
}
const logger$c = new Logger(version23);
const defaultApplicationId = "62e1ad51b37b8e00394bda3b";
class PocketProvider extends UrlJsonRpcProvider {
    static getApiKey(apiKey) {
        const apiKeyObj = {
            applicationId: null,
            loadBalancer: true,
            applicationSecretKey: null
        };
        if (apiKey == null) {
            apiKeyObj.applicationId = defaultApplicationId;
        } else if (typeof apiKey === "string") {
            apiKeyObj.applicationId = apiKey;
        } else if (apiKey.applicationSecretKey != null) {
            apiKeyObj.applicationId = apiKey.applicationId;
            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
        } else if (apiKey.applicationId) {
            apiKeyObj.applicationId = apiKey.applicationId;
        } else {
            logger$c.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
        }
        return apiKeyObj;
    }
    static getUrl(network, apiKey) {
        let host = null;
        switch(network ? network.name : "unknown"){
            case "goerli":
                host = "eth-goerli.gateway.pokt.network";
                break;
            case "homestead":
                host = "eth-mainnet.gateway.pokt.network";
                break;
            case "kovan":
                host = "poa-kovan.gateway.pokt.network";
                break;
            case "matic":
                host = "poly-mainnet.gateway.pokt.network";
                break;
            case "maticmum":
                host = "polygon-mumbai-rpc.gateway.pokt.network";
                break;
            case "rinkeby":
                host = "eth-rinkeby.gateway.pokt.network";
                break;
            case "ropsten":
                host = "eth-ropsten.gateway.pokt.network";
                break;
            default:
                logger$c.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                    argument: "network",
                    value: network
                });
        }
        const url = `https://${host}/v1/lb/${apiKey.applicationId}`;
        const connection = {
            headers: {},
            url
        };
        if (apiKey.applicationSecretKey != null) {
            connection.user = "";
            connection.password = apiKey.applicationSecretKey;
        }
        return connection;
    }
    isCommunityResource() {
        return this.applicationId === defaultApplicationId;
    }
}
const logger$d = new Logger(version23);
let _nextId = 1;
function buildWeb3LegacyFetcher(provider, sendFunc) {
    const fetcher = "Web3LegacyFetcher";
    return function(method, params) {
        const request = {
            method,
            params,
            id: _nextId++,
            jsonrpc: "2.0"
        };
        return new Promise((resolve, reject)=>{
            this.emit("debug", {
                action: "request",
                fetcher,
                request: deepCopy(request),
                provider: this
            });
            sendFunc(request, (error, response)=>{
                if (error) {
                    this.emit("debug", {
                        action: "response",
                        fetcher,
                        error,
                        request,
                        provider: this
                    });
                    return reject(error);
                }
                this.emit("debug", {
                    action: "response",
                    fetcher,
                    request,
                    response,
                    provider: this
                });
                if (response.error) {
                    const error2 = new Error(response.error.message);
                    error2.code = response.error.code;
                    error2.data = response.error.data;
                    return reject(error2);
                }
                resolve(response.result);
            });
        });
    };
}
function buildEip1193Fetcher(provider) {
    return function(method, params) {
        if (params == null) {
            params = [];
        }
        const request = {
            method,
            params
        };
        this.emit("debug", {
            action: "request",
            fetcher: "Eip1193Fetcher",
            request: deepCopy(request),
            provider: this
        });
        return provider.request(request).then((response)=>{
            this.emit("debug", {
                action: "response",
                fetcher: "Eip1193Fetcher",
                request,
                response,
                provider: this
            });
            return response;
        }, (error)=>{
            this.emit("debug", {
                action: "response",
                fetcher: "Eip1193Fetcher",
                request,
                error,
                provider: this
            });
            throw error;
        });
    };
}
class Web3Provider extends JsonRpcProvider {
    constructor(provider, network){
        if (provider == null) {
            logger$d.throwArgumentError("missing provider", "provider", provider);
        }
        let path = null;
        let jsonRpcFetchFunc = null;
        let subprovider = null;
        if (typeof provider === "function") {
            path = "unknown:";
            jsonRpcFetchFunc = provider;
        } else {
            path = provider.host || provider.path || "";
            if (!path && provider.isMetaMask) {
                path = "metamask";
            }
            subprovider = provider;
            if (provider.request) {
                if (path === "") {
                    path = "eip-1193:";
                }
                jsonRpcFetchFunc = buildEip1193Fetcher(provider);
            } else if (provider.sendAsync) {
                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
            } else if (provider.send) {
                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
            } else {
                logger$d.throwArgumentError("unsupported provider", "provider", provider);
            }
            if (!path) {
                path = "unknown:";
            }
        }
        super(path, network);
        defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
        defineReadOnly(this, "provider", subprovider);
    }
    send(method, params) {
        return this.jsonRpcFetchFunc(method, params);
    }
}
const logger$e = new Logger(version23);
function getDefaultProvider(network, options) {
    if (network == null) {
        network = "homestead";
    }
    if (typeof network === "string") {
        const match = network.match(/^(ws|http)s?:/i);
        if (match) {
            switch(match[1].toLowerCase()){
                case "http":
                case "https":
                    return new JsonRpcProvider(network);
                case "ws":
                case "wss":
                    return new WebSocketProvider(network);
                default:
                    logger$e.throwArgumentError("unsupported URL scheme", "network", network);
            }
        }
    }
    const n = getNetwork(network);
    if (!n || !n._defaultProvider) {
        logger$e.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
            operation: "getDefaultProvider",
            network
        });
    }
    return n._defaultProvider({
        FallbackProvider,
        AlchemyProvider,
        AnkrProvider,
        CloudflareProvider,
        EtherscanProvider,
        InfuraProvider,
        JsonRpcProvider,
        NodesmithProvider,
        PocketProvider,
        Web3Provider,
        IpcProvider: null
    }, options);
}
const mod3 = function() {
    return {
        Provider: Provider,
        getNetwork: getNetwork,
        AlchemyProvider: AlchemyProvider,
        AlchemyWebSocketProvider: AlchemyWebSocketProvider,
        AnkrProvider: AnkrProvider,
        BaseProvider: BaseProvider,
        CloudflareProvider: CloudflareProvider,
        EtherscanProvider: EtherscanProvider,
        FallbackProvider: FallbackProvider,
        Formatter: Formatter,
        InfuraProvider: InfuraProvider,
        InfuraWebSocketProvider: InfuraWebSocketProvider,
        IpcProvider: null,
        JsonRpcBatchProvider: JsonRpcBatchProvider,
        JsonRpcProvider: JsonRpcProvider,
        JsonRpcSigner: JsonRpcSigner,
        NodesmithProvider: NodesmithProvider,
        PocketProvider: PocketProvider,
        Resolver: Resolver,
        StaticJsonRpcProvider: StaticJsonRpcProvider,
        UrlJsonRpcProvider: UrlJsonRpcProvider,
        Web3Provider: Web3Provider,
        WebSocketProvider: WebSocketProvider,
        getDefaultProvider: getDefaultProvider,
        isCommunityResourcable: isCommunityResourcable,
        isCommunityResource: isCommunityResource,
        showThrottleMessage: showThrottleMessage,
        default: null
    };
}();
const version24 = "solidity/5.7.0";
const regexBytes = new RegExp("^bytes([0-9]+)$");
const regexNumber = new RegExp("^(u?int)([0-9]*)$");
const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
const Zeros1 = "0000000000000000000000000000000000000000000000000000000000000000";
const logger222 = new Logger(version24);
function _pack(type, value, isArray) {
    switch(type){
        case "address":
            if (isArray) {
                return zeroPad(value, 32);
            }
            return arrayify(value);
        case "string":
            return toUtf8Bytes(value);
        case "bytes":
            return arrayify(value);
        case "bool":
            value = value ? "0x01" : "0x00";
            if (isArray) {
                return zeroPad(value, 32);
            }
            return arrayify(value);
    }
    let match = type.match(regexNumber);
    if (match) {
        let size = parseInt(match[2] || "256");
        if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
            logger222.throwArgumentError("invalid number type", "type", type);
        }
        if (isArray) {
            size = 256;
        }
        value = BigNumber.from(value).toTwos(size);
        return zeroPad(value, size / 8);
    }
    match = type.match(regexBytes);
    if (match) {
        const size = parseInt(match[1]);
        if (String(size) !== match[1] || size === 0 || size > 32) {
            logger222.throwArgumentError("invalid bytes type", "type", type);
        }
        if (arrayify(value).byteLength !== size) {
            logger222.throwArgumentError(`invalid value for ${type}`, "value", value);
        }
        if (isArray) {
            return arrayify((value + Zeros1).substring(0, 66));
        }
        return value;
    }
    match = type.match(regexArray);
    if (match && Array.isArray(value)) {
        const baseType = match[1];
        const count = parseInt(match[2] || String(value.length));
        if (count != value.length) {
            logger222.throwArgumentError(`invalid array length for ${type}`, "value", value);
        }
        const result = [];
        value.forEach(function(value2) {
            result.push(_pack(baseType, value2, true));
        });
        return concat(result);
    }
    return logger222.throwArgumentError("invalid type", "type", type);
}
function pack1(types, values) {
    if (types.length != values.length) {
        logger222.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
    }
    const tight = [];
    types.forEach(function(type, index) {
        tight.push(_pack(type, values[index]));
    });
    return hexlify(concat(tight));
}
function keccak2562(types, values) {
    return keccak256(pack1(types, values));
}
function sha2562(types, values) {
    return sha2561(pack1(types, values));
}
const version25 = "units/5.7.0";
const logger223 = new Logger(version25);
const names = [
    "wei",
    "kwei",
    "mwei",
    "gwei",
    "szabo",
    "finney",
    "ether"
];
function commify(value) {
    const comps = String(value).split(".");
    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
        logger223.throwArgumentError("invalid value", "value", value);
    }
    let whole = comps[0];
    let negative = "";
    if (whole.substring(0, 1) === "-") {
        negative = "-";
        whole = whole.substring(1);
    }
    while(whole.substring(0, 1) === "0"){
        whole = whole.substring(1);
    }
    if (whole === "") {
        whole = "0";
    }
    let suffix = "";
    if (comps.length === 2) {
        suffix = "." + (comps[1] || "0");
    }
    while(suffix.length > 2 && suffix[suffix.length - 1] === "0"){
        suffix = suffix.substring(0, suffix.length - 1);
    }
    const formatted = [];
    while(whole.length){
        if (whole.length <= 3) {
            formatted.unshift(whole);
            break;
        } else {
            const index = whole.length - 3;
            formatted.unshift(whole.substring(index));
            whole = whole.substring(0, index);
        }
    }
    return negative + formatted.join(",") + suffix;
}
function formatUnits(value, unitName) {
    if (typeof unitName === "string") {
        const index = names.indexOf(unitName);
        if (index !== -1) {
            unitName = 3 * index;
        }
    }
    return formatFixed(value, unitName != null ? unitName : 18);
}
function parseUnits(value, unitName) {
    if (typeof value !== "string") {
        logger223.throwArgumentError("value must be a string", "value", value);
    }
    if (typeof unitName === "string") {
        const index = names.indexOf(unitName);
        if (index !== -1) {
            unitName = 3 * index;
        }
    }
    return parseFixed(value, unitName != null ? unitName : 18);
}
function formatEther(wei) {
    return formatUnits(wei, 18);
}
function parseEther(ether) {
    return parseUnits(ether, 18);
}
var utils1 = Object.freeze({
    __proto__: null,
    AbiCoder,
    defaultAbiCoder,
    Fragment,
    ConstructorFragment,
    ErrorFragment,
    EventFragment,
    FunctionFragment,
    ParamType,
    FormatTypes,
    checkResultErrors,
    Logger,
    RLP: mod,
    _fetchData,
    fetchJson,
    poll,
    checkProperties,
    deepCopy,
    defineReadOnly,
    getStatic,
    resolveProperties,
    shallowCopy,
    arrayify,
    concat,
    stripZeros,
    zeroPad,
    isBytes,
    isBytesLike,
    defaultPath,
    HDNode,
    SigningKey,
    Interface,
    LogDescription,
    TransactionDescription,
    base58: Base58,
    base64: mod2,
    hexlify,
    isHexString,
    hexConcat,
    hexStripZeros,
    hexValue,
    hexZeroPad,
    hexDataLength,
    hexDataSlice,
    nameprep,
    _toEscapedUtf8String,
    toUtf8Bytes,
    toUtf8CodePoints,
    toUtf8String,
    Utf8ErrorFuncs,
    formatBytes32String,
    parseBytes32String,
    dnsEncode,
    hashMessage,
    namehash,
    isValidName,
    id,
    _TypedDataEncoder: TypedDataEncoder,
    getAddress,
    getIcapAddress,
    getContractAddress,
    getCreate2Address,
    isAddress,
    formatEther,
    parseEther,
    formatUnits,
    parseUnits,
    commify,
    computeHmac,
    keccak256: keccak256,
    ripemd160: ripemd1601,
    sha256: sha2561,
    sha512: sha5121,
    randomBytes,
    shuffled,
    solidityPack: pack1,
    solidityKeccak256: keccak2562,
    soliditySha256: sha2562,
    splitSignature,
    joinSignature,
    accessListify,
    parseTransaction: parse,
    serializeTransaction: serialize,
    TransactionTypes,
    getJsonWalletAddress,
    computeAddress,
    recoverAddress,
    computePublicKey,
    recoverPublicKey,
    verifyMessage,
    verifyTypedData,
    getAccountPath,
    mnemonicToEntropy,
    entropyToMnemonic,
    isValidMnemonic,
    mnemonicToSeed,
    SupportedAlgorithm,
    UnicodeNormalizationForm,
    Utf8ErrorReason,
    Indexed
});
const version26 = "ethers/5.7.2";
const logger3 = new Logger(version26);
var ethers = Object.freeze({
    __proto__: null,
    Signer,
    Wallet,
    VoidSigner,
    getDefaultProvider,
    providers: mod3,
    BaseContract,
    Contract,
    ContractFactory,
    BigNumber,
    FixedNumber,
    constants: mod1,
    errors: ErrorCode,
    logger: logger3,
    utils: utils1,
    wordlists: wordlists,
    version: version26,
    Wordlist
});
try {
    const anyGlobal = window;
    if (anyGlobal._ethers == null) {
        anyGlobal._ethers = ethers;
    }
} catch (error) {}
const typeofs = [
    "string",
    "number",
    "bigint",
    "symbol"
];
const objectTypeNames = [
    "Function",
    "Generator",
    "AsyncGenerator",
    "GeneratorFunction",
    "AsyncGeneratorFunction",
    "AsyncFunction",
    "Observable",
    "Array",
    "Buffer",
    "Object",
    "RegExp",
    "Date",
    "Error",
    "Map",
    "Set",
    "WeakMap",
    "WeakSet",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "DataView",
    "Promise",
    "URL",
    "HTMLElement",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Uint16Array",
    "Int32Array",
    "Uint32Array",
    "Float32Array",
    "Float64Array",
    "BigInt64Array",
    "BigUint64Array"
];
function is(value) {
    if (value === null) {
        return "null";
    }
    if (value === void 0) {
        return "undefined";
    }
    if (value === true || value === false) {
        return "boolean";
    }
    const typeOf = typeof value;
    if (typeofs.includes(typeOf)) {
        return typeOf;
    }
    if (typeOf === "function") {
        return "Function";
    }
    if (Array.isArray(value)) {
        return "Array";
    }
    if (isBuffer(value)) {
        return "Buffer";
    }
    const objectType = getObjectType(value);
    if (objectType) {
        return objectType;
    }
    return "Object";
}
function isBuffer(value) {
    return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
}
function getObjectType(value) {
    const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
    if (objectTypeNames.includes(objectTypeName)) {
        return objectTypeName;
    }
    return void 0;
}
class Type {
    constructor(major, name, terminal){
        this.major = major;
        this.majorEncoded = major << 5;
        this.name = name;
        this.terminal = terminal;
    }
    toString() {
        return `Type[${this.major}].${this.name}`;
    }
    compare(typ) {
        return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
    }
}
Type.uint = new Type(0, "uint", true);
Type.negint = new Type(1, "negint", true);
Type.bytes = new Type(2, "bytes", true);
Type.string = new Type(3, "string", true);
Type.array = new Type(4, "array", false);
Type.map = new Type(5, "map", false);
Type.tag = new Type(6, "tag", false);
Type.float = new Type(7, "float", true);
Type.false = new Type(7, "false", true);
Type.true = new Type(7, "true", true);
Type.null = new Type(7, "null", true);
Type.undefined = new Type(7, "undefined", true);
Type.break = new Type(7, "break", true);
class Token {
    constructor(type, value, encodedLength){
        this.type = type;
        this.value = value;
        this.encodedLength = encodedLength;
        this.encodedBytes = void 0;
        this.byteValue = void 0;
    }
    toString() {
        return `Token[${this.type}].${this.value}`;
    }
}
const useBuffer = globalThis.process && !globalThis.process.browser && globalThis.Buffer && typeof globalThis.Buffer.isBuffer === "function";
const textDecoder1 = new TextDecoder();
const textEncoder = new TextEncoder();
function isBuffer$1(buf2) {
    return useBuffer && globalThis.Buffer.isBuffer(buf2);
}
function asU8A(buf2) {
    if (!(buf2 instanceof Uint8Array)) {
        return Uint8Array.from(buf2);
    }
    return isBuffer$1(buf2) ? new Uint8Array(buf2.buffer, buf2.byteOffset, buf2.byteLength) : buf2;
}
const toString = useBuffer ? (bytes, start, end)=>{
    return end - start > 64 ? globalThis.Buffer.from(bytes.subarray(start, end)).toString("utf8") : utf8Slice(bytes, start, end);
} : (bytes, start, end)=>{
    return end - start > 64 ? textDecoder1.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);
};
const fromString = useBuffer ? (string)=>{
    return string.length > 64 ? globalThis.Buffer.from(string) : utf8ToBytes(string);
} : (string)=>{
    return string.length > 64 ? textEncoder.encode(string) : utf8ToBytes(string);
};
const fromArray = (arr)=>{
    return Uint8Array.from(arr);
};
const slice = useBuffer ? (bytes, start, end)=>{
    if (isBuffer$1(bytes)) {
        return new Uint8Array(bytes.subarray(start, end));
    }
    return bytes.slice(start, end);
} : (bytes, start, end)=>{
    return bytes.slice(start, end);
};
const concat1 = useBuffer ? (chunks, length)=>{
    chunks = chunks.map((c)=>c instanceof Uint8Array ? c : globalThis.Buffer.from(c));
    return asU8A(globalThis.Buffer.concat(chunks, length));
} : (chunks, length)=>{
    const out = new Uint8Array(length);
    let off = 0;
    for (let b of chunks){
        if (off + b.length > out.length) {
            b = b.subarray(0, out.length - off);
        }
        out.set(b, off);
        off += b.length;
    }
    return out;
};
const alloc = useBuffer ? (size)=>{
    return globalThis.Buffer.allocUnsafe(size);
} : (size)=>{
    return new Uint8Array(size);
};
function compare(b1, b2) {
    if (isBuffer$1(b1) && isBuffer$1(b2)) {
        return b1.compare(b2);
    }
    for(let i = 0; i < b1.length; i++){
        if (b1[i] === b2[i]) {
            continue;
        }
        return b1[i] < b2[i] ? -1 : 1;
    }
    return 0;
}
function utf8ToBytes(str) {
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        if (c < 128) {
            out[p++] = c;
        } else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
            c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
}
function utf8Slice(buf2, offset, end) {
    const res = [];
    while(offset < end){
        const firstByte = buf2[offset];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (offset + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) {
                        codePoint = firstByte;
                    }
                    break;
                case 2:
                    secondByte = buf2[offset + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 3:
                    secondByte = buf2[offset + 1];
                    thirdByte = buf2[offset + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 4:
                    secondByte = buf2[offset + 1];
                    thirdByte = buf2[offset + 2];
                    fourthByte = buf2[offset + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                            codePoint = tempCodePoint;
                        }
                    }
            }
        }
        if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        offset += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
const MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= 4096) {
        return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i = 0;
    while(i < len){
        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
}
class Bl {
    constructor(chunkSize = 256){
        this.chunkSize = chunkSize;
        this.cursor = 0;
        this.maxCursor = -1;
        this.chunks = [];
        this._initReuseChunk = null;
    }
    reset() {
        this.cursor = 0;
        this.maxCursor = -1;
        if (this.chunks.length) {
            this.chunks = [];
        }
        if (this._initReuseChunk !== null) {
            this.chunks.push(this._initReuseChunk);
            this.maxCursor = this._initReuseChunk.length - 1;
        }
    }
    push(bytes) {
        let topChunk = this.chunks[this.chunks.length - 1];
        const newMax = this.cursor + bytes.length;
        if (newMax <= this.maxCursor + 1) {
            const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
            topChunk.set(bytes, chunkPos);
        } else {
            if (topChunk) {
                const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
                if (chunkPos < topChunk.length) {
                    this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);
                    this.maxCursor = this.cursor - 1;
                }
            }
            if (bytes.length < 64 && bytes.length < this.chunkSize) {
                topChunk = alloc(this.chunkSize);
                this.chunks.push(topChunk);
                this.maxCursor += topChunk.length;
                if (this._initReuseChunk === null) {
                    this._initReuseChunk = topChunk;
                }
                topChunk.set(bytes, 0);
            } else {
                this.chunks.push(bytes);
                this.maxCursor += bytes.length;
            }
        }
        this.cursor += bytes.length;
    }
    toBytes(reset = false) {
        let byts;
        if (this.chunks.length === 1) {
            const chunk = this.chunks[0];
            if (reset && this.cursor > chunk.length / 2) {
                byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);
                this._initReuseChunk = null;
                this.chunks = [];
            } else {
                byts = slice(chunk, 0, this.cursor);
            }
        } else {
            byts = concat1(this.chunks, this.cursor);
        }
        if (reset) {
            this.reset();
        }
        return byts;
    }
}
const decodeErrPrefix = "CBOR decode error:";
const encodeErrPrefix = "CBOR encode error:";
const uintMinorPrefixBytes = [];
uintMinorPrefixBytes[23] = 1;
uintMinorPrefixBytes[24] = 2;
uintMinorPrefixBytes[25] = 3;
uintMinorPrefixBytes[26] = 5;
uintMinorPrefixBytes[27] = 9;
function assertEnoughData(data, pos, need) {
    if (data.length - pos < need) {
        throw new Error(`${decodeErrPrefix} not enough data for type`);
    }
}
const uintBoundaries = [
    24,
    256,
    65536,
    4294967296,
    BigInt("18446744073709551616")
];
function readUint8(data, offset, options) {
    assertEnoughData(data, offset, 1);
    const value = data[offset];
    if (options.strict === true && value < uintBoundaries[0]) {
        throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
}
function readUint16(data, offset, options) {
    assertEnoughData(data, offset, 2);
    const value = data[offset] << 8 | data[offset + 1];
    if (options.strict === true && value < uintBoundaries[1]) {
        throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
}
function readUint32(data, offset, options) {
    assertEnoughData(data, offset, 4);
    const value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    if (options.strict === true && value < uintBoundaries[2]) {
        throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
}
function readUint64(data, offset, options) {
    assertEnoughData(data, offset, 8);
    const hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    const lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];
    const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
    if (options.strict === true && value < uintBoundaries[3]) {
        throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    if (value <= Number.MAX_SAFE_INTEGER) {
        return Number(value);
    }
    if (options.allowBigInt === true) {
        return value;
    }
    throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
}
function decodeUint8(data, pos, _minor, options) {
    return new Token(Type.uint, readUint8(data, pos + 1, options), 2);
}
function decodeUint16(data, pos, _minor, options) {
    return new Token(Type.uint, readUint16(data, pos + 1, options), 3);
}
function decodeUint32(data, pos, _minor, options) {
    return new Token(Type.uint, readUint32(data, pos + 1, options), 5);
}
function decodeUint64(data, pos, _minor, options) {
    return new Token(Type.uint, readUint64(data, pos + 1, options), 9);
}
function encodeUint(buf2, token) {
    return encodeUintValue(buf2, 0, token.value);
}
function encodeUintValue(buf2, major, uint) {
    if (uint < uintBoundaries[0]) {
        const nuint = Number(uint);
        buf2.push([
            major | nuint
        ]);
    } else if (uint < uintBoundaries[1]) {
        const nuint = Number(uint);
        buf2.push([
            major | 24,
            nuint
        ]);
    } else if (uint < uintBoundaries[2]) {
        const nuint = Number(uint);
        buf2.push([
            major | 25,
            nuint >>> 8,
            nuint & 255
        ]);
    } else if (uint < uintBoundaries[3]) {
        const nuint = Number(uint);
        buf2.push([
            major | 26,
            nuint >>> 24 & 255,
            nuint >>> 16 & 255,
            nuint >>> 8 & 255,
            nuint & 255
        ]);
    } else {
        const buint = BigInt(uint);
        if (buint < uintBoundaries[4]) {
            const set = [
                major | 27,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ];
            let lo = Number(buint & BigInt(4294967295));
            let hi = Number(buint >> BigInt(32) & BigInt(4294967295));
            set[8] = lo & 255;
            lo = lo >> 8;
            set[7] = lo & 255;
            lo = lo >> 8;
            set[6] = lo & 255;
            lo = lo >> 8;
            set[5] = lo & 255;
            set[4] = hi & 255;
            hi = hi >> 8;
            set[3] = hi & 255;
            hi = hi >> 8;
            set[2] = hi & 255;
            hi = hi >> 8;
            set[1] = hi & 255;
            buf2.push(set);
        } else {
            throw new Error(`${decodeErrPrefix} encountered BigInt larger than allowable range`);
        }
    }
}
encodeUint.encodedSize = function encodedSize(token) {
    return encodeUintValue.encodedSize(token.value);
};
encodeUintValue.encodedSize = function encodedSize2(uint) {
    if (uint < uintBoundaries[0]) {
        return 1;
    }
    if (uint < uintBoundaries[1]) {
        return 2;
    }
    if (uint < uintBoundaries[2]) {
        return 3;
    }
    if (uint < uintBoundaries[3]) {
        return 5;
    }
    return 9;
};
encodeUint.compareTokens = function compareTokens(tok1, tok2) {
    return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : 0;
};
function decodeNegint8(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint8(data, pos + 1, options), 2);
}
function decodeNegint16(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint16(data, pos + 1, options), 3);
}
function decodeNegint32(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint32(data, pos + 1, options), 5);
}
const neg1b = BigInt(-1);
const pos1b = BigInt(1);
function decodeNegint64(data, pos, _minor, options) {
    const __int = readUint64(data, pos + 1, options);
    if (typeof __int !== "bigint") {
        const value = -1 - __int;
        if (value >= Number.MIN_SAFE_INTEGER) {
            return new Token(Type.negint, value, 9);
        }
    }
    if (options.allowBigInt !== true) {
        throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
    }
    return new Token(Type.negint, neg1b - BigInt(__int), 9);
}
function encodeNegint(buf2, token) {
    const negint = token.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    encodeUintValue(buf2, token.type.majorEncoded, unsigned);
}
encodeNegint.encodedSize = function encodedSize3(token) {
    const negint = token.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    if (unsigned < uintBoundaries[0]) {
        return 1;
    }
    if (unsigned < uintBoundaries[1]) {
        return 2;
    }
    if (unsigned < uintBoundaries[2]) {
        return 3;
    }
    if (unsigned < uintBoundaries[3]) {
        return 5;
    }
    return 9;
};
encodeNegint.compareTokens = function compareTokens2(tok1, tok2) {
    return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;
};
function toToken(data, pos, prefix, length) {
    assertEnoughData(data, pos, prefix + length);
    const buf2 = slice(data, pos + prefix, pos + prefix + length);
    return new Token(Type.bytes, buf2, prefix + length);
}
function decodeBytesCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
}
function decodeBytes8(data, pos, _minor, options) {
    return toToken(data, pos, 2, readUint8(data, pos + 1, options));
}
function decodeBytes16(data, pos, _minor, options) {
    return toToken(data, pos, 3, readUint16(data, pos + 1, options));
}
function decodeBytes32(data, pos, _minor, options) {
    return toToken(data, pos, 5, readUint32(data, pos + 1, options));
}
function decodeBytes64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
        throw new Error(`${decodeErrPrefix} 64-bit integer bytes lengths not supported`);
    }
    return toToken(data, pos, 9, l);
}
function tokenBytes(token) {
    if (token.encodedBytes === void 0) {
        token.encodedBytes = token.type === Type.string ? fromString(token.value) : token.value;
    }
    return token.encodedBytes;
}
function encodeBytes1(buf2, token) {
    const bytes = tokenBytes(token);
    encodeUintValue(buf2, token.type.majorEncoded, bytes.length);
    buf2.push(bytes);
}
encodeBytes1.encodedSize = function encodedSize4(token) {
    const bytes = tokenBytes(token);
    return encodeUintValue.encodedSize(bytes.length) + bytes.length;
};
encodeBytes1.compareTokens = function compareTokens3(tok1, tok2) {
    return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
};
function compareBytes(b1, b2) {
    return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare(b1, b2);
}
function toToken$1(data, pos, prefix, length, options) {
    const totLength = prefix + length;
    assertEnoughData(data, pos, totLength);
    const tok = new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);
    if (options.retainStringBytes === true) {
        tok.byteValue = slice(data, pos + prefix, pos + totLength);
    }
    return tok;
}
function decodeStringCompact(data, pos, minor, options) {
    return toToken$1(data, pos, 1, minor, options);
}
function decodeString8(data, pos, _minor, options) {
    return toToken$1(data, pos, 2, readUint8(data, pos + 1, options), options);
}
function decodeString16(data, pos, _minor, options) {
    return toToken$1(data, pos, 3, readUint16(data, pos + 1, options), options);
}
function decodeString32(data, pos, _minor, options) {
    return toToken$1(data, pos, 5, readUint32(data, pos + 1, options), options);
}
function decodeString64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
        throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);
    }
    return toToken$1(data, pos, 9, l, options);
}
const encodeString = encodeBytes1;
function toToken$2(_data, _pos, prefix, length) {
    return new Token(Type.array, length, prefix);
}
function decodeArrayCompact(data, pos, minor, _options) {
    return toToken$2(data, pos, 1, minor);
}
function decodeArray8(data, pos, _minor, options) {
    return toToken$2(data, pos, 2, readUint8(data, pos + 1, options));
}
function decodeArray16(data, pos, _minor, options) {
    return toToken$2(data, pos, 3, readUint16(data, pos + 1, options));
}
function decodeArray32(data, pos, _minor, options) {
    return toToken$2(data, pos, 5, readUint32(data, pos + 1, options));
}
function decodeArray64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
        throw new Error(`${decodeErrPrefix} 64-bit integer array lengths not supported`);
    }
    return toToken$2(data, pos, 9, l);
}
function decodeArrayIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
        throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken$2(data, pos, 1, Infinity);
}
function encodeArray(buf2, token) {
    encodeUintValue(buf2, Type.array.majorEncoded, token.value);
}
encodeArray.compareTokens = encodeUint.compareTokens;
encodeArray.encodedSize = function encodedSize5(token) {
    return encodeUintValue.encodedSize(token.value);
};
function toToken$3(_data, _pos, prefix, length) {
    return new Token(Type.map, length, prefix);
}
function decodeMapCompact(data, pos, minor, _options) {
    return toToken$3(data, pos, 1, minor);
}
function decodeMap8(data, pos, _minor, options) {
    return toToken$3(data, pos, 2, readUint8(data, pos + 1, options));
}
function decodeMap16(data, pos, _minor, options) {
    return toToken$3(data, pos, 3, readUint16(data, pos + 1, options));
}
function decodeMap32(data, pos, _minor, options) {
    return toToken$3(data, pos, 5, readUint32(data, pos + 1, options));
}
function decodeMap64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
        throw new Error(`${decodeErrPrefix} 64-bit integer map lengths not supported`);
    }
    return toToken$3(data, pos, 9, l);
}
function decodeMapIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
        throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken$3(data, pos, 1, Infinity);
}
function encodeMap(buf2, token) {
    encodeUintValue(buf2, Type.map.majorEncoded, token.value);
}
encodeMap.compareTokens = encodeUint.compareTokens;
encodeMap.encodedSize = function encodedSize6(token) {
    return encodeUintValue.encodedSize(token.value);
};
function decodeTagCompact(_data, _pos, minor, _options) {
    return new Token(Type.tag, minor, 1);
}
function decodeTag8(data, pos, _minor, options) {
    return new Token(Type.tag, readUint8(data, pos + 1, options), 2);
}
function decodeTag16(data, pos, _minor, options) {
    return new Token(Type.tag, readUint16(data, pos + 1, options), 3);
}
function decodeTag32(data, pos, _minor, options) {
    return new Token(Type.tag, readUint32(data, pos + 1, options), 5);
}
function decodeTag64(data, pos, _minor, options) {
    return new Token(Type.tag, readUint64(data, pos + 1, options), 9);
}
function encodeTag(buf2, token) {
    encodeUintValue(buf2, Type.tag.majorEncoded, token.value);
}
encodeTag.compareTokens = encodeUint.compareTokens;
encodeTag.encodedSize = function encodedSize7(token) {
    return encodeUintValue.encodedSize(token.value);
};
function decodeUndefined(_data, _pos, _minor, options) {
    if (options.allowUndefined === false) {
        throw new Error(`${decodeErrPrefix} undefined values are not supported`);
    } else if (options.coerceUndefinedToNull === true) {
        return new Token(Type.null, null, 1);
    }
    return new Token(Type.undefined, void 0, 1);
}
function decodeBreak(_data, _pos, _minor, options) {
    if (options.allowIndefinite === false) {
        throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return new Token(Type.break, void 0, 1);
}
function createToken(value, bytes, options) {
    if (options) {
        if (options.allowNaN === false && Number.isNaN(value)) {
            throw new Error(`${decodeErrPrefix} NaN values are not supported`);
        }
        if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {
            throw new Error(`${decodeErrPrefix} Infinity values are not supported`);
        }
    }
    return new Token(Type.float, value, bytes);
}
function decodeFloat16(data, pos, _minor, options) {
    return createToken(readFloat16(data, pos + 1), 3, options);
}
function decodeFloat32(data, pos, _minor, options) {
    return createToken(readFloat32(data, pos + 1), 5, options);
}
function decodeFloat64(data, pos, _minor, options) {
    return createToken(readFloat64(data, pos + 1), 9, options);
}
function encodeFloat(buf2, token, options) {
    const __float = token.value;
    if (__float === false) {
        buf2.push([
            Type.float.majorEncoded | 20
        ]);
    } else if (__float === true) {
        buf2.push([
            Type.float.majorEncoded | 21
        ]);
    } else if (__float === null) {
        buf2.push([
            Type.float.majorEncoded | 22
        ]);
    } else if (__float === void 0) {
        buf2.push([
            Type.float.majorEncoded | 23
        ]);
    } else {
        let decoded;
        let success = false;
        if (!options || options.float64 !== true) {
            encodeFloat16(__float);
            decoded = readFloat16(ui8a, 1);
            if (__float === decoded || Number.isNaN(__float)) {
                ui8a[0] = 249;
                buf2.push(ui8a.slice(0, 3));
                success = true;
            } else {
                encodeFloat32(__float);
                decoded = readFloat32(ui8a, 1);
                if (__float === decoded) {
                    ui8a[0] = 250;
                    buf2.push(ui8a.slice(0, 5));
                    success = true;
                }
            }
        }
        if (!success) {
            encodeFloat64(__float);
            decoded = readFloat64(ui8a, 1);
            ui8a[0] = 251;
            buf2.push(ui8a.slice(0, 9));
        }
    }
}
encodeFloat.encodedSize = function encodedSize8(token, options) {
    const __float = token.value;
    if (__float === false || __float === true || __float === null || __float === void 0) {
        return 1;
    }
    if (!options || options.float64 !== true) {
        encodeFloat16(__float);
        let decoded = readFloat16(ui8a, 1);
        if (__float === decoded || Number.isNaN(__float)) {
            return 3;
        }
        encodeFloat32(__float);
        decoded = readFloat32(ui8a, 1);
        if (__float === decoded) {
            return 5;
        }
    }
    return 9;
};
const buffer = new ArrayBuffer(9);
const dataView = new DataView(buffer, 1);
const ui8a = new Uint8Array(buffer, 0);
function encodeFloat16(inp) {
    if (inp === Infinity) {
        dataView.setUint16(0, 31744, false);
    } else if (inp === -Infinity) {
        dataView.setUint16(0, 64512, false);
    } else if (Number.isNaN(inp)) {
        dataView.setUint16(0, 32256, false);
    } else {
        dataView.setFloat32(0, inp);
        const valu32 = dataView.getUint32(0);
        const exponent = (valu32 & 2139095040) >> 23;
        const mantissa = valu32 & 8388607;
        if (exponent === 255) {
            dataView.setUint16(0, 31744, false);
        } else if (exponent === 0) {
            dataView.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);
        } else {
            const logicalExponent = exponent - 127;
            if (logicalExponent < -24) {
                dataView.setUint16(0, 0);
            } else if (logicalExponent < -14) {
                dataView.setUint16(0, (valu32 & 2147483648) >> 16 | 1 << 24 + logicalExponent, false);
            } else {
                dataView.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
            }
        }
    }
}
function readFloat16(ui8a2, pos) {
    if (ui8a2.length - pos < 2) {
        throw new Error(`${decodeErrPrefix} not enough data for float16`);
    }
    const half = (ui8a2[pos] << 8) + ui8a2[pos + 1];
    if (half === 31744) {
        return Infinity;
    }
    if (half === 64512) {
        return -Infinity;
    }
    if (half === 32256) {
        return NaN;
    }
    const exp = half >> 10 & 31;
    const mant = half & 1023;
    let val;
    if (exp === 0) {
        val = mant * 2 ** -24;
    } else if (exp !== 31) {
        val = (mant + 1024) * 2 ** (exp - 25);
    } else {
        val = mant === 0 ? Infinity : NaN;
    }
    return half & 32768 ? -val : val;
}
function encodeFloat32(inp) {
    dataView.setFloat32(0, inp, false);
}
function readFloat32(ui8a2, pos) {
    if (ui8a2.length - pos < 4) {
        throw new Error(`${decodeErrPrefix} not enough data for float32`);
    }
    const offset = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset, 4).getFloat32(0, false);
}
function encodeFloat64(inp) {
    dataView.setFloat64(0, inp, false);
}
function readFloat64(ui8a2, pos) {
    if (ui8a2.length - pos < 8) {
        throw new Error(`${decodeErrPrefix} not enough data for float64`);
    }
    const offset = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset, 8).getFloat64(0, false);
}
encodeFloat.compareTokens = encodeUint.compareTokens;
function invalidMinor(data, pos, minor) {
    throw new Error(`${decodeErrPrefix} encountered invalid minor (${minor}) for major ${data[pos] >>> 5}`);
}
function errorer(msg) {
    return ()=>{
        throw new Error(`${decodeErrPrefix} ${msg}`);
    };
}
const jump = [];
for(let i = 0; i <= 23; i++){
    jump[i] = invalidMinor;
}
jump[24] = decodeUint8;
jump[25] = decodeUint16;
jump[26] = decodeUint32;
jump[27] = decodeUint64;
jump[28] = invalidMinor;
jump[29] = invalidMinor;
jump[30] = invalidMinor;
jump[31] = invalidMinor;
for(let i = 32; i <= 55; i++){
    jump[i] = invalidMinor;
}
jump[56] = decodeNegint8;
jump[57] = decodeNegint16;
jump[58] = decodeNegint32;
jump[59] = decodeNegint64;
jump[60] = invalidMinor;
jump[61] = invalidMinor;
jump[62] = invalidMinor;
jump[63] = invalidMinor;
for(let i = 64; i <= 87; i++){
    jump[i] = decodeBytesCompact;
}
jump[88] = decodeBytes8;
jump[89] = decodeBytes16;
jump[90] = decodeBytes32;
jump[91] = decodeBytes64;
jump[92] = invalidMinor;
jump[93] = invalidMinor;
jump[94] = invalidMinor;
jump[95] = errorer("indefinite length bytes/strings are not supported");
for(let i = 96; i <= 119; i++){
    jump[i] = decodeStringCompact;
}
jump[120] = decodeString8;
jump[121] = decodeString16;
jump[122] = decodeString32;
jump[123] = decodeString64;
jump[124] = invalidMinor;
jump[125] = invalidMinor;
jump[126] = invalidMinor;
jump[127] = errorer("indefinite length bytes/strings are not supported");
for(let i = 128; i <= 151; i++){
    jump[i] = decodeArrayCompact;
}
jump[152] = decodeArray8;
jump[153] = decodeArray16;
jump[154] = decodeArray32;
jump[155] = decodeArray64;
jump[156] = invalidMinor;
jump[157] = invalidMinor;
jump[158] = invalidMinor;
jump[159] = decodeArrayIndefinite;
for(let i = 160; i <= 183; i++){
    jump[i] = decodeMapCompact;
}
jump[184] = decodeMap8;
jump[185] = decodeMap16;
jump[186] = decodeMap32;
jump[187] = decodeMap64;
jump[188] = invalidMinor;
jump[189] = invalidMinor;
jump[190] = invalidMinor;
jump[191] = decodeMapIndefinite;
for(let i = 192; i <= 215; i++){
    jump[i] = decodeTagCompact;
}
jump[216] = decodeTag8;
jump[217] = decodeTag16;
jump[218] = decodeTag32;
jump[219] = decodeTag64;
jump[220] = invalidMinor;
jump[221] = invalidMinor;
jump[222] = invalidMinor;
jump[223] = invalidMinor;
for(let i = 224; i <= 243; i++){
    jump[i] = errorer("simple values are not supported");
}
jump[244] = invalidMinor;
jump[245] = invalidMinor;
jump[246] = invalidMinor;
jump[247] = decodeUndefined;
jump[248] = errorer("simple values are not supported");
jump[249] = decodeFloat16;
jump[250] = decodeFloat32;
jump[251] = decodeFloat64;
jump[252] = invalidMinor;
jump[253] = invalidMinor;
jump[254] = invalidMinor;
jump[255] = decodeBreak;
const quick = [];
for(let i = 0; i < 24; i++){
    quick[i] = new Token(Type.uint, i, 1);
}
for(let i = -1; i >= -24; i--){
    quick[31 - i] = new Token(Type.negint, i, 1);
}
quick[64] = new Token(Type.bytes, new Uint8Array(0), 1);
quick[96] = new Token(Type.string, "", 1);
quick[128] = new Token(Type.array, 0, 1);
quick[160] = new Token(Type.map, 0, 1);
quick[244] = new Token(Type.false, false, 1);
quick[245] = new Token(Type.true, true, 1);
quick[246] = new Token(Type.null, null, 1);
function quickEncodeToken(token) {
    switch(token.type){
        case Type.false:
            return fromArray([
                244
            ]);
        case Type.true:
            return fromArray([
                245
            ]);
        case Type.null:
            return fromArray([
                246
            ]);
        case Type.bytes:
            if (!token.value.length) {
                return fromArray([
                    64
                ]);
            }
            return;
        case Type.string:
            if (token.value === "") {
                return fromArray([
                    96
                ]);
            }
            return;
        case Type.array:
            if (token.value === 0) {
                return fromArray([
                    128
                ]);
            }
            return;
        case Type.map:
            if (token.value === 0) {
                return fromArray([
                    160
                ]);
            }
            return;
        case Type.uint:
            if (token.value < 24) {
                return fromArray([
                    Number(token.value)
                ]);
            }
            return;
        case Type.negint:
            if (token.value >= -24) {
                return fromArray([
                    31 - Number(token.value)
                ]);
            }
    }
}
const defaultEncodeOptions = {
    float64: false,
    mapSorter,
    quickEncodeToken
};
function makeCborEncoders() {
    const encoders = [];
    encoders[Type.uint.major] = encodeUint;
    encoders[Type.negint.major] = encodeNegint;
    encoders[Type.bytes.major] = encodeBytes1;
    encoders[Type.string.major] = encodeString;
    encoders[Type.array.major] = encodeArray;
    encoders[Type.map.major] = encodeMap;
    encoders[Type.tag.major] = encodeTag;
    encoders[Type.float.major] = encodeFloat;
    return encoders;
}
const cborEncoders = makeCborEncoders();
const buf = new Bl();
class Ref {
    constructor(obj, parent){
        this.obj = obj;
        this.parent = parent;
    }
    includes(obj) {
        let p = this;
        do {
            if (p.obj === obj) {
                return true;
            }
        }while (p = p.parent)
        return false;
    }
    static createCheck(stack, obj) {
        if (stack && stack.includes(obj)) {
            throw new Error(`${encodeErrPrefix} object contains circular references`);
        }
        return new Ref(obj, stack);
    }
}
const simpleTokens = {
    null: new Token(Type.null, null),
    undefined: new Token(Type.undefined, void 0),
    true: new Token(Type.true, true),
    false: new Token(Type.false, false),
    emptyArray: new Token(Type.array, 0),
    emptyMap: new Token(Type.map, 0)
};
const typeEncoders = {
    number (obj, _typ, _options, _refStack) {
        if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {
            return new Token(Type.float, obj);
        } else if (obj >= 0) {
            return new Token(Type.uint, obj);
        } else {
            return new Token(Type.negint, obj);
        }
    },
    bigint (obj, _typ, _options, _refStack) {
        if (obj >= BigInt(0)) {
            return new Token(Type.uint, obj);
        } else {
            return new Token(Type.negint, obj);
        }
    },
    Uint8Array (obj, _typ, _options, _refStack) {
        return new Token(Type.bytes, obj);
    },
    string (obj, _typ, _options, _refStack) {
        return new Token(Type.string, obj);
    },
    boolean (obj, _typ, _options, _refStack) {
        return obj ? simpleTokens.true : simpleTokens.false;
    },
    null (_obj, _typ, _options, _refStack) {
        return simpleTokens.null;
    },
    undefined (_obj, _typ, _options, _refStack) {
        return simpleTokens.undefined;
    },
    ArrayBuffer (obj, _typ, _options, _refStack) {
        return new Token(Type.bytes, new Uint8Array(obj));
    },
    DataView (obj, _typ, _options, _refStack) {
        return new Token(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
    },
    Array (obj, _typ, options, refStack) {
        if (!obj.length) {
            if (options.addBreakTokens === true) {
                return [
                    simpleTokens.emptyArray,
                    new Token(Type.break)
                ];
            }
            return simpleTokens.emptyArray;
        }
        refStack = Ref.createCheck(refStack, obj);
        const entries = [];
        let i = 0;
        for (const e of obj){
            entries[i++] = objectToTokens(e, options, refStack);
        }
        if (options.addBreakTokens) {
            return [
                new Token(Type.array, obj.length),
                entries,
                new Token(Type.break)
            ];
        }
        return [
            new Token(Type.array, obj.length),
            entries
        ];
    },
    Object (obj, typ, options, refStack) {
        const isMap = typ !== "Object";
        const keys = isMap ? obj.keys() : Object.keys(obj);
        const length = isMap ? obj.size : keys.length;
        if (!length) {
            if (options.addBreakTokens === true) {
                return [
                    simpleTokens.emptyMap,
                    new Token(Type.break)
                ];
            }
            return simpleTokens.emptyMap;
        }
        refStack = Ref.createCheck(refStack, obj);
        const entries = [];
        let i = 0;
        for (const key of keys){
            entries[i++] = [
                objectToTokens(key, options, refStack),
                objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)
            ];
        }
        sortMapEntries(entries, options);
        if (options.addBreakTokens) {
            return [
                new Token(Type.map, length),
                entries,
                new Token(Type.break)
            ];
        }
        return [
            new Token(Type.map, length),
            entries
        ];
    }
};
typeEncoders.Map = typeEncoders.Object;
typeEncoders.Buffer = typeEncoders.Uint8Array;
for (const typ of "Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64".split(" ")){
    typeEncoders[`${typ}Array`] = typeEncoders.DataView;
}
function objectToTokens(obj, options = {}, refStack) {
    const typ = is(obj);
    const customTypeEncoder = options && options.typeEncoders && options.typeEncoders[typ] || typeEncoders[typ];
    if (typeof customTypeEncoder === "function") {
        const tokens = customTypeEncoder(obj, typ, options, refStack);
        if (tokens != null) {
            return tokens;
        }
    }
    const typeEncoder = typeEncoders[typ];
    if (!typeEncoder) {
        throw new Error(`${encodeErrPrefix} unsupported type: ${typ}`);
    }
    return typeEncoder(obj, typ, options, refStack);
}
function sortMapEntries(entries, options) {
    if (options.mapSorter) {
        entries.sort(options.mapSorter);
    }
}
function mapSorter(e1, e2) {
    const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];
    const keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];
    if (keyToken1.type !== keyToken2.type) {
        return keyToken1.type.compare(keyToken2.type);
    }
    const major = keyToken1.type.major;
    const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);
    if (tcmp === 0) {
        console.warn("WARNING: complex key types used, CBOR key sorting guarantees are gone");
    }
    return tcmp;
}
function tokensToEncoded(buf2, tokens, encoders, options) {
    if (Array.isArray(tokens)) {
        for (const token of tokens){
            tokensToEncoded(buf2, token, encoders, options);
        }
    } else {
        encoders[tokens.type.major](buf2, tokens, options);
    }
}
function encodeCustom(data, encoders, options) {
    const tokens = objectToTokens(data, options);
    if (!Array.isArray(tokens) && options.quickEncodeToken) {
        const quickBytes = options.quickEncodeToken(tokens);
        if (quickBytes) {
            return quickBytes;
        }
        const encoder = encoders[tokens.type.major];
        if (encoder.encodedSize) {
            const size = encoder.encodedSize(tokens, options);
            const buf2 = new Bl(size);
            encoder(buf2, tokens, options);
            if (buf2.chunks.length !== 1) {
                throw new Error(`Unexpected error: pre-calculated length for ${tokens} was wrong`);
            }
            return asU8A(buf2.chunks[0]);
        }
    }
    buf.reset();
    tokensToEncoded(buf, tokens, encoders, options);
    return buf.toBytes(true);
}
function encode3(data, options) {
    options = Object.assign({}, defaultEncodeOptions, options);
    return encodeCustom(data, cborEncoders, options);
}
const defaultDecodeOptions = {
    strict: false,
    allowIndefinite: true,
    allowUndefined: true,
    allowBigInt: true
};
class Tokeniser {
    constructor(data, options = {}){
        this._pos = 0;
        this.data = data;
        this.options = options;
    }
    pos() {
        return this._pos;
    }
    done() {
        return this._pos >= this.data.length;
    }
    next() {
        const byt = this.data[this._pos];
        let token = quick[byt];
        if (token === void 0) {
            const decoder = jump[byt];
            if (!decoder) {
                throw new Error(`${decodeErrPrefix} no decoder for major type ${byt >>> 5} (byte 0x${byt.toString(16).padStart(2, "0")})`);
            }
            const minor = byt & 31;
            token = decoder(this.data, this._pos, minor, this.options);
        }
        this._pos += token.encodedLength;
        return token;
    }
}
const DONE = Symbol.for("DONE");
const BREAK = Symbol.for("BREAK");
function tokenToArray(token, tokeniser, options) {
    const arr = [];
    for(let i = 0; i < token.value; i++){
        const value = tokensToObject(tokeniser, options);
        if (value === BREAK) {
            if (token.value === Infinity) {
                break;
            }
            throw new Error(`${decodeErrPrefix} got unexpected break to lengthed array`);
        }
        if (value === DONE) {
            throw new Error(`${decodeErrPrefix} found array but not enough entries (got ${i}, expected ${token.value})`);
        }
        arr[i] = value;
    }
    return arr;
}
function tokenToMap(token, tokeniser, options) {
    const useMaps = options.useMaps === true;
    const obj = useMaps ? void 0 : {};
    const m = useMaps ? new Map() : void 0;
    for(let i = 0; i < token.value; i++){
        const key = tokensToObject(tokeniser, options);
        if (key === BREAK) {
            if (token.value === Infinity) {
                break;
            }
            throw new Error(`${decodeErrPrefix} got unexpected break to lengthed map`);
        }
        if (key === DONE) {
            throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no key], expected ${token.value})`);
        }
        if (useMaps !== true && typeof key !== "string") {
            throw new Error(`${decodeErrPrefix} non-string keys not supported (got ${typeof key})`);
        }
        if (options.rejectDuplicateMapKeys === true) {
            if (useMaps && m.has(key) || !useMaps && key in obj) {
                throw new Error(`${decodeErrPrefix} found repeat map key "${key}"`);
            }
        }
        const value = tokensToObject(tokeniser, options);
        if (value === DONE) {
            throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no value], expected ${token.value})`);
        }
        if (useMaps) {
            m.set(key, value);
        } else {
            obj[key] = value;
        }
    }
    return useMaps ? m : obj;
}
function tokensToObject(tokeniser, options) {
    if (tokeniser.done()) {
        return DONE;
    }
    const token = tokeniser.next();
    if (token.type === Type.break) {
        return BREAK;
    }
    if (token.type.terminal) {
        return token.value;
    }
    if (token.type === Type.array) {
        return tokenToArray(token, tokeniser, options);
    }
    if (token.type === Type.map) {
        return tokenToMap(token, tokeniser, options);
    }
    if (token.type === Type.tag) {
        if (options.tags && typeof options.tags[token.value] === "function") {
            const tagged = tokensToObject(tokeniser, options);
            return options.tags[token.value](tagged);
        }
        throw new Error(`${decodeErrPrefix} tag not supported (${token.value})`);
    }
    throw new Error("unsupported");
}
function decodeFirst(data, options) {
    if (!(data instanceof Uint8Array)) {
        throw new Error(`${decodeErrPrefix} data to decode must be a Uint8Array`);
    }
    options = Object.assign({}, defaultDecodeOptions, options);
    const tokeniser = options.tokenizer || new Tokeniser(data, options);
    const decoded = tokensToObject(tokeniser, options);
    if (decoded === DONE) {
        throw new Error(`${decodeErrPrefix} did not find any content to decode`);
    }
    if (decoded === BREAK) {
        throw new Error(`${decodeErrPrefix} got unexpected break`);
    }
    return [
        decoded,
        data.subarray(tokeniser.pos())
    ];
}
function decode4(data, options) {
    const [decoded, remainder] = decodeFirst(data, options);
    if (remainder.length > 0) {
        throw new Error(`${decodeErrPrefix} too many terminals, data makes no sense`);
    }
    return decoded;
}
const empty = new Uint8Array(0);
function toHex2(d) {
    return d.reduce((hex, __byte)=>hex + __byte.toString(16).padStart(2, "0"), "");
}
function fromHex(hex) {
    const hexes = hex.match(/../g);
    return hexes != null ? new Uint8Array(hexes.map((b)=>parseInt(b, 16))) : empty;
}
function equals(aa, bb) {
    if (aa === bb) return true;
    if (aa.byteLength !== bb.byteLength) {
        return false;
    }
    for(let ii = 0; ii < aa.byteLength; ii++){
        if (aa[ii] !== bb[ii]) {
            return false;
        }
    }
    return true;
}
function coerce(o) {
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array") return o;
    if (o instanceof ArrayBuffer) return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) {
        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    }
    throw new Error("Unknown type, must be binary type");
}
function isBinary(o) {
    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);
}
function fromString1(str) {
    return new TextEncoder().encode(str);
}
function toString1(b) {
    return new TextDecoder().decode(b);
}
Object.freeze({
    __proto__: null,
    empty,
    toHex: toHex2,
    fromHex,
    equals,
    coerce,
    isBinary,
    fromString: fromString1,
    toString: toString1
});
var __defProp = Object.defineProperty;
var __publicField = (obj, key, value)=>{
    if (typeof key !== "symbol") key += "";
    if (key in obj) return __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    });
    return obj[key] = value;
};
function base1(ALPHABET, name) {
    if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for(var j = 0; j < BASE_MAP.length; j++){
        BASE_MAP[j] = 255;
    }
    for(var i = 0; i < ALPHABET.length; i++){
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode2(source) {
        if (source instanceof Uint8Array) ;
        else if (ArrayBuffer.isView(source)) {
            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
            source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
            throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
            return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while(pbegin !== pend){
            var carry = source[pbegin];
            var i2 = 0;
            for(var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
                throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
        }
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0){
            it2++;
        }
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2){
            str += ALPHABET.charAt(b58[it2]);
        }
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") {
            throw new TypeError("Expected String");
        }
        if (source.length === 0) {
            return new Uint8Array();
        }
        var psz = 0;
        if (source[psz] === " ") {
            return;
        }
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while(source[psz]){
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
                return;
            }
            var i2 = 0;
            for(var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
                throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
        }
        if (source[psz] === " ") {
            return;
        }
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0){
            it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j2 = zeroes;
        while(it4 !== size){
            vch[j2++] = b256[it4++];
        }
        return vch;
    }
    function decode2(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
            return buffer;
        }
        throw new Error(`Non-${name} character`);
    }
    return {
        encode: encode2,
        decodeUnsafe,
        decode: decode2
    };
}
var src = base1;
var _brrp__multiformats_scope_baseX = src;
class Encoder {
    constructor(name, prefix, baseEncode){
        __publicField(this, "name");
        __publicField(this, "prefix");
        __publicField(this, "baseEncode");
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
    }
    encode(bytes) {
        if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
        } else {
            throw Error("Unknown type, must be binary type");
        }
    }
}
class Decoder {
    constructor(name, prefix, baseDecode){
        __publicField(this, "name");
        __publicField(this, "prefix");
        __publicField(this, "baseDecode");
        __publicField(this, "prefixCodePoint");
        this.name = name;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
        }
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
    }
    decode(text) {
        if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
        } else {
            throw Error("Can only multibase decode strings");
        }
    }
    or(decoder) {
        return or(this, decoder);
    }
}
class ComposedDecoder {
    constructor(decoders){
        __publicField(this, "decoders");
        this.decoders = decoders;
    }
    or(decoder) {
        return or(this, decoder);
    }
    decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder != null) {
            return decoder.decode(input);
        } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
        }
    }
}
function or(left, right) {
    var _a, _b;
    return new ComposedDecoder({
        ...(_a = left.decoders) != null ? _a : {
            [left.prefix]: left
        },
        ...(_b = right.decoders) != null ? _b : {
            [right.prefix]: right
        }
    });
}
class Codec {
    constructor(name, prefix, baseEncode, baseDecode){
        __publicField(this, "name");
        __publicField(this, "prefix");
        __publicField(this, "baseEncode");
        __publicField(this, "baseDecode");
        __publicField(this, "encoder");
        __publicField(this, "decoder");
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder(name, prefix, baseEncode);
        this.decoder = new Decoder(name, prefix, baseDecode);
    }
    encode(input) {
        return this.encoder.encode(input);
    }
    decode(input) {
        return this.decoder.decode(input);
    }
}
function from({ name, prefix, encode: encode2, decode: decode2 }) {
    return new Codec(name, prefix, encode2, decode2);
}
function baseX({ name, prefix, alphabet }) {
    const { encode: encode2, decode: decode2 } = _brrp__multiformats_scope_baseX(alphabet, name);
    return from({
        prefix,
        name,
        encode: encode2,
        decode: (text)=>coerce(decode2(text))
    });
}
function decode5(string, alphabet, bitsPerChar, name) {
    const codes = {};
    for(let i = 0; i < alphabet.length; ++i){
        codes[alphabet[i]] = i;
    }
    let end = string.length;
    while(string[end - 1] === "="){
        --end;
    }
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer = 0;
    let written = 0;
    for(let i = 0; i < end; ++i){
        const value = codes[string[i]];
        if (value === void 0) {
            throw new SyntaxError(`Non-${name} character`);
        }
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer >> bits;
        }
    }
    if (bits >= bitsPerChar || (255 & buffer << 8 - bits) !== 0) {
        throw new SyntaxError("Unexpected end of data");
    }
    return out;
}
function encode4(data, alphabet, bitsPerChar) {
    const pad = alphabet[alphabet.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer = 0;
    for(let i = 0; i < data.length; ++i){
        buffer = buffer << 8 | data[i];
        bits += 8;
        while(bits > bitsPerChar){
            bits -= bitsPerChar;
            out += alphabet[mask & buffer >> bits];
        }
    }
    if (bits !== 0) {
        out += alphabet[mask & buffer << bitsPerChar - bits];
    }
    if (pad) {
        while((out.length * bitsPerChar & 7) !== 0){
            out += "=";
        }
    }
    return out;
}
function rfc4648({ name, prefix, bitsPerChar, alphabet }) {
    return from({
        prefix,
        name,
        encode (input) {
            return encode4(input, alphabet, bitsPerChar);
        },
        decode (input) {
            return decode5(input, alphabet, bitsPerChar, name);
        }
    });
}
const base32 = rfc4648({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5
});
const base32upper = rfc4648({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5
});
const base32pad = rfc4648({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5
});
const base32padupper = rfc4648({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5
});
const base32hex = rfc4648({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5
});
const base32hexupper = rfc4648({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5
});
const base32hexpad = rfc4648({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5
});
const base32hexpadupper = rfc4648({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5
});
const base32z = rfc4648({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5
});
Object.freeze({
    __proto__: null,
    base32,
    base32upper,
    base32pad,
    base32padupper,
    base32hex,
    base32hexupper,
    base32hexpad,
    base32hexpadupper,
    base32z
});
const base58btc = baseX({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
const base58flickr = baseX({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});
Object.freeze({
    __proto__: null,
    base58btc,
    base58flickr
});
var __defProp1 = Object.defineProperty;
var __publicField1 = (obj, key, value)=>{
    if (typeof key !== "symbol") key += "";
    if (key in obj) return __defProp1(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    });
    return obj[key] = value;
};
var encode_1 = encode5;
var MSB = 128, REST1 = 127, MSBALL = ~REST1, INT = Math.pow(2, 31);
function encode5(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= INT){
        out[offset++] = num & 255 | MSB;
        num /= 128;
    }
    while(num & MSBALL){
        out[offset++] = num & 255 | MSB;
        num >>>= 7;
    }
    out[offset] = num | 0;
    encode5.bytes = offset - oldOffset + 1;
    return out;
}
var decode6 = read;
var MSB$1 = 128, REST$1 = 127;
function read(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l) {
            read.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
        shift += 7;
    }while (b >= MSB$1)
    read.bytes = counter - offset;
    return res;
}
var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
    return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
    encode: encode_1,
    decode: decode6,
    encodingLength: length
};
var _brrp_varint = varint;
function decode$1(data, offset = 0) {
    const code = _brrp_varint.decode(data, offset);
    return [
        code,
        _brrp_varint.decode.bytes
    ];
}
function encodeTo(__int, target, offset = 0) {
    _brrp_varint.encode(__int, target, offset);
    return target;
}
function encodingLength(__int) {
    return _brrp_varint.encodingLength(__int);
}
Object.freeze({
    __proto__: null,
    decode: decode$1,
    encodeTo,
    encodingLength
});
function create(code, digest2) {
    const size = digest2.byteLength;
    const sizeOffset = encodingLength(code);
    const digestOffset = sizeOffset + encodingLength(size);
    const bytes = new Uint8Array(digestOffset + size);
    encodeTo(code, bytes, 0);
    encodeTo(size, bytes, sizeOffset);
    bytes.set(digest2, digestOffset);
    return new Digest(code, size, digest2, bytes);
}
function decode$2(multihash) {
    const bytes = coerce(multihash);
    const [code, sizeOffset] = decode$1(bytes);
    const [size, digestOffset] = decode$1(bytes.subarray(sizeOffset));
    const digest2 = bytes.subarray(sizeOffset + digestOffset);
    if (digest2.byteLength !== size) {
        throw new Error("Incorrect length");
    }
    return new Digest(code, size, digest2, bytes);
}
function equals1(a, b) {
    if (a === b) {
        return true;
    } else {
        const data = b;
        return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equals(a.bytes, data.bytes);
    }
}
class Digest {
    constructor(code, size, digest2, bytes){
        __publicField1(this, "code");
        __publicField1(this, "size");
        __publicField1(this, "digest");
        __publicField1(this, "bytes");
        this.code = code;
        this.size = size;
        this.digest = digest2;
        this.bytes = bytes;
    }
}
Object.freeze({
    __proto__: null,
    create,
    decode: decode$2,
    equals: equals1,
    Digest
});
var __defProp2 = Object.defineProperty;
var __publicField2 = (obj, key, value)=>{
    if (typeof key !== "symbol") key += "";
    if (key in obj) return __defProp2(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    });
    return obj[key] = value;
};
var _a;
function format(link, base) {
    const { bytes, version } = link;
    switch(version){
        case 0:
            return toStringV0(bytes, baseCache(link), base != null ? base : base58btc.encoder);
        default:
            return toStringV1(bytes, baseCache(link), base != null ? base : base32.encoder);
    }
}
const cache = new WeakMap();
function baseCache(cid) {
    const baseCache2 = cache.get(cid);
    if (baseCache2 == null) {
        const baseCache3 = new Map();
        cache.set(cid, baseCache3);
        return baseCache3;
    }
    return baseCache2;
}
class CID {
    constructor(version, code, multihash, bytes){
        __publicField2(this, "code");
        __publicField2(this, "version");
        __publicField2(this, "multihash");
        __publicField2(this, "bytes");
        __publicField2(this, "/");
        __publicField2(this, _a, "CID");
        this.code = code;
        this.version = version;
        this.multihash = multihash;
        this.bytes = bytes;
        this["/"] = bytes;
    }
    get asCID() {
        return this;
    }
    get byteOffset() {
        return this.bytes.byteOffset;
    }
    get byteLength() {
        return this.bytes.byteLength;
    }
    toV0() {
        switch(this.version){
            case 0:
                {
                    return this;
                }
            case 1:
                {
                    const { code, multihash } = this;
                    if (code !== DAG_PB_CODE) {
                        throw new Error("Cannot convert a non dag-pb CID to CIDv0");
                    }
                    if (multihash.code !== SHA_256_CODE) {
                        throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
                    }
                    return CID.createV0(multihash);
                }
            default:
                {
                    throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
                }
        }
    }
    toV1() {
        switch(this.version){
            case 0:
                {
                    const { code, digest: digest$1 } = this.multihash;
                    const multihash = create(code, digest$1);
                    return CID.createV1(this.code, multihash);
                }
            case 1:
                {
                    return this;
                }
            default:
                {
                    throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);
                }
        }
    }
    equals(other) {
        return CID.equals(this, other);
    }
    static equals(self1, other) {
        const unknown = other;
        return unknown != null && self1.code === unknown.code && self1.version === unknown.version && equals1(self1.multihash, unknown.multihash);
    }
    toString(base) {
        return format(this, base);
    }
    toJSON() {
        return {
            "/": format(this)
        };
    }
    link() {
        return this;
    }
    [(_a = Symbol.toStringTag, Symbol.for("nodejs.util.inspect.custom"))]() {
        return `CID(${this.toString()})`;
    }
    static asCID(input) {
        if (input == null) {
            return null;
        }
        const value = input;
        if (value instanceof CID) {
            return value;
        } else if (value["/"] != null && value["/"] === value.bytes || value.asCID === value) {
            const { version, code, multihash, bytes } = value;
            return new CID(version, code, multihash, bytes != null ? bytes : encodeCID(version, code, multihash.bytes));
        } else if (value[cidSymbol] === true) {
            const { version, multihash, code } = value;
            const digest$1 = decode$2(multihash);
            return CID.create(version, code, digest$1);
        } else {
            return null;
        }
    }
    static create(version, code, digest) {
        if (typeof code !== "number") {
            throw new Error("String codecs are no longer supported");
        }
        if (!(digest.bytes instanceof Uint8Array)) {
            throw new Error("Invalid digest");
        }
        switch(version){
            case 0:
                {
                    if (code !== DAG_PB_CODE) {
                        throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
                    } else {
                        return new CID(version, code, digest, digest.bytes);
                    }
                }
            case 1:
                {
                    const bytes = encodeCID(version, code, digest.bytes);
                    return new CID(version, code, digest, bytes);
                }
            default:
                {
                    throw new Error("Invalid version");
                }
        }
    }
    static createV0(digest) {
        return CID.create(0, DAG_PB_CODE, digest);
    }
    static createV1(code, digest) {
        return CID.create(1, code, digest);
    }
    static decode(bytes) {
        const [cid, remainder] = CID.decodeFirst(bytes);
        if (remainder.length !== 0) {
            throw new Error("Incorrect length");
        }
        return cid;
    }
    static decodeFirst(bytes) {
        const specs = CID.inspectBytes(bytes);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
        }
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest$1 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);
        return [
            cid,
            bytes.subarray(specs.size)
        ];
    }
    static inspectBytes(initialBytes) {
        let offset = 0;
        const next = ()=>{
            const [i, length] = decode$1(initialBytes.subarray(offset));
            offset += length;
            return i;
        };
        let version = next();
        let codec = DAG_PB_CODE;
        if (version === 18) {
            version = 0;
            offset = 0;
        } else {
            codec = next();
        }
        if (version !== 0 && version !== 1) {
            throw new RangeError(`Invalid CID version ${version}`);
        }
        const prefixSize = offset;
        const multihashCode = next();
        const digestSize = next();
        const size = offset + digestSize;
        const multihashSize = size - prefixSize;
        return {
            version,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
        };
    }
    static parse(source, base) {
        const [prefix, bytes] = parseCIDtoBytes(source, base);
        const cid = CID.decode(bytes);
        if (cid.version === 0 && source[0] !== "Q") {
            throw Error("Version 0 CID string must not include multibase prefix");
        }
        baseCache(cid).set(prefix, source);
        return cid;
    }
}
function parseCIDtoBytes(source, base) {
    switch(source[0]){
        case "Q":
            {
                const decoder = base != null ? base : base58btc;
                return [
                    base58btc.prefix,
                    decoder.decode(`${base58btc.prefix}${source}`)
                ];
            }
        case base58btc.prefix:
            {
                const decoder = base != null ? base : base58btc;
                return [
                    base58btc.prefix,
                    decoder.decode(source)
                ];
            }
        case base32.prefix:
            {
                const decoder = base != null ? base : base32;
                return [
                    base32.prefix,
                    decoder.decode(source)
                ];
            }
        default:
            {
                if (base == null) {
                    throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
                }
                return [
                    source[0],
                    base.decode(source)
                ];
            }
    }
}
function toStringV0(bytes, cache2, base) {
    const { prefix } = base;
    if (prefix !== base58btc.prefix) {
        throw Error(`Cannot string encode V0 in ${base.name} encoding`);
    }
    const cid = cache2.get(prefix);
    if (cid == null) {
        const cid2 = base.encode(bytes).slice(1);
        cache2.set(prefix, cid2);
        return cid2;
    } else {
        return cid;
    }
}
function toStringV1(bytes, cache2, base) {
    const { prefix } = base;
    const cid = cache2.get(prefix);
    if (cid == null) {
        const cid2 = base.encode(bytes);
        cache2.set(prefix, cid2);
        return cid2;
    } else {
        return cid;
    }
}
const DAG_PB_CODE = 112;
const SHA_256_CODE = 18;
function encodeCID(version, code, multihash) {
    const codeOffset = encodingLength(version);
    const hashOffset = codeOffset + encodingLength(code);
    const bytes = new Uint8Array(hashOffset + multihash.byteLength);
    encodeTo(version, bytes, 0);
    encodeTo(code, bytes, codeOffset);
    bytes.set(multihash, hashOffset);
    return bytes;
}
const cidSymbol = Symbol.for("@ipld/js-cid/CID");
const CID_CBOR_TAG = 42;
function toByteView(buf) {
    if (buf instanceof ArrayBuffer) {
        return new Uint8Array(buf, 0, buf.byteLength);
    }
    return buf;
}
function cidEncoder(obj) {
    if (obj.asCID !== obj && obj["/"] !== obj.bytes) {
        return null;
    }
    const cid2 = CID.asCID(obj);
    if (!cid2) {
        return null;
    }
    const bytes = new Uint8Array(cid2.bytes.byteLength + 1);
    bytes.set(cid2.bytes, 1);
    return [
        new Token(Type.tag, 42),
        new Token(Type.bytes, bytes)
    ];
}
function undefinedEncoder() {
    throw new Error("`undefined` is not supported by the IPLD Data Model and cannot be encoded");
}
function numberEncoder(num) {
    if (Number.isNaN(num)) {
        throw new Error("`NaN` is not supported by the IPLD Data Model and cannot be encoded");
    }
    if (num === Infinity || num === -Infinity) {
        throw new Error("`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded");
    }
    return null;
}
const _encodeOptions = {
    float64: true,
    typeEncoders: {
        Object: cidEncoder,
        undefined: undefinedEncoder,
        number: numberEncoder
    }
};
({
    ..._encodeOptions,
    typeEncoders: {
        ..._encodeOptions.typeEncoders
    }
});
function cidDecoder(bytes) {
    if (bytes[0] !== 0) {
        throw new Error("Invalid CID for CBOR tag 42; expected leading 0x00");
    }
    return CID.decode(bytes.subarray(1));
}
const _decodeOptions = {
    allowIndefinite: false,
    coerceUndefinedToNull: true,
    allowNaN: false,
    allowInfinity: false,
    allowBigInt: true,
    strict: true,
    useMaps: false,
    rejectDuplicateMapKeys: true,
    tags: []
};
_decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;
({
    ..._decodeOptions,
    tags: _decodeOptions.tags.slice()
});
const encode6 = (node)=>encode3(node, _encodeOptions);
const decode7 = (data)=>decode4(toByteView(data), _decodeOptions);
var encode_11 = encode7;
var MSB1 = 128, REST2 = 127, MSBALL1 = ~REST2, INT1 = Math.pow(2, 31);
function encode7(num, out, offset) {
    if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
        encode7.bytes = 0;
        throw new RangeError("Could not encode varint");
    }
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= INT1){
        out[offset++] = num & 255 | MSB1;
        num /= 128;
    }
    while(num & MSBALL1){
        out[offset++] = num & 255 | MSB1;
        num >>>= 7;
    }
    out[offset] = num | 0;
    encode7.bytes = offset - oldOffset + 1;
    return out;
}
var decode8 = read1;
var MSB$11 = 128, REST$11 = 127;
function read1(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l || shift > 49) {
            read1.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST$11) << shift : (b & REST$11) * Math.pow(2, shift);
        shift += 7;
    }while (b >= MSB$11)
    read1.bytes = counter - offset;
    return res;
}
var N11 = Math.pow(2, 7);
var N21 = Math.pow(2, 14);
var N31 = Math.pow(2, 21);
var N41 = Math.pow(2, 28);
var N51 = Math.pow(2, 35);
var N61 = Math.pow(2, 42);
var N71 = Math.pow(2, 49);
var N81 = Math.pow(2, 56);
var N91 = Math.pow(2, 63);
var length1 = function(value) {
    return value < N11 ? 1 : value < N21 ? 2 : value < N31 ? 3 : value < N41 ? 4 : value < N51 ? 5 : value < N61 ? 6 : value < N71 ? 7 : value < N81 ? 8 : value < N91 ? 9 : 10;
};
var varint1 = {
    encode: encode_11,
    decode: decode8,
    encodingLength: length1
};
varint1.encode;
const CIDV0_BYTES = {
    SHA2_256: 18,
    LENGTH: 32,
    DAG_PB: 112
};
const V2_HEADER_LENGTH = 16 + 8 + 8 + 8;
function decodeVarint(bytes, seeker) {
    if (!bytes.length) {
        throw new Error("Unexpected end of data");
    }
    const i = varint1.decode(bytes);
    seeker.seek(varint1.decode.bytes);
    return i;
}
function decodeV2Header(bytes) {
    const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    let offset = 0;
    const header = {
        version: 2,
        characteristics: [
            dv.getBigUint64(offset, true),
            dv.getBigUint64(offset += 8, true)
        ],
        dataOffset: Number(dv.getBigUint64(offset += 8, true)),
        dataSize: Number(dv.getBigUint64(offset += 8, true)),
        indexOffset: Number(dv.getBigUint64(offset += 8, true))
    };
    return header;
}
function getMultihashLength(bytes) {
    varint1.decode(bytes);
    const codeLength = varint1.decode.bytes;
    const length = varint1.decode(bytes.subarray(varint1.decode.bytes));
    const lengthLength = varint1.decode.bytes;
    const mhLength = codeLength + lengthLength + length;
    return mhLength;
}
const Kinds = {
    Null: (obj)=>obj === null ? obj : void 0,
    Int: (obj)=>Number.isInteger(obj) ? obj : void 0,
    Float: (obj)=>typeof obj === "number" && Number.isFinite(obj) ? obj : void 0,
    String: (obj)=>typeof obj === "string" ? obj : void 0,
    Bool: (obj)=>typeof obj === "boolean" ? obj : void 0,
    Bytes: (obj)=>obj instanceof Uint8Array ? obj : void 0,
    Link: (obj)=>obj !== null && typeof obj === "object" && obj.asCID === obj ? obj : void 0,
    List: (obj)=>Array.isArray(obj) ? obj : void 0,
    Map: (obj)=>obj !== null && typeof obj === "object" && obj.asCID !== obj && !Array.isArray(obj) && !(obj instanceof Uint8Array) ? obj : void 0
};
const Types = {
    "CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)": Kinds.Link,
    "CarV1HeaderOrV2Pragma > roots (anon)": (obj)=>{
        if (Kinds.List(obj) === void 0) {
            return void 0;
        }
        for(let i = 0; i < obj.length; i++){
            let v = obj[i];
            v = Types["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v);
            if (v === void 0) {
                return void 0;
            }
            if (v !== obj[i]) {
                const ret = obj.slice(0, i);
                for(let j = i; j < obj.length; j++){
                    let v2 = obj[j];
                    v2 = Types["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v2);
                    if (v2 === void 0) {
                        return void 0;
                    }
                    ret.push(v2);
                }
                return ret;
            }
        }
        return obj;
    },
    Int: Kinds.Int,
    CarV1HeaderOrV2Pragma: (obj)=>{
        if (Kinds.Map(obj) === void 0) {
            return void 0;
        }
        const entries = Object.entries(obj);
        let ret = obj;
        let requiredCount = 1;
        for(let i = 0; i < entries.length; i++){
            const [key, value] = entries[i];
            switch(key){
                case "roots":
                    {
                        const v = Types["CarV1HeaderOrV2Pragma > roots (anon)"](obj[key]);
                        if (v === void 0) {
                            return void 0;
                        }
                        if (v !== value || ret !== obj) {
                            if (ret === obj) {
                                ret = {};
                                for(let j = 0; j < i; j++){
                                    ret[entries[j][0]] = entries[j][1];
                                }
                            }
                            ret.roots = v;
                        }
                    }
                    break;
                case "version":
                    {
                        requiredCount--;
                        const v = Types.Int(obj[key]);
                        if (v === void 0) {
                            return void 0;
                        }
                        if (v !== value || ret !== obj) {
                            if (ret === obj) {
                                ret = {};
                                for(let j = 0; j < i; j++){
                                    ret[entries[j][0]] = entries[j][1];
                                }
                            }
                            ret.version = v;
                        }
                    }
                    break;
                default:
                    return void 0;
            }
        }
        if (requiredCount > 0) {
            return void 0;
        }
        return ret;
    }
};
const Reprs = {
    "CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)": Kinds.Link,
    "CarV1HeaderOrV2Pragma > roots (anon)": (obj)=>{
        if (Kinds.List(obj) === void 0) {
            return void 0;
        }
        for(let i = 0; i < obj.length; i++){
            let v = obj[i];
            v = Reprs["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v);
            if (v === void 0) {
                return void 0;
            }
            if (v !== obj[i]) {
                const ret = obj.slice(0, i);
                for(let j = i; j < obj.length; j++){
                    let v2 = obj[j];
                    v2 = Reprs["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v2);
                    if (v2 === void 0) {
                        return void 0;
                    }
                    ret.push(v2);
                }
                return ret;
            }
        }
        return obj;
    },
    Int: Kinds.Int,
    CarV1HeaderOrV2Pragma: (obj)=>{
        if (Kinds.Map(obj) === void 0) {
            return void 0;
        }
        const entries = Object.entries(obj);
        let ret = obj;
        let requiredCount = 1;
        for(let i = 0; i < entries.length; i++){
            const [key, value] = entries[i];
            switch(key){
                case "roots":
                    {
                        const v = Reprs["CarV1HeaderOrV2Pragma > roots (anon)"](value);
                        if (v === void 0) {
                            return void 0;
                        }
                        if (v !== value || ret !== obj) {
                            if (ret === obj) {
                                ret = {};
                                for(let j = 0; j < i; j++){
                                    ret[entries[j][0]] = entries[j][1];
                                }
                            }
                            ret.roots = v;
                        }
                    }
                    break;
                case "version":
                    {
                        requiredCount--;
                        const v = Reprs.Int(value);
                        if (v === void 0) {
                            return void 0;
                        }
                        if (v !== value || ret !== obj) {
                            if (ret === obj) {
                                ret = {};
                                for(let j = 0; j < i; j++){
                                    ret[entries[j][0]] = entries[j][1];
                                }
                            }
                            ret.version = v;
                        }
                    }
                    break;
                default:
                    return void 0;
            }
        }
        if (requiredCount > 0) {
            return void 0;
        }
        return ret;
    }
};
const CarV1HeaderOrV2Pragma = {
    toTyped: Types.CarV1HeaderOrV2Pragma,
    toRepresentation: Reprs.CarV1HeaderOrV2Pragma
};
const cborEncoders1 = makeCborEncoders();
const defaultEncodeOptions1 = {
    float64: false,
    quickEncodeToken
};
function tokensToLength(tokens, encoders = cborEncoders1, options = defaultEncodeOptions1) {
    if (Array.isArray(tokens)) {
        let len = 0;
        for (const token of tokens){
            len += tokensToLength(token, encoders, options);
        }
        return len;
    } else {
        const encoder = encoders[tokens.type.major];
        if (encoder.encodedSize === void 0 || typeof encoder.encodedSize !== "function") {
            throw new Error(`Encoder for ${tokens.type.name} does not have an encodedSize()`);
        }
        return encoder.encodedSize(tokens, options);
    }
}
async function readHeader(reader, strictVersion) {
    const length = decodeVarint(await reader.upTo(8), reader);
    if (length === 0) {
        throw new Error("Invalid CAR header (zero length)");
    }
    const header = await reader.exactly(length, true);
    const block = decode7(header);
    if (CarV1HeaderOrV2Pragma.toTyped(block) === void 0) {
        throw new Error("Invalid CAR header format");
    }
    if (block.version !== 1 && block.version !== 2 || strictVersion !== void 0 && block.version !== strictVersion) {
        throw new Error(`Invalid CAR version: ${block.version}${strictVersion !== void 0 ? ` (expected ${strictVersion})` : ""}`);
    }
    if (block.version === 1) {
        if (!Array.isArray(block.roots)) {
            throw new Error("Invalid CAR header format");
        }
        return block;
    }
    if (block.roots !== void 0) {
        throw new Error("Invalid CAR header format");
    }
    const v2Header = decodeV2Header(await reader.exactly(V2_HEADER_LENGTH, true));
    reader.seek(v2Header.dataOffset - reader.pos);
    const v1Header = await readHeader(reader, 1);
    return Object.assign(v1Header, v2Header);
}
async function readCid(reader) {
    const first = await reader.exactly(2, false);
    if (first[0] === CIDV0_BYTES.SHA2_256 && first[1] === CIDV0_BYTES.LENGTH) {
        const bytes2 = await reader.exactly(34, true);
        const multihash2 = decode$2(bytes2);
        return CID.create(0, CIDV0_BYTES.DAG_PB, multihash2);
    }
    const version = decodeVarint(await reader.upTo(8), reader);
    if (version !== 1) {
        throw new Error(`Unexpected CID version (${version})`);
    }
    const codec = decodeVarint(await reader.upTo(8), reader);
    const bytes = await reader.exactly(getMultihashLength(await reader.upTo(8)), true);
    const multihash = decode$2(bytes);
    return CID.create(version, codec, multihash);
}
async function readBlockHead(reader) {
    const start = reader.pos;
    let length = decodeVarint(await reader.upTo(8), reader);
    if (length === 0) {
        throw new Error("Invalid CAR section (zero length)");
    }
    length += reader.pos - start;
    const cid2 = await readCid(reader);
    const blockLength = length - Number(reader.pos - start);
    return {
        cid: cid2,
        length,
        blockLength
    };
}
async function readBlock(reader) {
    const { cid: cid2, blockLength } = await readBlockHead(reader);
    const bytes = await reader.exactly(blockLength, true);
    return {
        bytes,
        cid: cid2
    };
}
async function readBlockIndex(reader) {
    const offset = reader.pos;
    const { cid: cid2, length, blockLength } = await readBlockHead(reader);
    const index = {
        cid: cid2,
        length,
        blockLength,
        offset,
        blockOffset: reader.pos
    };
    reader.seek(index.blockLength);
    return index;
}
function createDecoder(reader) {
    const headerPromise = (async ()=>{
        const header = await readHeader(reader);
        if (header.version === 2) {
            const v1length = reader.pos - header.dataOffset;
            reader = limitReader(reader, header.dataSize - v1length);
        }
        return header;
    })();
    return {
        header: ()=>headerPromise,
        async *blocks () {
            await headerPromise;
            while((await reader.upTo(8)).length > 0){
                yield await readBlock(reader);
            }
        },
        async *blocksIndex () {
            await headerPromise;
            while((await reader.upTo(8)).length > 0){
                yield await readBlockIndex(reader);
            }
        }
    };
}
function bytesReader(bytes) {
    let pos = 0;
    return {
        async upTo (length) {
            const out = bytes.subarray(pos, pos + Math.min(length, bytes.length - pos));
            return out;
        },
        async exactly (length, seek = false) {
            if (length > bytes.length - pos) {
                throw new Error("Unexpected end of data");
            }
            const out = bytes.subarray(pos, pos + length);
            if (seek) {
                pos += length;
            }
            return out;
        },
        seek (length) {
            pos += length;
        },
        get pos () {
            return pos;
        }
    };
}
function chunkReader(readChunk) {
    let pos = 0;
    let have = 0;
    let offset = 0;
    let currentChunk = new Uint8Array(0);
    const read = async (length)=>{
        have = currentChunk.length - offset;
        const bufa = [
            currentChunk.subarray(offset)
        ];
        while(have < length){
            const chunk = await readChunk();
            if (chunk == null) {
                break;
            }
            if (have < 0) {
                if (chunk.length > have) {
                    bufa.push(chunk.subarray(-have));
                }
            } else {
                bufa.push(chunk);
            }
            have += chunk.length;
        }
        currentChunk = new Uint8Array(bufa.reduce((p, c)=>p + c.length, 0));
        let off = 0;
        for (const b of bufa){
            currentChunk.set(b, off);
            off += b.length;
        }
        offset = 0;
    };
    return {
        async upTo (length) {
            if (currentChunk.length - offset < length) {
                await read(length);
            }
            return currentChunk.subarray(offset, offset + Math.min(currentChunk.length - offset, length));
        },
        async exactly (length, seek = false) {
            if (currentChunk.length - offset < length) {
                await read(length);
            }
            if (currentChunk.length - offset < length) {
                throw new Error("Unexpected end of data");
            }
            const out = currentChunk.subarray(offset, offset + length);
            if (seek) {
                pos += length;
                offset += length;
            }
            return out;
        },
        seek (length) {
            pos += length;
            offset += length;
        },
        get pos () {
            return pos;
        }
    };
}
function asyncIterableReader(asyncIterable) {
    const iterator = asyncIterable[Symbol.asyncIterator]();
    async function readChunk() {
        const next = await iterator.next();
        if (next.done) {
            return null;
        }
        return next.value;
    }
    return chunkReader(readChunk);
}
function limitReader(reader, byteLimit) {
    let bytesRead = 0;
    return {
        async upTo (length) {
            let bytes = await reader.upTo(length);
            if (bytes.length + bytesRead > byteLimit) {
                bytes = bytes.subarray(0, byteLimit - bytesRead);
            }
            return bytes;
        },
        async exactly (length, seek = false) {
            const bytes = await reader.exactly(length, seek);
            if (bytes.length + bytesRead > byteLimit) {
                throw new Error("Unexpected end of data");
            }
            if (seek) {
                bytesRead += length;
            }
            return bytes;
        },
        seek (length) {
            bytesRead += length;
            reader.seek(length);
        },
        get pos () {
            return reader.pos;
        }
    };
}
class CarBufferWriter {
    constructor(bytes, headerSize){
        this.bytes = bytes;
        this.byteOffset = headerSize;
        this.roots = [];
        this.headerSize = headerSize;
    }
    addRoot(root, options) {
        addRoot(this, root, options);
        return this;
    }
    write(block) {
        addBlock(this, block);
        return this;
    }
    close(options) {
        return close(this, options);
    }
}
const addRoot = (writer, root, options = {})=>{
    const { resize = false } = options;
    const { bytes, headerSize, byteOffset, roots } = writer;
    writer.roots.push(root);
    const size = headerLength(writer);
    if (size > headerSize) {
        if (size - headerSize + byteOffset < bytes.byteLength) {
            if (resize) {
                resizeHeader(writer, size);
            } else {
                roots.pop();
                throw new RangeError(`Header of size ${headerSize} has no capacity for new root ${root}.
  However there is a space in the buffer and you could call addRoot(root, { resize: root }) to resize header to make a space for this root.`);
            }
        } else {
            roots.pop();
            throw new RangeError(`Buffer has no capacity for a new root ${root}`);
        }
    }
};
const blockLength = ({ cid, bytes })=>{
    const size = cid.bytes.byteLength + bytes.byteLength;
    return varint1.encodingLength(size) + size;
};
const addBlock = (writer, { cid, bytes })=>{
    const byteLength = cid.bytes.byteLength + bytes.byteLength;
    const size = varint1.encode(byteLength);
    if (writer.byteOffset + size.length + byteLength > writer.bytes.byteLength) {
        throw new RangeError("Buffer has no capacity for this block");
    } else {
        writeBytes(writer, size);
        writeBytes(writer, cid.bytes);
        writeBytes(writer, bytes);
    }
};
const close = (writer, options = {})=>{
    const { resize = false } = options;
    const { roots, bytes, byteOffset, headerSize } = writer;
    const headerBytes = encode6({
        version: 1,
        roots
    });
    const varintBytes = varint1.encode(headerBytes.length);
    const size = varintBytes.length + headerBytes.byteLength;
    const offset = headerSize - size;
    if (offset === 0) {
        writeHeader(writer, varintBytes, headerBytes);
        return bytes.subarray(0, byteOffset);
    } else if (resize) {
        resizeHeader(writer, size);
        writeHeader(writer, varintBytes, headerBytes);
        return bytes.subarray(0, writer.byteOffset);
    } else {
        throw new RangeError(`Header size was overestimated.
You can use close({ resize: true }) to resize header`);
    }
};
const resizeHeader = (writer, byteLength)=>{
    const { bytes, headerSize } = writer;
    bytes.set(bytes.subarray(headerSize, writer.byteOffset), byteLength);
    writer.byteOffset += byteLength - headerSize;
    writer.headerSize = byteLength;
};
const writeBytes = (writer, bytes)=>{
    writer.bytes.set(bytes, writer.byteOffset);
    writer.byteOffset += bytes.length;
};
const writeHeader = ({ bytes }, varint3, header)=>{
    bytes.set(varint3);
    bytes.set(header, varint3.length);
};
const headerPreludeTokens = [
    new Token(Type.map, 2),
    new Token(Type.string, "version"),
    new Token(Type.uint, 1),
    new Token(Type.string, "roots")
];
const CID_TAG = new Token(Type.tag, 42);
const calculateHeaderLength = (rootLengths)=>{
    const tokens = [
        ...headerPreludeTokens
    ];
    tokens.push(new Token(Type.array, rootLengths.length));
    for (const rootLength of rootLengths){
        tokens.push(CID_TAG);
        tokens.push(new Token(Type.bytes, {
            length: rootLength + 1
        }));
    }
    const length2 = tokensToLength(tokens);
    return varint1.encodingLength(length2) + length2;
};
const headerLength = ({ roots })=>calculateHeaderLength(roots.map((cid)=>cid.bytes.byteLength));
const estimateHeaderLength = (rootCount, rootByteLength = 36)=>calculateHeaderLength(new Array(rootCount).fill(rootByteLength));
const createWriter = (buffer, options = {})=>{
    const { roots = [], byteOffset = 0, byteLength = buffer.byteLength, headerSize = headerLength({
        roots
    }) } = options;
    const bytes = new Uint8Array(buffer, byteOffset, byteLength);
    const writer = new CarBufferWriter(bytes, headerSize);
    for (const root of roots){
        writer.addRoot(root);
    }
    return writer;
};
Object.freeze({
    __proto__: null,
    addRoot,
    blockLength,
    addBlock,
    close,
    resizeHeader,
    calculateHeaderLength,
    headerLength,
    estimateHeaderLength,
    createWriter
});
class CarIndexer {
    constructor(version, roots, iterator){
        this._version = version;
        this._roots = roots;
        this._iterator = iterator;
    }
    get version() {
        return this._version;
    }
    async getRoots() {
        return this._roots;
    }
    [Symbol.asyncIterator]() {
        return this._iterator;
    }
    static async fromBytes(bytes) {
        if (!(bytes instanceof Uint8Array)) {
            throw new TypeError("fromBytes() requires a Uint8Array");
        }
        return decodeIndexerComplete(bytesReader(bytes));
    }
    static async fromIterable(asyncIterable) {
        if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
            throw new TypeError("fromIterable() requires an async iterable");
        }
        return decodeIndexerComplete(asyncIterableReader(asyncIterable));
    }
}
class CarIteratorBase {
    constructor(version, roots, iterable){
        this._version = version;
        this._roots = roots;
        this._iterable = iterable;
        this._decoded = false;
    }
    get version() {
        return this._version;
    }
    async getRoots() {
        return this._roots;
    }
}
class CarBlockIterator extends CarIteratorBase {
    [Symbol.asyncIterator]() {
        if (this._decoded) {
            throw new Error("Cannot decode more than once");
        }
        if (!this._iterable) {
            throw new Error("Block iterable not found");
        }
        this._decoded = true;
        return this._iterable[Symbol.asyncIterator]();
    }
    static async fromBytes(bytes) {
        const { version, roots, iterator } = await fromBytes(bytes);
        return new CarBlockIterator(version, roots, iterator);
    }
    static async fromIterable(asyncIterable) {
        const { version, roots, iterator } = await fromIterable(asyncIterable);
        return new CarBlockIterator(version, roots, iterator);
    }
}
class CarCIDIterator extends CarIteratorBase {
    [Symbol.asyncIterator]() {
        if (this._decoded) {
            throw new Error("Cannot decode more than once");
        }
        if (!this._iterable) {
            throw new Error("Block iterable not found");
        }
        this._decoded = true;
        const iterable = this._iterable[Symbol.asyncIterator]();
        return {
            async next () {
                const next = await iterable.next();
                if (next.done) {
                    return next;
                }
                return {
                    done: false,
                    value: next.value.cid
                };
            }
        };
    }
    static async fromBytes(bytes) {
        const { version, roots, iterator } = await fromBytes(bytes);
        return new CarCIDIterator(version, roots, iterator);
    }
    static async fromIterable(asyncIterable) {
        const { version, roots, iterator } = await fromIterable(asyncIterable);
        return new CarCIDIterator(version, roots, iterator);
    }
}
async function fromBytes(bytes) {
    if (!(bytes instanceof Uint8Array)) {
        throw new TypeError("fromBytes() requires a Uint8Array");
    }
    return decodeIterator(bytesReader(bytes));
}
async function fromIterable(asyncIterable) {
    if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
        throw new TypeError("fromIterable() requires an async iterable");
    }
    return decodeIterator(asyncIterableReader(asyncIterable));
}
async function decodeIterator(reader) {
    const decoder2 = createDecoder(reader);
    const { version, roots } = await decoder2.header();
    return {
        version,
        roots,
        iterator: decoder2.blocks()
    };
}
class CarWriterOut {
    constructor(iterator){
        this._iterator = iterator;
    }
    [Symbol.asyncIterator]() {
        if (this._iterating) {
            throw new Error("Multiple iterator not supported");
        }
        this._iterating = true;
        return this._iterator;
    }
}
const empty1 = new Uint8Array(0);
const toHex3 = (d)=>d.reduce((hex, __byte)=>hex + __byte.toString(16).padStart(2, "0"), "");
const fromHex1 = (hex)=>{
    const hexes = hex.match(/../g);
    return hexes ? new Uint8Array(hexes.map((b)=>parseInt(b, 16))) : empty1;
};
const equals2 = (aa, bb)=>{
    if (aa === bb) return true;
    if (aa.byteLength !== bb.byteLength) {
        return false;
    }
    for(let ii = 0; ii < aa.byteLength; ii++){
        if (aa[ii] !== bb[ii]) {
            return false;
        }
    }
    return true;
};
const coerce1 = (o)=>{
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array") return o;
    if (o instanceof ArrayBuffer) return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) {
        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    }
    throw new Error("Unknown type, must be binary type");
};
const isBinary1 = (o)=>o instanceof ArrayBuffer || ArrayBuffer.isView(o);
const fromString2 = (str)=>new TextEncoder().encode(str);
const toString2 = (b)=>new TextDecoder().decode(b);
var bytes = Object.freeze({
    __proto__: null,
    equals: equals2,
    coerce: coerce1,
    isBinary: isBinary1,
    fromHex: fromHex1,
    toHex: toHex3,
    fromString: fromString2,
    toString: toString2,
    empty: empty1
});
var encode_12 = encode8;
var MSB2 = 128, REST3 = 127, MSBALL2 = ~REST3, INT2 = Math.pow(2, 31);
function encode8(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= INT2){
        out[offset++] = num & 255 | MSB2;
        num /= 128;
    }
    while(num & MSBALL2){
        out[offset++] = num & 255 | MSB2;
        num >>>= 7;
    }
    out[offset] = num | 0;
    encode8.bytes = offset - oldOffset + 1;
    return out;
}
var decode9 = read2;
var MSB$12 = 128, REST$12 = 127;
function read2(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l) {
            read2.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST$12) << shift : (b & REST$12) * Math.pow(2, shift);
        shift += 7;
    }while (b >= MSB$12)
    read2.bytes = counter - offset;
    return res;
}
var N12 = Math.pow(2, 7);
var N22 = Math.pow(2, 14);
var N32 = Math.pow(2, 21);
var N42 = Math.pow(2, 28);
var N52 = Math.pow(2, 35);
var N62 = Math.pow(2, 42);
var N72 = Math.pow(2, 49);
var N82 = Math.pow(2, 56);
var N92 = Math.pow(2, 63);
var length2 = function(value) {
    return value < N12 ? 1 : value < N22 ? 2 : value < N32 ? 3 : value < N42 ? 4 : value < N52 ? 5 : value < N62 ? 6 : value < N72 ? 7 : value < N82 ? 8 : value < N92 ? 9 : 10;
};
var varint2 = {
    encode: encode_12,
    decode: decode9,
    encodingLength: length2
};
var _brrp_varint1 = varint2;
const decode$11 = (data, offset = 0)=>{
    const code = _brrp_varint1.decode(data, offset);
    return [
        code,
        _brrp_varint1.decode.bytes
    ];
};
const encodeTo1 = (__int, target, offset = 0)=>{
    _brrp_varint1.encode(__int, target, offset);
    return target;
};
const encodingLength1 = (__int)=>{
    return _brrp_varint1.encodingLength(__int);
};
Object.freeze({
    __proto__: null,
    decode: decode$11,
    encodeTo: encodeTo1,
    encodingLength: encodingLength1
});
const create1 = (code, digest2)=>{
    const size = digest2.byteLength;
    const sizeOffset = encodingLength1(code);
    const digestOffset = sizeOffset + encodingLength1(size);
    const bytes = new Uint8Array(digestOffset + size);
    encodeTo1(code, bytes, 0);
    encodeTo1(size, bytes, sizeOffset);
    bytes.set(digest2, digestOffset);
    return new Digest1(code, size, digest2, bytes);
};
const decode$21 = (multihash)=>{
    const bytes = coerce1(multihash);
    const [code, sizeOffset] = decode$11(bytes);
    const [size, digestOffset] = decode$11(bytes.subarray(sizeOffset));
    const digest2 = bytes.subarray(sizeOffset + digestOffset);
    if (digest2.byteLength !== size) {
        throw new Error("Incorrect length");
    }
    return new Digest1(code, size, digest2, bytes);
};
const equals3 = (a, b)=>{
    if (a === b) {
        return true;
    } else {
        return a.code === b.code && a.size === b.size && equals2(a.bytes, b.bytes);
    }
};
class Digest1 {
    constructor(code, size, digest2, bytes){
        this.code = code;
        this.size = size;
        this.digest = digest2;
        this.bytes = bytes;
    }
}
Object.freeze({
    __proto__: null,
    create: create1,
    decode: decode$21,
    equals: equals3,
    Digest: Digest1
});
const from1 = ({ name, code, encode })=>new Hasher(name, code, encode);
class Hasher {
    constructor(name, code, encode){
        this.name = name;
        this.code = code;
        this.encode = encode;
    }
    digest(input) {
        if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? create1(this.code, result) : result.then((digest$1)=>create1(this.code, digest$1));
        } else {
            throw Error("Unknown type, must be binary type");
        }
    }
}
Object.freeze({
    __proto__: null,
    from: from1,
    Hasher
});
const sha2 = (name)=>async (data)=>new Uint8Array(await crypto.subtle.digest(name, data));
const sha2563 = from1({
    name: "sha2-256",
    code: 18,
    encode: sha2("SHA-256")
});
const sha5122 = from1({
    name: "sha2-512",
    code: 19,
    encode: sha2("SHA-512")
});
var sha21 = Object.freeze({
    __proto__: null,
    sha256: sha2563,
    sha512: sha5122
});
const empty2 = new Uint8Array(0);
const toHex4 = (d)=>d.reduce((hex, __byte)=>hex + __byte.toString(16).padStart(2, "0"), "");
const fromHex2 = (hex)=>{
    const hexes = hex.match(/../g);
    return hexes ? new Uint8Array(hexes.map((b)=>parseInt(b, 16))) : empty2;
};
const equals4 = (aa, bb)=>{
    if (aa === bb) return true;
    if (aa.byteLength !== bb.byteLength) {
        return false;
    }
    for(let ii = 0; ii < aa.byteLength; ii++){
        if (aa[ii] !== bb[ii]) {
            return false;
        }
    }
    return true;
};
const coerce2 = (o)=>{
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array") return o;
    if (o instanceof ArrayBuffer) return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) {
        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    }
    throw new Error("Unknown type, must be binary type");
};
const isBinary2 = (o)=>o instanceof ArrayBuffer || ArrayBuffer.isView(o);
const fromString3 = (str)=>new TextEncoder().encode(str);
const toString3 = (b)=>new TextDecoder().decode(b);
var bytes1 = Object.freeze({
    __proto__: null,
    equals: equals4,
    coerce: coerce2,
    isBinary: isBinary2,
    fromHex: fromHex2,
    toHex: toHex4,
    fromString: fromString3,
    toString: toString3,
    empty: empty2
});
var encode_13 = encode9;
var MSB3 = 128, REST4 = 127, MSBALL3 = ~REST4, INT3 = Math.pow(2, 31);
function encode9(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= INT3){
        out[offset++] = num & 255 | MSB3;
        num /= 128;
    }
    while(num & MSBALL3){
        out[offset++] = num & 255 | MSB3;
        num >>>= 7;
    }
    out[offset] = num | 0;
    encode9.bytes = offset - oldOffset + 1;
    return out;
}
var decode10 = read3;
var MSB$13 = 128, REST$13 = 127;
function read3(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l) {
            read3.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST$13) << shift : (b & REST$13) * Math.pow(2, shift);
        shift += 7;
    }while (b >= MSB$13)
    read3.bytes = counter - offset;
    return res;
}
var N13 = Math.pow(2, 7);
var N23 = Math.pow(2, 14);
var N33 = Math.pow(2, 21);
var N43 = Math.pow(2, 28);
var N53 = Math.pow(2, 35);
var N63 = Math.pow(2, 42);
var N73 = Math.pow(2, 49);
var N83 = Math.pow(2, 56);
var N93 = Math.pow(2, 63);
var length3 = function(value) {
    return value < N13 ? 1 : value < N23 ? 2 : value < N33 ? 3 : value < N43 ? 4 : value < N53 ? 5 : value < N63 ? 6 : value < N73 ? 7 : value < N83 ? 8 : value < N93 ? 9 : 10;
};
var varint3 = {
    encode: encode_13,
    decode: decode10,
    encodingLength: length3
};
var _brrp_varint2 = varint3;
const decode$12 = (data)=>{
    const code = _brrp_varint2.decode(data);
    return [
        code,
        _brrp_varint2.decode.bytes
    ];
};
const encodeTo2 = (__int, target, offset = 0)=>{
    _brrp_varint2.encode(__int, target, offset);
    return target;
};
const encodingLength2 = (__int)=>{
    return _brrp_varint2.encodingLength(__int);
};
Object.freeze({
    __proto__: null,
    decode: decode$12,
    encodeTo: encodeTo2,
    encodingLength: encodingLength2
});
const create2 = (code, digest2)=>{
    const size = digest2.byteLength;
    const sizeOffset = encodingLength2(code);
    const digestOffset = sizeOffset + encodingLength2(size);
    const bytes = new Uint8Array(digestOffset + size);
    encodeTo2(code, bytes, 0);
    encodeTo2(size, bytes, sizeOffset);
    bytes.set(digest2, digestOffset);
    return new Digest2(code, size, digest2, bytes);
};
const decode$22 = (multihash)=>{
    const bytes = coerce2(multihash);
    const [code, sizeOffset] = decode$12(bytes);
    const [size, digestOffset] = decode$12(bytes.subarray(sizeOffset));
    const digest2 = bytes.subarray(sizeOffset + digestOffset);
    if (digest2.byteLength !== size) {
        throw new Error("Incorrect length");
    }
    return new Digest2(code, size, digest2, bytes);
};
const equals5 = (a, b)=>{
    if (a === b) {
        return true;
    } else {
        return a.code === b.code && a.size === b.size && equals4(a.bytes, b.bytes);
    }
};
class Digest2 {
    constructor(code, size, digest2, bytes){
        this.code = code;
        this.size = size;
        this.digest = digest2;
        this.bytes = bytes;
    }
}
Object.freeze({
    __proto__: null,
    create: create2,
    decode: decode$22,
    equals: equals5,
    Digest: Digest2
});
const from2 = ({ name, code, encode })=>new Hasher1(name, code, encode);
class Hasher1 {
    constructor(name, code, encode){
        this.name = name;
        this.code = code;
        this.encode = encode;
    }
    digest(input) {
        if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest$1)=>create2(this.code, digest$1));
        } else {
            throw Error("Unknown type, must be binary type");
        }
    }
}
Object.freeze({
    __proto__: null,
    from: from2,
    Hasher: Hasher1
});
function base2(ALPHABET, name) {
    if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for(var j = 0; j < BASE_MAP.length; j++){
        BASE_MAP[j] = 255;
    }
    for(var i = 0; i < ALPHABET.length; i++){
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode2(source) {
        if (source instanceof Uint8Array) ;
        else if (ArrayBuffer.isView(source)) {
            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
            source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
            throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
            return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while(pbegin !== pend){
            var carry = source[pbegin];
            var i2 = 0;
            for(var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
                throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
        }
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0){
            it2++;
        }
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2){
            str += ALPHABET.charAt(b58[it2]);
        }
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") {
            throw new TypeError("Expected String");
        }
        if (source.length === 0) {
            return new Uint8Array();
        }
        var psz = 0;
        if (source[psz] === " ") {
            return;
        }
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while(source[psz]){
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
                return;
            }
            var i2 = 0;
            for(var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
                throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
        }
        if (source[psz] === " ") {
            return;
        }
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0){
            it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j2 = zeroes;
        while(it4 !== size){
            vch[j2++] = b256[it4++];
        }
        return vch;
    }
    function decode2(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
            return buffer;
        }
        throw new Error(`Non-${name} character`);
    }
    return {
        encode: encode2,
        decodeUnsafe,
        decode: decode2
    };
}
var src1 = base2;
var _brrp__multiformats_scope_baseX1 = src1;
class Encoder1 {
    constructor(name, prefix, baseEncode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
    }
    encode(bytes) {
        if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
        } else {
            throw Error("Unknown type, must be binary type");
        }
    }
}
class Decoder1 {
    constructor(name, prefix, baseDecode){
        this.name = name;
        this.prefix = prefix;
        this.baseDecode = baseDecode;
    }
    decode(text) {
        if (typeof text === "string") {
            switch(text[0]){
                case this.prefix:
                    {
                        return this.baseDecode(text.slice(1));
                    }
                default:
                    {
                        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
                    }
            }
        } else {
            throw Error("Can only multibase decode strings");
        }
    }
    or(decoder) {
        return or1(this, decoder);
    }
}
class ComposedDecoder1 {
    constructor(decoders){
        this.decoders = decoders;
    }
    or(decoder) {
        return or1(this, decoder);
    }
    decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder) {
            return decoder.decode(input);
        } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
        }
    }
}
const or1 = (left, right)=>new ComposedDecoder1({
        ...left.decoders || {
            [left.prefix]: left
        },
        ...right.decoders || {
            [right.prefix]: right
        }
    });
class Codec1 {
    constructor(name, prefix, baseEncode, baseDecode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder1(name, prefix, baseEncode);
        this.decoder = new Decoder1(name, prefix, baseDecode);
    }
    encode(input) {
        return this.encoder.encode(input);
    }
    decode(input) {
        return this.decoder.decode(input);
    }
}
const from3 = ({ name, prefix, encode: encode2, decode: decode2 })=>new Codec1(name, prefix, encode2, decode2);
const baseX1 = ({ prefix, name, alphabet })=>{
    const { encode: encode2, decode: decode2 } = _brrp__multiformats_scope_baseX1(alphabet, name);
    return from3({
        prefix,
        name,
        encode: encode2,
        decode: (text)=>coerce2(decode2(text))
    });
};
const decode11 = (string, alphabet, bitsPerChar, name)=>{
    const codes = {};
    for(let i = 0; i < alphabet.length; ++i){
        codes[alphabet[i]] = i;
    }
    let end = string.length;
    while(string[end - 1] === "="){
        --end;
    }
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer = 0;
    let written = 0;
    for(let i = 0; i < end; ++i){
        const value = codes[string[i]];
        if (value === void 0) {
            throw new SyntaxError(`Non-${name} character`);
        }
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer >> bits;
        }
    }
    if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
        throw new SyntaxError("Unexpected end of data");
    }
    return out;
};
const encode10 = (data, alphabet, bitsPerChar)=>{
    const pad = alphabet[alphabet.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer = 0;
    for(let i = 0; i < data.length; ++i){
        buffer = buffer << 8 | data[i];
        bits += 8;
        while(bits > bitsPerChar){
            bits -= bitsPerChar;
            out += alphabet[mask & buffer >> bits];
        }
    }
    if (bits) {
        out += alphabet[mask & buffer << bitsPerChar - bits];
    }
    if (pad) {
        while(out.length * bitsPerChar & 7){
            out += "=";
        }
    }
    return out;
};
const rfc46481 = ({ name, prefix, bitsPerChar, alphabet })=>{
    return from3({
        prefix,
        name,
        encode (input) {
            return encode10(input, alphabet, bitsPerChar);
        },
        decode (input) {
            return decode11(input, alphabet, bitsPerChar, name);
        }
    });
};
const base58btc1 = baseX1({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
const base58flickr1 = baseX1({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});
Object.freeze({
    __proto__: null,
    base58btc: base58btc1,
    base58flickr: base58flickr1
});
const base321 = rfc46481({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5
});
const base32upper1 = rfc46481({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5
});
const base32pad1 = rfc46481({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5
});
const base32padupper1 = rfc46481({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5
});
const base32hex1 = rfc46481({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5
});
const base32hexupper1 = rfc46481({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5
});
const base32hexpad1 = rfc46481({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5
});
const base32hexpadupper1 = rfc46481({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5
});
const base32z1 = rfc46481({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5
});
Object.freeze({
    __proto__: null,
    base32: base321,
    base32upper: base32upper1,
    base32pad: base32pad1,
    base32padupper: base32padupper1,
    base32hex: base32hex1,
    base32hexupper: base32hexupper1,
    base32hexpad: base32hexpad1,
    base32hexpadupper: base32hexpadupper1,
    base32z: base32z1
});
class CID1 {
    constructor(version2, code, multihash, bytes){
        this.code = code;
        this.version = version2;
        this.multihash = multihash;
        this.bytes = bytes;
        this.byteOffset = bytes.byteOffset;
        this.byteLength = bytes.byteLength;
        this.asCID = this;
        this._baseCache = new Map();
        Object.defineProperties(this, {
            byteOffset: hidden,
            byteLength: hidden,
            code: readonly,
            version: readonly,
            multihash: readonly,
            bytes: readonly,
            _baseCache: hidden,
            asCID: hidden
        });
    }
    toV0() {
        switch(this.version){
            case 0:
                {
                    return this;
                }
            default:
                {
                    const { code, multihash } = this;
                    if (code !== DAG_PB_CODE1) {
                        throw new Error("Cannot convert a non dag-pb CID to CIDv0");
                    }
                    if (multihash.code !== SHA_256_CODE1) {
                        throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
                    }
                    return CID1.createV0(multihash);
                }
        }
    }
    toV1() {
        switch(this.version){
            case 0:
                {
                    const { code, digest: digest$1 } = this.multihash;
                    const multihash = create2(code, digest$1);
                    return CID1.createV1(this.code, multihash);
                }
            case 1:
                {
                    return this;
                }
            default:
                {
                    throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
                }
        }
    }
    equals(other) {
        return other && this.code === other.code && this.version === other.version && equals5(this.multihash, other.multihash);
    }
    toString(base) {
        const { bytes, version: version2, _baseCache } = this;
        switch(version2){
            case 0:
                return toStringV01(bytes, _baseCache, base || base58btc1.encoder);
            default:
                return toStringV11(bytes, _baseCache, base || base321.encoder);
        }
    }
    toJSON() {
        return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
        };
    }
    get [Symbol.toStringTag]() {
        return "CID";
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        return "CID(" + this.toString() + ")";
    }
    static isCID(value) {
        deprecate(/^0\.0/, IS_CID_DEPRECATION);
        return !!(value && (value[cidSymbol1] || value.asCID === value));
    }
    get toBaseEncodedString() {
        throw new Error("Deprecated, use .toString()");
    }
    get codec() {
        throw new Error('"codec" property is deprecated, use integer "code" property instead');
    }
    get buffer() {
        throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
    }
    get multibaseName() {
        throw new Error('"multibaseName" property is deprecated');
    }
    get prefix() {
        throw new Error('"prefix" property is deprecated');
    }
    static asCID(value) {
        if (value instanceof CID1) {
            return value;
        } else if (value != null && value.asCID === value) {
            const { version: version2, code, multihash, bytes } = value;
            return new CID1(version2, code, multihash, bytes || encodeCID1(version2, code, multihash.bytes));
        } else if (value != null && value[cidSymbol1] === true) {
            const { version: version2, multihash, code } = value;
            const digest$1 = decode$22(multihash);
            return CID1.create(version2, code, digest$1);
        } else {
            return null;
        }
    }
    static create(version2, code, digest) {
        if (typeof code !== "number") {
            throw new Error("String codecs are no longer supported");
        }
        switch(version2){
            case 0:
                {
                    if (code !== DAG_PB_CODE1) {
                        throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE1}) block encoding`);
                    } else {
                        return new CID1(version2, code, digest, digest.bytes);
                    }
                }
            case 1:
                {
                    const bytes = encodeCID1(version2, code, digest.bytes);
                    return new CID1(version2, code, digest, bytes);
                }
            default:
                {
                    throw new Error("Invalid version");
                }
        }
    }
    static createV0(digest) {
        return CID1.create(0, DAG_PB_CODE1, digest);
    }
    static createV1(code, digest) {
        return CID1.create(1, code, digest);
    }
    static decode(bytes) {
        const [cid, remainder] = CID1.decodeFirst(bytes);
        if (remainder.length) {
            throw new Error("Incorrect length");
        }
        return cid;
    }
    static decodeFirst(bytes) {
        const specs = CID1.inspectBytes(bytes);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = coerce2(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
        }
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest$1 = new Digest2(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid = specs.version === 0 ? CID1.createV0(digest$1) : CID1.createV1(specs.codec, digest$1);
        return [
            cid,
            bytes.subarray(specs.size)
        ];
    }
    static inspectBytes(initialBytes) {
        let offset = 0;
        const next = ()=>{
            const [i, length] = decode$12(initialBytes.subarray(offset));
            offset += length;
            return i;
        };
        let version2 = next();
        let codec = DAG_PB_CODE1;
        if (version2 === 18) {
            version2 = 0;
            offset = 0;
        } else if (version2 === 1) {
            codec = next();
        }
        if (version2 !== 0 && version2 !== 1) {
            throw new RangeError(`Invalid CID version ${version2}`);
        }
        const prefixSize = offset;
        const multihashCode = next();
        const digestSize = next();
        const size = offset + digestSize;
        const multihashSize = size - prefixSize;
        return {
            version: version2,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
        };
    }
    static parse(source, base) {
        const [prefix, bytes] = parseCIDtoBytes1(source, base);
        const cid = CID1.decode(bytes);
        cid._baseCache.set(prefix, source);
        return cid;
    }
}
const parseCIDtoBytes1 = (source, base)=>{
    switch(source[0]){
        case "Q":
            {
                const decoder = base || base58btc1;
                return [
                    base58btc1.prefix,
                    decoder.decode(`${base58btc1.prefix}${source}`)
                ];
            }
        case base58btc1.prefix:
            {
                const decoder = base || base58btc1;
                return [
                    base58btc1.prefix,
                    decoder.decode(source)
                ];
            }
        case base321.prefix:
            {
                const decoder = base || base321;
                return [
                    base321.prefix,
                    decoder.decode(source)
                ];
            }
        default:
            {
                if (base == null) {
                    throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
                }
                return [
                    source[0],
                    base.decode(source)
                ];
            }
    }
};
const toStringV01 = (bytes, cache, base)=>{
    const { prefix } = base;
    if (prefix !== base58btc1.prefix) {
        throw Error(`Cannot string encode V0 in ${base.name} encoding`);
    }
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid2 = base.encode(bytes).slice(1);
        cache.set(prefix, cid2);
        return cid2;
    } else {
        return cid;
    }
};
const toStringV11 = (bytes, cache, base)=>{
    const { prefix } = base;
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid2 = base.encode(bytes);
        cache.set(prefix, cid2);
        return cid2;
    } else {
        return cid;
    }
};
const DAG_PB_CODE1 = 112;
const SHA_256_CODE1 = 18;
const encodeCID1 = (version2, code, multihash)=>{
    const codeOffset = encodingLength2(version2);
    const hashOffset = codeOffset + encodingLength2(code);
    const bytes = new Uint8Array(hashOffset + multihash.byteLength);
    encodeTo2(version2, bytes, 0);
    encodeTo2(code, bytes, codeOffset);
    bytes.set(multihash, hashOffset);
    return bytes;
};
const cidSymbol1 = Symbol.for("@ipld/js-cid/CID");
const readonly = {
    writable: false,
    configurable: false,
    enumerable: true
};
const hidden = {
    writable: false,
    enumerable: false,
    configurable: false
};
const version27 = "0.0.0-dev";
const deprecate = (range, message)=>{
    if (range.test(version27)) {
        console.warn(message);
    } else {
        throw new Error(message);
    }
};
const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
function createCommonjsModule7(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path, base) {
            return commonjsRequire7(path, base === void 0 || base === null ? module.path : base);
        }
    }, fn(module, module.exports), module.exports;
}
function commonjsRequire7() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var murmurHash3js = createCommonjsModule7(function(module, exports) {
    (function(root, undefined$1) {
        var library = {
            version: "3.0.0",
            x86: {},
            x64: {},
            inputValidation: true
        };
        function _validBytes(bytes) {
            if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {
                return false;
            }
            for(var i = 0; i < bytes.length; i++){
                if (!Number.isInteger(bytes[i]) || bytes[i] < 0 || bytes[i] > 255) {
                    return false;
                }
            }
            return true;
        }
        function _x86Multiply(m, n) {
            return (m & 65535) * n + (((m >>> 16) * n & 65535) << 16);
        }
        function _x86Rotl(m, n) {
            return m << n | m >>> 32 - n;
        }
        function _x86Fmix(h) {
            h ^= h >>> 16;
            h = _x86Multiply(h, 2246822507);
            h ^= h >>> 13;
            h = _x86Multiply(h, 3266489909);
            h ^= h >>> 16;
            return h;
        }
        function _x64Add(m, n) {
            m = [
                m[0] >>> 16,
                m[0] & 65535,
                m[1] >>> 16,
                m[1] & 65535
            ];
            n = [
                n[0] >>> 16,
                n[0] & 65535,
                n[1] >>> 16,
                n[1] & 65535
            ];
            var o = [
                0,
                0,
                0,
                0
            ];
            o[3] += m[3] + n[3];
            o[2] += o[3] >>> 16;
            o[3] &= 65535;
            o[2] += m[2] + n[2];
            o[1] += o[2] >>> 16;
            o[2] &= 65535;
            o[1] += m[1] + n[1];
            o[0] += o[1] >>> 16;
            o[1] &= 65535;
            o[0] += m[0] + n[0];
            o[0] &= 65535;
            return [
                o[0] << 16 | o[1],
                o[2] << 16 | o[3]
            ];
        }
        function _x64Multiply(m, n) {
            m = [
                m[0] >>> 16,
                m[0] & 65535,
                m[1] >>> 16,
                m[1] & 65535
            ];
            n = [
                n[0] >>> 16,
                n[0] & 65535,
                n[1] >>> 16,
                n[1] & 65535
            ];
            var o = [
                0,
                0,
                0,
                0
            ];
            o[3] += m[3] * n[3];
            o[2] += o[3] >>> 16;
            o[3] &= 65535;
            o[2] += m[2] * n[3];
            o[1] += o[2] >>> 16;
            o[2] &= 65535;
            o[2] += m[3] * n[2];
            o[1] += o[2] >>> 16;
            o[2] &= 65535;
            o[1] += m[1] * n[3];
            o[0] += o[1] >>> 16;
            o[1] &= 65535;
            o[1] += m[2] * n[2];
            o[0] += o[1] >>> 16;
            o[1] &= 65535;
            o[1] += m[3] * n[1];
            o[0] += o[1] >>> 16;
            o[1] &= 65535;
            o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];
            o[0] &= 65535;
            return [
                o[0] << 16 | o[1],
                o[2] << 16 | o[3]
            ];
        }
        function _x64Rotl(m, n) {
            n %= 64;
            if (n === 32) {
                return [
                    m[1],
                    m[0]
                ];
            } else if (n < 32) {
                return [
                    m[0] << n | m[1] >>> 32 - n,
                    m[1] << n | m[0] >>> 32 - n
                ];
            } else {
                n -= 32;
                return [
                    m[1] << n | m[0] >>> 32 - n,
                    m[0] << n | m[1] >>> 32 - n
                ];
            }
        }
        function _x64LeftShift(m, n) {
            n %= 64;
            if (n === 0) {
                return m;
            } else if (n < 32) {
                return [
                    m[0] << n | m[1] >>> 32 - n,
                    m[1] << n
                ];
            } else {
                return [
                    m[1] << n - 32,
                    0
                ];
            }
        }
        function _x64Xor(m, n) {
            return [
                m[0] ^ n[0],
                m[1] ^ n[1]
            ];
        }
        function _x64Fmix(h) {
            h = _x64Xor(h, [
                0,
                h[0] >>> 1
            ]);
            h = _x64Multiply(h, [
                4283543511,
                3981806797
            ]);
            h = _x64Xor(h, [
                0,
                h[0] >>> 1
            ]);
            h = _x64Multiply(h, [
                3301882366,
                444984403
            ]);
            h = _x64Xor(h, [
                0,
                h[0] >>> 1
            ]);
            return h;
        }
        library.x86.hash32 = function(bytes, seed) {
            if (library.inputValidation && !_validBytes(bytes)) {
                return undefined$1;
            }
            seed = seed || 0;
            var remainder = bytes.length % 4;
            var blocks = bytes.length - remainder;
            var h1 = seed;
            var k1 = 0;
            var c1 = 3432918353;
            var c2 = 461845907;
            for(var i = 0; i < blocks; i = i + 4){
                k1 = bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24;
                k1 = _x86Multiply(k1, c1);
                k1 = _x86Rotl(k1, 15);
                k1 = _x86Multiply(k1, c2);
                h1 ^= k1;
                h1 = _x86Rotl(h1, 13);
                h1 = _x86Multiply(h1, 5) + 3864292196;
            }
            k1 = 0;
            switch(remainder){
                case 3:
                    k1 ^= bytes[i + 2] << 16;
                case 2:
                    k1 ^= bytes[i + 1] << 8;
                case 1:
                    k1 ^= bytes[i];
                    k1 = _x86Multiply(k1, c1);
                    k1 = _x86Rotl(k1, 15);
                    k1 = _x86Multiply(k1, c2);
                    h1 ^= k1;
            }
            h1 ^= bytes.length;
            h1 = _x86Fmix(h1);
            return h1 >>> 0;
        };
        library.x86.hash128 = function(bytes, seed) {
            if (library.inputValidation && !_validBytes(bytes)) {
                return undefined$1;
            }
            seed = seed || 0;
            var remainder = bytes.length % 16;
            var blocks = bytes.length - remainder;
            var h1 = seed;
            var h2 = seed;
            var h3 = seed;
            var h4 = seed;
            var k1 = 0;
            var k2 = 0;
            var k3 = 0;
            var k4 = 0;
            var c1 = 597399067;
            var c2 = 2869860233;
            var c3 = 951274213;
            var c4 = 2716044179;
            for(var i = 0; i < blocks; i = i + 16){
                k1 = bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24;
                k2 = bytes[i + 4] | bytes[i + 5] << 8 | bytes[i + 6] << 16 | bytes[i + 7] << 24;
                k3 = bytes[i + 8] | bytes[i + 9] << 8 | bytes[i + 10] << 16 | bytes[i + 11] << 24;
                k4 = bytes[i + 12] | bytes[i + 13] << 8 | bytes[i + 14] << 16 | bytes[i + 15] << 24;
                k1 = _x86Multiply(k1, c1);
                k1 = _x86Rotl(k1, 15);
                k1 = _x86Multiply(k1, c2);
                h1 ^= k1;
                h1 = _x86Rotl(h1, 19);
                h1 += h2;
                h1 = _x86Multiply(h1, 5) + 1444728091;
                k2 = _x86Multiply(k2, c2);
                k2 = _x86Rotl(k2, 16);
                k2 = _x86Multiply(k2, c3);
                h2 ^= k2;
                h2 = _x86Rotl(h2, 17);
                h2 += h3;
                h2 = _x86Multiply(h2, 5) + 197830471;
                k3 = _x86Multiply(k3, c3);
                k3 = _x86Rotl(k3, 17);
                k3 = _x86Multiply(k3, c4);
                h3 ^= k3;
                h3 = _x86Rotl(h3, 15);
                h3 += h4;
                h3 = _x86Multiply(h3, 5) + 2530024501;
                k4 = _x86Multiply(k4, c4);
                k4 = _x86Rotl(k4, 18);
                k4 = _x86Multiply(k4, c1);
                h4 ^= k4;
                h4 = _x86Rotl(h4, 13);
                h4 += h1;
                h4 = _x86Multiply(h4, 5) + 850148119;
            }
            k1 = 0;
            k2 = 0;
            k3 = 0;
            k4 = 0;
            switch(remainder){
                case 15:
                    k4 ^= bytes[i + 14] << 16;
                case 14:
                    k4 ^= bytes[i + 13] << 8;
                case 13:
                    k4 ^= bytes[i + 12];
                    k4 = _x86Multiply(k4, c4);
                    k4 = _x86Rotl(k4, 18);
                    k4 = _x86Multiply(k4, c1);
                    h4 ^= k4;
                case 12:
                    k3 ^= bytes[i + 11] << 24;
                case 11:
                    k3 ^= bytes[i + 10] << 16;
                case 10:
                    k3 ^= bytes[i + 9] << 8;
                case 9:
                    k3 ^= bytes[i + 8];
                    k3 = _x86Multiply(k3, c3);
                    k3 = _x86Rotl(k3, 17);
                    k3 = _x86Multiply(k3, c4);
                    h3 ^= k3;
                case 8:
                    k2 ^= bytes[i + 7] << 24;
                case 7:
                    k2 ^= bytes[i + 6] << 16;
                case 6:
                    k2 ^= bytes[i + 5] << 8;
                case 5:
                    k2 ^= bytes[i + 4];
                    k2 = _x86Multiply(k2, c2);
                    k2 = _x86Rotl(k2, 16);
                    k2 = _x86Multiply(k2, c3);
                    h2 ^= k2;
                case 4:
                    k1 ^= bytes[i + 3] << 24;
                case 3:
                    k1 ^= bytes[i + 2] << 16;
                case 2:
                    k1 ^= bytes[i + 1] << 8;
                case 1:
                    k1 ^= bytes[i];
                    k1 = _x86Multiply(k1, c1);
                    k1 = _x86Rotl(k1, 15);
                    k1 = _x86Multiply(k1, c2);
                    h1 ^= k1;
            }
            h1 ^= bytes.length;
            h2 ^= bytes.length;
            h3 ^= bytes.length;
            h4 ^= bytes.length;
            h1 += h2;
            h1 += h3;
            h1 += h4;
            h2 += h1;
            h3 += h1;
            h4 += h1;
            h1 = _x86Fmix(h1);
            h2 = _x86Fmix(h2);
            h3 = _x86Fmix(h3);
            h4 = _x86Fmix(h4);
            h1 += h2;
            h1 += h3;
            h1 += h4;
            h2 += h1;
            h3 += h1;
            h4 += h1;
            return ("00000000" + (h1 >>> 0).toString(16)).slice(-8) + ("00000000" + (h2 >>> 0).toString(16)).slice(-8) + ("00000000" + (h3 >>> 0).toString(16)).slice(-8) + ("00000000" + (h4 >>> 0).toString(16)).slice(-8);
        };
        library.x64.hash128 = function(bytes, seed) {
            if (library.inputValidation && !_validBytes(bytes)) {
                return undefined$1;
            }
            seed = seed || 0;
            var remainder = bytes.length % 16;
            var blocks = bytes.length - remainder;
            var h1 = [
                0,
                seed
            ];
            var h2 = [
                0,
                seed
            ];
            var k1 = [
                0,
                0
            ];
            var k2 = [
                0,
                0
            ];
            var c1 = [
                2277735313,
                289559509
            ];
            var c2 = [
                1291169091,
                658871167
            ];
            for(var i = 0; i < blocks; i = i + 16){
                k1 = [
                    bytes[i + 4] | bytes[i + 5] << 8 | bytes[i + 6] << 16 | bytes[i + 7] << 24,
                    bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24
                ];
                k2 = [
                    bytes[i + 12] | bytes[i + 13] << 8 | bytes[i + 14] << 16 | bytes[i + 15] << 24,
                    bytes[i + 8] | bytes[i + 9] << 8 | bytes[i + 10] << 16 | bytes[i + 11] << 24
                ];
                k1 = _x64Multiply(k1, c1);
                k1 = _x64Rotl(k1, 31);
                k1 = _x64Multiply(k1, c2);
                h1 = _x64Xor(h1, k1);
                h1 = _x64Rotl(h1, 27);
                h1 = _x64Add(h1, h2);
                h1 = _x64Add(_x64Multiply(h1, [
                    0,
                    5
                ]), [
                    0,
                    1390208809
                ]);
                k2 = _x64Multiply(k2, c2);
                k2 = _x64Rotl(k2, 33);
                k2 = _x64Multiply(k2, c1);
                h2 = _x64Xor(h2, k2);
                h2 = _x64Rotl(h2, 31);
                h2 = _x64Add(h2, h1);
                h2 = _x64Add(_x64Multiply(h2, [
                    0,
                    5
                ]), [
                    0,
                    944331445
                ]);
            }
            k1 = [
                0,
                0
            ];
            k2 = [
                0,
                0
            ];
            switch(remainder){
                case 15:
                    k2 = _x64Xor(k2, _x64LeftShift([
                        0,
                        bytes[i + 14]
                    ], 48));
                case 14:
                    k2 = _x64Xor(k2, _x64LeftShift([
                        0,
                        bytes[i + 13]
                    ], 40));
                case 13:
                    k2 = _x64Xor(k2, _x64LeftShift([
                        0,
                        bytes[i + 12]
                    ], 32));
                case 12:
                    k2 = _x64Xor(k2, _x64LeftShift([
                        0,
                        bytes[i + 11]
                    ], 24));
                case 11:
                    k2 = _x64Xor(k2, _x64LeftShift([
                        0,
                        bytes[i + 10]
                    ], 16));
                case 10:
                    k2 = _x64Xor(k2, _x64LeftShift([
                        0,
                        bytes[i + 9]
                    ], 8));
                case 9:
                    k2 = _x64Xor(k2, [
                        0,
                        bytes[i + 8]
                    ]);
                    k2 = _x64Multiply(k2, c2);
                    k2 = _x64Rotl(k2, 33);
                    k2 = _x64Multiply(k2, c1);
                    h2 = _x64Xor(h2, k2);
                case 8:
                    k1 = _x64Xor(k1, _x64LeftShift([
                        0,
                        bytes[i + 7]
                    ], 56));
                case 7:
                    k1 = _x64Xor(k1, _x64LeftShift([
                        0,
                        bytes[i + 6]
                    ], 48));
                case 6:
                    k1 = _x64Xor(k1, _x64LeftShift([
                        0,
                        bytes[i + 5]
                    ], 40));
                case 5:
                    k1 = _x64Xor(k1, _x64LeftShift([
                        0,
                        bytes[i + 4]
                    ], 32));
                case 4:
                    k1 = _x64Xor(k1, _x64LeftShift([
                        0,
                        bytes[i + 3]
                    ], 24));
                case 3:
                    k1 = _x64Xor(k1, _x64LeftShift([
                        0,
                        bytes[i + 2]
                    ], 16));
                case 2:
                    k1 = _x64Xor(k1, _x64LeftShift([
                        0,
                        bytes[i + 1]
                    ], 8));
                case 1:
                    k1 = _x64Xor(k1, [
                        0,
                        bytes[i]
                    ]);
                    k1 = _x64Multiply(k1, c1);
                    k1 = _x64Rotl(k1, 31);
                    k1 = _x64Multiply(k1, c2);
                    h1 = _x64Xor(h1, k1);
            }
            h1 = _x64Xor(h1, [
                0,
                bytes.length
            ]);
            h2 = _x64Xor(h2, [
                0,
                bytes.length
            ]);
            h1 = _x64Add(h1, h2);
            h2 = _x64Add(h2, h1);
            h1 = _x64Fmix(h1);
            h2 = _x64Fmix(h2);
            h1 = _x64Add(h1, h2);
            h2 = _x64Add(h2, h1);
            return ("00000000" + (h1[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h1[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[1] >>> 0).toString(16)).slice(-8);
        };
        {
            if (module.exports) {
                exports = module.exports = library;
            }
            exports.murmurHash3 = library;
        }
    })();
});
var murmurhash3jsRevisited = murmurHash3js;
murmurhash3jsRevisited.murmurHash3;
function fromNumberTo32BitBuf(number) {
    const bytes2 = new Array(4);
    for(let i = 0; i < 4; i++){
        bytes2[i] = number & 255;
        number = number >> 8;
    }
    return new Uint8Array(bytes2);
}
const murmur332 = from2({
    name: "murmur3-32",
    code: 35,
    encode: (input)=>fromNumberTo32BitBuf(murmurhash3jsRevisited.x86.hash32(input))
});
const murmur3128 = from2({
    name: "murmur3-128",
    code: 34,
    encode: (input)=>bytes1.fromHex(murmurhash3jsRevisited.x64.hash128(input))
});
const ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
function normalizeInput(input) {
    let ret;
    if (input instanceof Uint8Array) {
        ret = input;
    } else if (typeof input === "string") {
        const encoder = new TextEncoder();
        ret = encoder.encode(input);
    } else {
        throw new Error(ERROR_MSG_INPUT);
    }
    return ret;
}
function toHex5(bytes) {
    return Array.prototype.map.call(bytes, function(n) {
        return (n < 16 ? "0" : "") + n.toString(16);
    }).join("");
}
function uint32ToHex(val) {
    return (4294967296 + val).toString(16).substring(1);
}
function debugPrint(label, arr, size) {
    let msg = "\n" + label + " = ";
    for(let i = 0; i < arr.length; i += 2){
        if (size === 32) {
            msg += uint32ToHex(arr[i]).toUpperCase();
            msg += " ";
            msg += uint32ToHex(arr[i + 1]).toUpperCase();
        } else if (size === 64) {
            msg += uint32ToHex(arr[i + 1]).toUpperCase();
            msg += uint32ToHex(arr[i]).toUpperCase();
        } else throw new Error("Invalid size " + size);
        if (i % 6 === 4) {
            msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i < arr.length - 2) {
            msg += " ";
        }
    }
    console.log(msg);
}
function testSpeed(hashFn, N, M) {
    let startMs = new Date().getTime();
    const input = new Uint8Array(N);
    for(let i = 0; i < N; i++){
        input[i] = i % 256;
    }
    const genMs = new Date().getTime();
    console.log("Generated random input in " + (genMs - startMs) + "ms");
    startMs = genMs;
    for(let i = 0; i < M; i++){
        const hashHex = hashFn(input);
        const hashMs = new Date().getTime();
        const ms = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(Math.round(N / (1 << 20) / (ms / 1e3) * 100) / 100 + " MB PER SECOND");
    }
}
var util = {
    normalizeInput,
    toHex: toHex5,
    debugPrint,
    testSpeed
};
function ADD64AA(v2, a, b) {
    const o0 = v2[a] + v2[b];
    let o1 = v2[a + 1] + v2[b + 1];
    if (o0 >= 4294967296) {
        o1++;
    }
    v2[a] = o0;
    v2[a + 1] = o1;
}
function ADD64AC(v2, a, b0, b1) {
    let o0 = v2[a] + b0;
    if (b0 < 0) {
        o0 += 4294967296;
    }
    let o1 = v2[a + 1] + b1;
    if (o0 >= 4294967296) {
        o1++;
    }
    v2[a] = o0;
    v2[a + 1] = o1;
}
function B2B_GET32(arr, i) {
    return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;
}
function B2B_G(a, b, c, d, ix, iy) {
    const x0 = m[ix];
    const x1 = m[ix + 1];
    const y0 = m[iy];
    const y1 = m[iy + 1];
    ADD64AA(v, a, b);
    ADD64AC(v, a, x0, x1);
    let xor0 = v[d] ^ v[a];
    let xor1 = v[d + 1] ^ v[a + 1];
    v[d] = xor1;
    v[d + 1] = xor0;
    ADD64AA(v, c, d);
    xor0 = v[b] ^ v[c];
    xor1 = v[b + 1] ^ v[c + 1];
    v[b] = xor0 >>> 24 ^ xor1 << 8;
    v[b + 1] = xor1 >>> 24 ^ xor0 << 8;
    ADD64AA(v, a, b);
    ADD64AC(v, a, y0, y1);
    xor0 = v[d] ^ v[a];
    xor1 = v[d + 1] ^ v[a + 1];
    v[d] = xor0 >>> 16 ^ xor1 << 16;
    v[d + 1] = xor1 >>> 16 ^ xor0 << 16;
    ADD64AA(v, c, d);
    xor0 = v[b] ^ v[c];
    xor1 = v[b + 1] ^ v[c + 1];
    v[b] = xor1 >>> 31 ^ xor0 << 1;
    v[b + 1] = xor0 >>> 31 ^ xor1 << 1;
}
const BLAKE2B_IV32 = new Uint32Array([
    4089235720,
    1779033703,
    2227873595,
    3144134277,
    4271175723,
    1013904242,
    1595750129,
    2773480762,
    2917565137,
    1359893119,
    725511199,
    2600822924,
    4215389547,
    528734635,
    327033209,
    1541459225
]);
const SIGMA8 = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3
];
const SIGMA82 = new Uint8Array(SIGMA8.map(function(x) {
    return x * 2;
}));
const v = new Uint32Array(32);
const m = new Uint32Array(32);
function blake2bCompress(ctx, last) {
    let i = 0;
    for(i = 0; i < 16; i++){
        v[i] = ctx.h[i];
        v[i + 16] = BLAKE2B_IV32[i];
    }
    v[24] = v[24] ^ ctx.t;
    v[25] = v[25] ^ ctx.t / 4294967296;
    if (last) {
        v[28] = ~v[28];
        v[29] = ~v[29];
    }
    for(i = 0; i < 32; i++){
        m[i] = B2B_GET32(ctx.b, 4 * i);
    }
    for(i = 0; i < 12; i++){
        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
    }
    for(i = 0; i < 16; i++){
        ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
    }
}
const parameterBlock = new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
]);
function blake2bInit(outlen, key, salt, personal) {
    if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
    }
    if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
    }
    if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
    }
    if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
    }
    const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        c: 0,
        outlen
    };
    parameterBlock.fill(0);
    parameterBlock[0] = outlen;
    if (key) parameterBlock[1] = key.length;
    parameterBlock[2] = 1;
    parameterBlock[3] = 1;
    if (salt) parameterBlock.set(salt, 32);
    if (personal) parameterBlock.set(personal, 48);
    for(let i = 0; i < 16; i++){
        ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4);
    }
    if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
    }
    return ctx;
}
function blake2bUpdate(ctx, input) {
    for(let i = 0; i < input.length; i++){
        if (ctx.c === 128) {
            ctx.t += ctx.c;
            blake2bCompress(ctx, false);
            ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i];
    }
}
function blake2bFinal(ctx) {
    ctx.t += ctx.c;
    while(ctx.c < 128){
        ctx.b[ctx.c++] = 0;
    }
    blake2bCompress(ctx, true);
    const out = new Uint8Array(ctx.outlen);
    for(let i = 0; i < ctx.outlen; i++){
        out[i] = ctx.h[i >> 2] >> 8 * (i & 3);
    }
    return out;
}
function blake2b(input, key, outlen, salt, personal) {
    outlen = outlen || 64;
    input = util.normalizeInput(input);
    if (salt) {
        salt = util.normalizeInput(salt);
    }
    if (personal) {
        personal = util.normalizeInput(personal);
    }
    const ctx = blake2bInit(outlen, key, salt, personal);
    blake2bUpdate(ctx, input);
    return blake2bFinal(ctx);
}
function blake2bHex(input, key, outlen, salt, personal) {
    const output = blake2b(input, key, outlen, salt, personal);
    return util.toHex(output);
}
var blake2b_1 = {
    blake2b,
    blake2bHex,
    blake2bInit,
    blake2bUpdate,
    blake2bFinal
};
function B2S_GET32(v2, i) {
    return v2[i] ^ v2[i + 1] << 8 ^ v2[i + 2] << 16 ^ v2[i + 3] << 24;
}
function B2S_G(a, b, c, d, x, y) {
    v$1[a] = v$1[a] + v$1[b] + x;
    v$1[d] = ROTR32(v$1[d] ^ v$1[a], 16);
    v$1[c] = v$1[c] + v$1[d];
    v$1[b] = ROTR32(v$1[b] ^ v$1[c], 12);
    v$1[a] = v$1[a] + v$1[b] + y;
    v$1[d] = ROTR32(v$1[d] ^ v$1[a], 8);
    v$1[c] = v$1[c] + v$1[d];
    v$1[b] = ROTR32(v$1[b] ^ v$1[c], 7);
}
function ROTR32(x, y) {
    return x >>> y ^ x << 32 - y;
}
const BLAKE2S_IV = new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
]);
const SIGMA = new Uint8Array([
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0
]);
const v$1 = new Uint32Array(16);
const m$1 = new Uint32Array(16);
function blake2sCompress(ctx, last) {
    let i = 0;
    for(i = 0; i < 8; i++){
        v$1[i] = ctx.h[i];
        v$1[i + 8] = BLAKE2S_IV[i];
    }
    v$1[12] ^= ctx.t;
    v$1[13] ^= ctx.t / 4294967296;
    if (last) {
        v$1[14] = ~v$1[14];
    }
    for(i = 0; i < 16; i++){
        m$1[i] = B2S_GET32(ctx.b, 4 * i);
    }
    for(i = 0; i < 10; i++){
        B2S_G(0, 4, 8, 12, m$1[SIGMA[i * 16 + 0]], m$1[SIGMA[i * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m$1[SIGMA[i * 16 + 2]], m$1[SIGMA[i * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m$1[SIGMA[i * 16 + 4]], m$1[SIGMA[i * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m$1[SIGMA[i * 16 + 6]], m$1[SIGMA[i * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m$1[SIGMA[i * 16 + 8]], m$1[SIGMA[i * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m$1[SIGMA[i * 16 + 10]], m$1[SIGMA[i * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m$1[SIGMA[i * 16 + 12]], m$1[SIGMA[i * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m$1[SIGMA[i * 16 + 14]], m$1[SIGMA[i * 16 + 15]]);
    }
    for(i = 0; i < 8; i++){
        ctx.h[i] ^= v$1[i] ^ v$1[i + 8];
    }
}
function blake2sInit(outlen, key) {
    if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
    }
    const keylen = key ? key.length : 0;
    if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
    }
    const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        b: new Uint8Array(64),
        c: 0,
        t: 0,
        outlen
    };
    ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
    if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
    }
    return ctx;
}
function blake2sUpdate(ctx, input) {
    for(let i = 0; i < input.length; i++){
        if (ctx.c === 64) {
            ctx.t += ctx.c;
            blake2sCompress(ctx, false);
            ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i];
    }
}
function blake2sFinal(ctx) {
    ctx.t += ctx.c;
    while(ctx.c < 64){
        ctx.b[ctx.c++] = 0;
    }
    blake2sCompress(ctx, true);
    const out = new Uint8Array(ctx.outlen);
    for(let i = 0; i < ctx.outlen; i++){
        out[i] = ctx.h[i >> 2] >> 8 * (i & 3) & 255;
    }
    return out;
}
function blake2s(input, key, outlen) {
    outlen = outlen || 32;
    input = util.normalizeInput(input);
    const ctx = blake2sInit(outlen, key);
    blake2sUpdate(ctx, input);
    return blake2sFinal(ctx);
}
function blake2sHex(input, key, outlen) {
    const output = blake2s(input, key, outlen);
    return util.toHex(output);
}
var blake2s_1 = {
    blake2s,
    blake2sHex,
    blake2sInit,
    blake2sUpdate,
    blake2sFinal
};
var blakejs = {
    blake2b: blake2b_1.blake2b,
    blake2bHex: blake2b_1.blake2bHex,
    blake2bInit: blake2b_1.blake2bInit,
    blake2bUpdate: blake2b_1.blake2bUpdate,
    blake2bFinal: blake2b_1.blake2bFinal,
    blake2s: blake2s_1.blake2s,
    blake2sHex: blake2s_1.blake2sHex,
    blake2sInit: blake2s_1.blake2sInit,
    blake2sUpdate: blake2s_1.blake2sUpdate,
    blake2sFinal: blake2s_1.blake2sFinal
};
blakejs.blake2b;
function base3(ALPHABET, name) {
    if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for(var j = 0; j < BASE_MAP.length; j++){
        BASE_MAP[j] = 255;
    }
    for(var i = 0; i < ALPHABET.length; i++){
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode2(source) {
        if (source instanceof Uint8Array) ;
        else if (ArrayBuffer.isView(source)) {
            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
            source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
            throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
            return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while(pbegin !== pend){
            var carry = source[pbegin];
            var i2 = 0;
            for(var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
                throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
        }
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0){
            it2++;
        }
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2){
            str += ALPHABET.charAt(b58[it2]);
        }
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") {
            throw new TypeError("Expected String");
        }
        if (source.length === 0) {
            return new Uint8Array();
        }
        var psz = 0;
        if (source[psz] === " ") {
            return;
        }
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while(source[psz]){
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
                return;
            }
            var i2 = 0;
            for(var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
                throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
        }
        if (source[psz] === " ") {
            return;
        }
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0){
            it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j2 = zeroes;
        while(it4 !== size){
            vch[j2++] = b256[it4++];
        }
        return vch;
    }
    function decode2(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
            return buffer;
        }
        throw new Error(`Non-${name} character`);
    }
    return {
        encode: encode2,
        decodeUnsafe,
        decode: decode2
    };
}
var src2 = base3;
var _brrp__multiformats_scope_baseX2 = src2;
class Encoder2 {
    constructor(name, prefix, baseEncode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
    }
    encode(bytes) {
        if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
        } else {
            throw Error("Unknown type, must be binary type");
        }
    }
}
class Decoder2 {
    constructor(name, prefix, baseDecode){
        this.name = name;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
        }
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
    }
    decode(text) {
        if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
        } else {
            throw Error("Can only multibase decode strings");
        }
    }
    or(decoder) {
        return or2(this, decoder);
    }
}
class ComposedDecoder2 {
    constructor(decoders){
        this.decoders = decoders;
    }
    or(decoder) {
        return or2(this, decoder);
    }
    decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder) {
            return decoder.decode(input);
        } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
        }
    }
}
const or2 = (left, right)=>new ComposedDecoder2({
        ...left.decoders || {
            [left.prefix]: left
        },
        ...right.decoders || {
            [right.prefix]: right
        }
    });
class Codec2 {
    constructor(name, prefix, baseEncode, baseDecode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder2(name, prefix, baseEncode);
        this.decoder = new Decoder2(name, prefix, baseDecode);
    }
    encode(input) {
        return this.encoder.encode(input);
    }
    decode(input) {
        return this.decoder.decode(input);
    }
}
const from4 = ({ name, prefix, encode: encode2, decode: decode2 })=>new Codec2(name, prefix, encode2, decode2);
const baseX2 = ({ prefix, name, alphabet })=>{
    const { encode: encode2, decode: decode2 } = _brrp__multiformats_scope_baseX2(alphabet, name);
    return from4({
        prefix,
        name,
        encode: encode2,
        decode: (text)=>coerce1(decode2(text))
    });
};
const decode12 = (string, alphabet, bitsPerChar, name)=>{
    const codes = {};
    for(let i = 0; i < alphabet.length; ++i){
        codes[alphabet[i]] = i;
    }
    let end = string.length;
    while(string[end - 1] === "="){
        --end;
    }
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer = 0;
    let written = 0;
    for(let i = 0; i < end; ++i){
        const value = codes[string[i]];
        if (value === void 0) {
            throw new SyntaxError(`Non-${name} character`);
        }
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer >> bits;
        }
    }
    if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
        throw new SyntaxError("Unexpected end of data");
    }
    return out;
};
const encode11 = (data, alphabet, bitsPerChar)=>{
    const pad = alphabet[alphabet.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer = 0;
    for(let i = 0; i < data.length; ++i){
        buffer = buffer << 8 | data[i];
        bits += 8;
        while(bits > bitsPerChar){
            bits -= bitsPerChar;
            out += alphabet[mask & buffer >> bits];
        }
    }
    if (bits) {
        out += alphabet[mask & buffer << bitsPerChar - bits];
    }
    if (pad) {
        while(out.length * bitsPerChar & 7){
            out += "=";
        }
    }
    return out;
};
const rfc46482 = ({ name, prefix, bitsPerChar, alphabet })=>{
    return from4({
        prefix,
        name,
        encode (input) {
            return encode11(input, alphabet, bitsPerChar);
        },
        decode (input) {
            return decode12(input, alphabet, bitsPerChar, name);
        }
    });
};
const base58btc2 = baseX2({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
const base58flickr2 = baseX2({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});
var base58 = Object.freeze({
    __proto__: null,
    base58btc: base58btc2,
    base58flickr: base58flickr2
});
const base322 = rfc46482({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5
});
const base32upper2 = rfc46482({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5
});
const base32pad2 = rfc46482({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5
});
const base32padupper2 = rfc46482({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5
});
const base32hex2 = rfc46482({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5
});
const base32hexupper2 = rfc46482({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5
});
const base32hexpad2 = rfc46482({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5
});
const base32hexpadupper2 = rfc46482({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5
});
const base32z2 = rfc46482({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5
});
var base32$1 = Object.freeze({
    __proto__: null,
    base32: base322,
    base32upper: base32upper2,
    base32pad: base32pad2,
    base32padupper: base32padupper2,
    base32hex: base32hex2,
    base32hexupper: base32hexupper2,
    base32hexpad: base32hexpad2,
    base32hexpadupper: base32hexpadupper2,
    base32z: base32z2
});
class CID2 {
    constructor(version2, code, multihash, bytes){
        this.code = code;
        this.version = version2;
        this.multihash = multihash;
        this.bytes = bytes;
        this.byteOffset = bytes.byteOffset;
        this.byteLength = bytes.byteLength;
        this.asCID = this;
        this._baseCache = new Map();
        Object.defineProperties(this, {
            byteOffset: hidden1,
            byteLength: hidden1,
            code: readonly1,
            version: readonly1,
            multihash: readonly1,
            bytes: readonly1,
            _baseCache: hidden1,
            asCID: hidden1
        });
    }
    toV0() {
        switch(this.version){
            case 0:
                {
                    return this;
                }
            default:
                {
                    const { code, multihash } = this;
                    if (code !== DAG_PB_CODE2) {
                        throw new Error("Cannot convert a non dag-pb CID to CIDv0");
                    }
                    if (multihash.code !== SHA_256_CODE2) {
                        throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
                    }
                    return CID2.createV0(multihash);
                }
        }
    }
    toV1() {
        switch(this.version){
            case 0:
                {
                    const { code, digest: digest$1 } = this.multihash;
                    const multihash = create1(code, digest$1);
                    return CID2.createV1(this.code, multihash);
                }
            case 1:
                {
                    return this;
                }
            default:
                {
                    throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
                }
        }
    }
    equals(other) {
        return other && this.code === other.code && this.version === other.version && equals3(this.multihash, other.multihash);
    }
    toString(base) {
        const { bytes, version: version2, _baseCache } = this;
        switch(version2){
            case 0:
                return toStringV02(bytes, _baseCache, base || base58btc2.encoder);
            default:
                return toStringV12(bytes, _baseCache, base || base322.encoder);
        }
    }
    toJSON() {
        return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
        };
    }
    get [Symbol.toStringTag]() {
        return "CID";
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        return "CID(" + this.toString() + ")";
    }
    static isCID(value) {
        deprecate1(/^0\.0/, IS_CID_DEPRECATION1);
        return !!(value && (value[cidSymbol2] || value.asCID === value));
    }
    get toBaseEncodedString() {
        throw new Error("Deprecated, use .toString()");
    }
    get codec() {
        throw new Error('"codec" property is deprecated, use integer "code" property instead');
    }
    get buffer() {
        throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
    }
    get multibaseName() {
        throw new Error('"multibaseName" property is deprecated');
    }
    get prefix() {
        throw new Error('"prefix" property is deprecated');
    }
    static asCID(value) {
        if (value instanceof CID2) {
            return value;
        } else if (value != null && value.asCID === value) {
            const { version: version2, code, multihash, bytes } = value;
            return new CID2(version2, code, multihash, bytes || encodeCID2(version2, code, multihash.bytes));
        } else if (value != null && value[cidSymbol2] === true) {
            const { version: version2, multihash, code } = value;
            const digest$1 = decode$21(multihash);
            return CID2.create(version2, code, digest$1);
        } else {
            return null;
        }
    }
    static create(version2, code, digest) {
        if (typeof code !== "number") {
            throw new Error("String codecs are no longer supported");
        }
        switch(version2){
            case 0:
                {
                    if (code !== DAG_PB_CODE2) {
                        throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE2}) block encoding`);
                    } else {
                        return new CID2(version2, code, digest, digest.bytes);
                    }
                }
            case 1:
                {
                    const bytes = encodeCID2(version2, code, digest.bytes);
                    return new CID2(version2, code, digest, bytes);
                }
            default:
                {
                    throw new Error("Invalid version");
                }
        }
    }
    static createV0(digest) {
        return CID2.create(0, DAG_PB_CODE2, digest);
    }
    static createV1(code, digest) {
        return CID2.create(1, code, digest);
    }
    static decode(bytes) {
        const [cid, remainder] = CID2.decodeFirst(bytes);
        if (remainder.length) {
            throw new Error("Incorrect length");
        }
        return cid;
    }
    static decodeFirst(bytes) {
        const specs = CID2.inspectBytes(bytes);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = coerce1(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
        }
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest$1 = new Digest1(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid = specs.version === 0 ? CID2.createV0(digest$1) : CID2.createV1(specs.codec, digest$1);
        return [
            cid,
            bytes.subarray(specs.size)
        ];
    }
    static inspectBytes(initialBytes) {
        let offset = 0;
        const next = ()=>{
            const [i, length] = decode$11(initialBytes.subarray(offset));
            offset += length;
            return i;
        };
        let version2 = next();
        let codec = DAG_PB_CODE2;
        if (version2 === 18) {
            version2 = 0;
            offset = 0;
        } else if (version2 === 1) {
            codec = next();
        }
        if (version2 !== 0 && version2 !== 1) {
            throw new RangeError(`Invalid CID version ${version2}`);
        }
        const prefixSize = offset;
        const multihashCode = next();
        const digestSize = next();
        const size = offset + digestSize;
        const multihashSize = size - prefixSize;
        return {
            version: version2,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
        };
    }
    static parse(source, base) {
        const [prefix, bytes] = parseCIDtoBytes2(source, base);
        const cid = CID2.decode(bytes);
        cid._baseCache.set(prefix, source);
        return cid;
    }
}
const parseCIDtoBytes2 = (source, base)=>{
    switch(source[0]){
        case "Q":
            {
                const decoder = base || base58btc2;
                return [
                    base58btc2.prefix,
                    decoder.decode(`${base58btc2.prefix}${source}`)
                ];
            }
        case base58btc2.prefix:
            {
                const decoder = base || base58btc2;
                return [
                    base58btc2.prefix,
                    decoder.decode(source)
                ];
            }
        case base322.prefix:
            {
                const decoder = base || base322;
                return [
                    base322.prefix,
                    decoder.decode(source)
                ];
            }
        default:
            {
                if (base == null) {
                    throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
                }
                return [
                    source[0],
                    base.decode(source)
                ];
            }
    }
};
const toStringV02 = (bytes, cache, base)=>{
    const { prefix } = base;
    if (prefix !== base58btc2.prefix) {
        throw Error(`Cannot string encode V0 in ${base.name} encoding`);
    }
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid2 = base.encode(bytes).slice(1);
        cache.set(prefix, cid2);
        return cid2;
    } else {
        return cid;
    }
};
const toStringV12 = (bytes, cache, base)=>{
    const { prefix } = base;
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid2 = base.encode(bytes);
        cache.set(prefix, cid2);
        return cid2;
    } else {
        return cid;
    }
};
const DAG_PB_CODE2 = 112;
const SHA_256_CODE2 = 18;
const encodeCID2 = (version2, code, multihash)=>{
    const codeOffset = encodingLength1(version2);
    const hashOffset = codeOffset + encodingLength1(code);
    const bytes = new Uint8Array(hashOffset + multihash.byteLength);
    encodeTo1(version2, bytes, 0);
    encodeTo1(code, bytes, codeOffset);
    bytes.set(multihash, hashOffset);
    return bytes;
};
const cidSymbol2 = Symbol.for("@ipld/js-cid/CID");
const readonly1 = {
    writable: false,
    configurable: false,
    enumerable: true
};
const hidden1 = {
    writable: false,
    enumerable: false,
    configurable: false
};
const version28 = "0.0.0-dev";
const deprecate1 = (range, message)=>{
    if (range.test(version28)) {
        console.warn(message);
    } else {
        throw new Error(message);
    }
};
const IS_CID_DEPRECATION1 = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
const { blake2b: blake2b1 } = blakejs;
const blake2b8 = from1({
    name: "blake2b-8",
    code: 45569,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 1))
});
const blake2b16 = from1({
    name: "blake2b-16",
    code: 45570,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 2))
});
const blake2b24 = from1({
    name: "blake2b-24",
    code: 45571,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 3))
});
const blake2b32 = from1({
    name: "blake2b-32",
    code: 45572,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 4))
});
const blake2b40 = from1({
    name: "blake2b-40",
    code: 45573,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 5))
});
const blake2b48 = from1({
    name: "blake2b-48",
    code: 45574,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 6))
});
const blake2b56 = from1({
    name: "blake2b-56",
    code: 45575,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 7))
});
const blake2b64 = from1({
    name: "blake2b-64",
    code: 45576,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 8))
});
const blake2b72 = from1({
    name: "blake2b-72",
    code: 45577,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 9))
});
const blake2b80 = from1({
    name: "blake2b-80",
    code: 45578,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 10))
});
const blake2b88 = from1({
    name: "blake2b-88",
    code: 45579,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 11))
});
const blake2b96 = from1({
    name: "blake2b-96",
    code: 45580,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 12))
});
const blake2b104 = from1({
    name: "blake2b-104",
    code: 45581,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 13))
});
const blake2b112 = from1({
    name: "blake2b-112",
    code: 45582,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 14))
});
const blake2b120 = from1({
    name: "blake2b-120",
    code: 45583,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 15))
});
const blake2b128 = from1({
    name: "blake2b-128",
    code: 45584,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 16))
});
const blake2b136 = from1({
    name: "blake2b-136",
    code: 45585,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 17))
});
const blake2b144 = from1({
    name: "blake2b-144",
    code: 45586,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 18))
});
const blake2b152 = from1({
    name: "blake2b-152",
    code: 45587,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 19))
});
const blake2b160 = from1({
    name: "blake2b-160",
    code: 45588,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 20))
});
const blake2b168 = from1({
    name: "blake2b-168",
    code: 45589,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 21))
});
const blake2b176 = from1({
    name: "blake2b-176",
    code: 45590,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 22))
});
const blake2b184 = from1({
    name: "blake2b-184",
    code: 45591,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 23))
});
const blake2b192 = from1({
    name: "blake2b-192",
    code: 45592,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 24))
});
const blake2b200 = from1({
    name: "blake2b-200",
    code: 45593,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 25))
});
const blake2b208 = from1({
    name: "blake2b-208",
    code: 45594,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 26))
});
const blake2b216 = from1({
    name: "blake2b-216",
    code: 45595,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 27))
});
const blake2b224 = from1({
    name: "blake2b-224",
    code: 45596,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 28))
});
const blake2b232 = from1({
    name: "blake2b-232",
    code: 45597,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 29))
});
const blake2b240 = from1({
    name: "blake2b-240",
    code: 45598,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 30))
});
const blake2b248 = from1({
    name: "blake2b-248",
    code: 45599,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 31))
});
const blake2b256 = from1({
    name: "blake2b-256",
    code: 45600,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 32))
});
const blake2b264 = from1({
    name: "blake2b-264",
    code: 45601,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 33))
});
const blake2b272 = from1({
    name: "blake2b-272",
    code: 45602,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 34))
});
const blake2b280 = from1({
    name: "blake2b-280",
    code: 45603,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 35))
});
const blake2b288 = from1({
    name: "blake2b-288",
    code: 45604,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 36))
});
const blake2b296 = from1({
    name: "blake2b-296",
    code: 45605,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 37))
});
const blake2b304 = from1({
    name: "blake2b-304",
    code: 45606,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 38))
});
const blake2b312 = from1({
    name: "blake2b-312",
    code: 45607,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 39))
});
const blake2b320 = from1({
    name: "blake2b-320",
    code: 45608,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 40))
});
const blake2b328 = from1({
    name: "blake2b-328",
    code: 45609,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 41))
});
const blake2b336 = from1({
    name: "blake2b-336",
    code: 45610,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 42))
});
const blake2b344 = from1({
    name: "blake2b-344",
    code: 45611,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 43))
});
const blake2b352 = from1({
    name: "blake2b-352",
    code: 45612,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 44))
});
const blake2b360 = from1({
    name: "blake2b-360",
    code: 45613,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 45))
});
const blake2b368 = from1({
    name: "blake2b-368",
    code: 45614,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 46))
});
const blake2b376 = from1({
    name: "blake2b-376",
    code: 45615,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 47))
});
const blake2b384 = from1({
    name: "blake2b-384",
    code: 45616,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 48))
});
const blake2b392 = from1({
    name: "blake2b-392",
    code: 45617,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 49))
});
const blake2b400 = from1({
    name: "blake2b-400",
    code: 45618,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 50))
});
const blake2b408 = from1({
    name: "blake2b-408",
    code: 45619,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 51))
});
const blake2b416 = from1({
    name: "blake2b-416",
    code: 45620,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 52))
});
const blake2b424 = from1({
    name: "blake2b-424",
    code: 45621,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 53))
});
const blake2b432 = from1({
    name: "blake2b-432",
    code: 45622,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 54))
});
const blake2b440 = from1({
    name: "blake2b-440",
    code: 45623,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 55))
});
const blake2b448 = from1({
    name: "blake2b-448",
    code: 45624,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 56))
});
const blake2b456 = from1({
    name: "blake2b-456",
    code: 45625,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 57))
});
const blake2b464 = from1({
    name: "blake2b-464",
    code: 45626,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 58))
});
const blake2b472 = from1({
    name: "blake2b-472",
    code: 45627,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 59))
});
const blake2b480 = from1({
    name: "blake2b-480",
    code: 45628,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 60))
});
const blake2b488 = from1({
    name: "blake2b-488",
    code: 45629,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 61))
});
const blake2b496 = from1({
    name: "blake2b-496",
    code: 45630,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 62))
});
const blake2b504 = from1({
    name: "blake2b-504",
    code: 45631,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 63))
});
const blake2b512 = from1({
    name: "blake2b-512",
    code: 45632,
    encode: (input)=>bytes.coerce(blake2b1(input, void 0, 64))
});
Object.freeze({
    __proto__: null,
    blake2b8,
    blake2b16,
    blake2b24,
    blake2b32,
    blake2b40,
    blake2b48,
    blake2b56,
    blake2b64,
    blake2b72,
    blake2b80,
    blake2b88,
    blake2b96,
    blake2b104,
    blake2b112,
    blake2b120,
    blake2b128,
    blake2b136,
    blake2b144,
    blake2b152,
    blake2b160,
    blake2b168,
    blake2b176,
    blake2b184,
    blake2b192,
    blake2b200,
    blake2b208,
    blake2b216,
    blake2b224,
    blake2b232,
    blake2b240,
    blake2b248,
    blake2b256,
    blake2b264,
    blake2b272,
    blake2b280,
    blake2b288,
    blake2b296,
    blake2b304,
    blake2b312,
    blake2b320,
    blake2b328,
    blake2b336,
    blake2b344,
    blake2b352,
    blake2b360,
    blake2b368,
    blake2b376,
    blake2b384,
    blake2b392,
    blake2b400,
    blake2b408,
    blake2b416,
    blake2b424,
    blake2b432,
    blake2b440,
    blake2b448,
    blake2b456,
    blake2b464,
    blake2b472,
    blake2b480,
    blake2b488,
    blake2b496,
    blake2b504,
    blake2b512
});
const { blake2s: blake2s1 } = blakejs;
const blake2s8 = from1({
    name: "blake2s-8",
    code: 45633,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 1))
});
const blake2s16 = from1({
    name: "blake2s-16",
    code: 45634,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 2))
});
const blake2s24 = from1({
    name: "blake2s-24",
    code: 45635,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 3))
});
const blake2s32 = from1({
    name: "blake2s-32",
    code: 45636,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 4))
});
const blake2s40 = from1({
    name: "blake2s-40",
    code: 45637,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 5))
});
const blake2s48 = from1({
    name: "blake2s-48",
    code: 45638,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 6))
});
const blake2s56 = from1({
    name: "blake2s-56",
    code: 45639,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 7))
});
const blake2s64 = from1({
    name: "blake2s-64",
    code: 45640,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 8))
});
const blake2s72 = from1({
    name: "blake2s-72",
    code: 45641,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 9))
});
const blake2s80 = from1({
    name: "blake2s-80",
    code: 45642,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 10))
});
const blake2s88 = from1({
    name: "blake2s-88",
    code: 45643,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 11))
});
const blake2s96 = from1({
    name: "blake2s-96",
    code: 45644,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 12))
});
const blake2s104 = from1({
    name: "blake2s-104",
    code: 45645,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 13))
});
const blake2s112 = from1({
    name: "blake2s-112",
    code: 45646,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 14))
});
const blake2s120 = from1({
    name: "blake2s-120",
    code: 45647,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 15))
});
const blake2s128 = from1({
    name: "blake2s-128",
    code: 45648,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 16))
});
const blake2s136 = from1({
    name: "blake2s-136",
    code: 45649,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 17))
});
const blake2s144 = from1({
    name: "blake2s-144",
    code: 45650,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 18))
});
const blake2s152 = from1({
    name: "blake2s-152",
    code: 45651,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 19))
});
const blake2s160 = from1({
    name: "blake2s-160",
    code: 45652,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 20))
});
const blake2s168 = from1({
    name: "blake2s-168",
    code: 45653,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 21))
});
const blake2s176 = from1({
    name: "blake2s-176",
    code: 45654,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 22))
});
const blake2s184 = from1({
    name: "blake2s-184",
    code: 45655,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 23))
});
const blake2s192 = from1({
    name: "blake2s-192",
    code: 45656,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 24))
});
const blake2s200 = from1({
    name: "blake2s-200",
    code: 45657,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 25))
});
const blake2s208 = from1({
    name: "blake2s-208",
    code: 45658,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 26))
});
const blake2s216 = from1({
    name: "blake2s-216",
    code: 45659,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 27))
});
const blake2s224 = from1({
    name: "blake2s-224",
    code: 45660,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 28))
});
const blake2s232 = from1({
    name: "blake2s-232",
    code: 45661,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 29))
});
const blake2s240 = from1({
    name: "blake2s-240",
    code: 45662,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 30))
});
const blake2s248 = from1({
    name: "blake2s-248",
    code: 45663,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 31))
});
const blake2s256 = from1({
    name: "blake2s-256",
    code: 45664,
    encode: (input)=>bytes.coerce(blake2s1(input, void 0, 32))
});
Object.freeze({
    __proto__: null,
    blake2s8,
    blake2s16,
    blake2s24,
    blake2s32,
    blake2s40,
    blake2s48,
    blake2s56,
    blake2s64,
    blake2s72,
    blake2s80,
    blake2s88,
    blake2s96,
    blake2s104,
    blake2s112,
    blake2s120,
    blake2s128,
    blake2s136,
    blake2s144,
    blake2s152,
    blake2s160,
    blake2s168,
    blake2s176,
    blake2s184,
    blake2s192,
    blake2s200,
    blake2s208,
    blake2s216,
    blake2s224,
    blake2s232,
    blake2s240,
    blake2s248,
    blake2s256
});
function encoder1(fn) {
    return (b)=>new Uint8Array(fn.array(b));
}
const sha3224 = from1({
    code: 23,
    name: "sha3-224",
    encode: encoder1(sha3.sha3_224)
});
const sha3256 = from1({
    code: 22,
    name: "sha3-256",
    encode: encoder1(sha3.sha3_256)
});
const sha3384 = from1({
    code: 21,
    name: "sha3-384",
    encode: encoder1(sha3.sha3_384)
});
const sha3512 = from1({
    code: 20,
    name: "sha3-512",
    encode: encoder1(sha3.sha3_512)
});
const shake128 = from1({
    code: 24,
    name: "shake-128",
    encode: (b)=>new Uint8Array(sha3.shake128.array(b, 256))
});
const shake256 = from1({
    code: 25,
    name: "shake-256",
    encode: (b)=>new Uint8Array(sha3.shake256.array(b, 512))
});
const keccak224 = from1({
    code: 26,
    name: "keccak-224",
    encode: encoder1(sha3.keccak224)
});
const keccak2561 = from1({
    code: 27,
    name: "keccak-256",
    encode: encoder1(sha3.keccak256)
});
const keccak384 = from1({
    code: 28,
    name: "keccak-384",
    encode: encoder1(sha3.keccak384)
});
const keccak512 = from1({
    code: 29,
    name: "keccak-512",
    encode: encoder1(sha3.keccak512)
});
function asUint8Array(buf) {
    if (globalThis.Buffer != null) {
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    }
    return buf;
}
function allocUnsafe(size = 0) {
    if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
        return asUint8Array(globalThis.Buffer.allocUnsafe(size));
    }
    return new Uint8Array(size);
}
const identity = from4({
    prefix: "\0",
    name: "identity",
    encode: (buf)=>toString2(buf),
    decode: (str)=>fromString2(str)
});
var identityBase = Object.freeze({
    __proto__: null,
    identity
});
const base21 = rfc46482({
    prefix: "0",
    name: "base2",
    alphabet: "01",
    bitsPerChar: 1
});
var base2$1 = Object.freeze({
    __proto__: null,
    base2: base21
});
const base8 = rfc46482({
    prefix: "7",
    name: "base8",
    alphabet: "01234567",
    bitsPerChar: 3
});
var base8$1 = Object.freeze({
    __proto__: null,
    base8
});
const base10 = baseX2({
    prefix: "9",
    name: "base10",
    alphabet: "0123456789"
});
var base10$1 = Object.freeze({
    __proto__: null,
    base10
});
const base16 = rfc46482({
    prefix: "f",
    name: "base16",
    alphabet: "0123456789abcdef",
    bitsPerChar: 4
});
const base16upper = rfc46482({
    prefix: "F",
    name: "base16upper",
    alphabet: "0123456789ABCDEF",
    bitsPerChar: 4
});
var base16$1 = Object.freeze({
    __proto__: null,
    base16,
    base16upper
});
const base36 = baseX2({
    prefix: "k",
    name: "base36",
    alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
const base36upper = baseX2({
    prefix: "K",
    name: "base36upper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});
var base36$1 = Object.freeze({
    __proto__: null,
    base36,
    base36upper
});
const base64 = rfc46482({
    prefix: "m",
    name: "base64",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    bitsPerChar: 6
});
const base64pad = rfc46482({
    prefix: "M",
    name: "base64pad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    bitsPerChar: 6
});
const base64url = rfc46482({
    prefix: "u",
    name: "base64url",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
    bitsPerChar: 6
});
const base64urlpad = rfc46482({
    prefix: "U",
    name: "base64urlpad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
    bitsPerChar: 6
});
var base64$1 = Object.freeze({
    __proto__: null,
    base64,
    base64pad,
    base64url,
    base64urlpad
});
const alphabet = Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}");
const alphabetBytesToChars = alphabet.reduce((p, c, i)=>{
    p[i] = c;
    return p;
}, []);
const alphabetCharsToBytes = alphabet.reduce((p, c, i)=>{
    p[c.codePointAt(0)] = i;
    return p;
}, []);
function encode12(data) {
    return data.reduce((p, c)=>{
        p += alphabetBytesToChars[c];
        return p;
    }, "");
}
function decode13(str) {
    const byts = [];
    for (const __char of str){
        const byt = alphabetCharsToBytes[__char.codePointAt(0)];
        if (byt === void 0) {
            throw new Error(`Non-base256emoji character: ${__char}`);
        }
        byts.push(byt);
    }
    return new Uint8Array(byts);
}
const base256emoji = from4({
    prefix: "\u{1F680}",
    name: "base256emoji",
    encode: encode12,
    decode: decode13
});
var base256emoji$1 = Object.freeze({
    __proto__: null,
    base256emoji
});
const name = "identity";
const digest = (input)=>create1(0, coerce1(input));
const identity1 = {
    code: 0,
    name,
    encode: coerce1,
    digest
};
var identity$1 = Object.freeze({
    __proto__: null,
    identity: identity1
});
const name1 = "raw";
const encode13 = (node)=>coerce1(node);
const decode14 = (data)=>coerce1(data);
Object.freeze({
    __proto__: null,
    name: name1,
    code: 85,
    encode: encode13,
    decode: decode14
});
const textEncoder1 = new TextEncoder();
const textDecoder2 = new TextDecoder();
const name2 = "json";
const encode14 = (node)=>textEncoder1.encode(JSON.stringify(node));
const decode15 = (data)=>JSON.parse(textDecoder2.decode(data));
Object.freeze({
    __proto__: null,
    name: name2,
    code: 512,
    encode: encode14,
    decode: decode15
});
const bases = {
    ...identityBase,
    ...base2$1,
    ...base8$1,
    ...base10$1,
    ...base16$1,
    ...base32$1,
    ...base36$1,
    ...base58,
    ...base64$1,
    ...base256emoji$1
};
({
    ...sha21,
    ...identity$1
});
function createCodec(name, prefix, encode, decode) {
    return {
        name,
        prefix,
        encoder: {
            name,
            prefix,
            encode
        },
        decoder: {
            decode
        }
    };
}
const string = createCodec("utf8", "u", (buf)=>{
    const decoder = new TextDecoder("utf8");
    return "u" + decoder.decode(buf);
}, (str)=>{
    const encoder = new TextEncoder();
    return encoder.encode(str.substring(1));
});
const ascii = createCodec("ascii", "a", (buf)=>{
    let string2 = "a";
    for(let i = 0; i < buf.length; i++){
        string2 += String.fromCharCode(buf[i]);
    }
    return string2;
}, (str)=>{
    str = str.substring(1);
    const buf = allocUnsafe(str.length);
    for(let i = 0; i < str.length; i++){
        buf[i] = str.charCodeAt(i);
    }
    return buf;
});
({
    utf8: string,
    "utf-8": string,
    hex: bases.base16,
    latin1: ascii,
    ascii,
    binary: ascii,
    ...bases
});
function equals6(a, b) {
    if (a === b) {
        return true;
    }
    if (a.byteLength !== b.byteLength) {
        return false;
    }
    for(let i = 0; i < a.byteLength; i++){
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}
const hashMap = new Map([
    sha2563,
    sha5122,
    murmur3128,
    murmur332,
    blake2b256,
    blake2s256,
    sha3224,
    sha3256,
    sha3384,
    sha3512,
    shake128,
    shake256,
    keccak224,
    keccak2561,
    keccak384,
    keccak512
].map((hash)=>[
        hash.code,
        hash
    ]));
class UnsupportedHashError extends Error {
    constructor(code){
        super(`multihash code ${code} is not supported`);
    }
}
class HashMismatchError extends Error {
    constructor(){
        super("CID hash does not match bytes");
    }
}
function validateBlock(block) {
    const hasher = hashMap.get(block.cid.multihash.code);
    if (!hasher) {
        throw new UnsupportedHashError(block.cid.multihash.code);
    }
    const result = hasher.digest(block.bytes);
    const compareDigests = (h)=>{
        if (!equals6(h.digest, block.cid.multihash.digest)) {
            throw new HashMismatchError();
        }
    };
    if (result instanceof Promise) {
        return result.then(compareDigests);
    }
    compareDigests(result);
}
const o = "object" == typeof globalThis && "crypto" in globalThis ? globalThis.crypto : void 0;
function t(t1, ...e) {
    if (!((s = t1) instanceof Uint8Array || null != s && "object" == typeof s && "Uint8Array" === s.constructor.name)) throw new Error("Uint8Array expected");
    var s;
    if (e.length > 0 && !e.includes(t1.length)) throw new Error(`Uint8Array expected of length ${e}, not of length=${t1.length}`);
}
function e(t, e = !0) {
    if (t.destroyed) throw new Error("Hash instance has been destroyed");
    if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
const s1 = (t)=>new DataView(t.buffer, t.byteOffset, t.byteLength), n = (t, e)=>t << 32 - e | t >>> e;
function i(e) {
    return "string" == typeof e && (e = function(t) {
        if ("string" != typeof t) throw new Error("utf8ToBytes expected string, got " + typeof t);
        return new Uint8Array((new TextEncoder).encode(t));
    }(e)), t(e), e;
}
new Uint8Array(new Uint32Array([
    287454020
]).buffer)[0];
class r2 {
    clone() {
        return this._cloneInto();
    }
}
function o1(t) {
    const e = (e)=>t().update(i(e)).digest(), s = t();
    return e.outputLen = s.outputLen, e.blockLen = s.blockLen, e.create = ()=>t(), e;
}
const h = (t, e, s)=>t & e ^ t & s ^ e & s;
class f1 extends r2 {
    constructor(t, e, n, i){
        super(), this.blockLen = t, this.outputLen = e, this.padOffset = n, this.isLE = i, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = s1(this.buffer);
    }
    update(t) {
        e(this);
        const { view: n, buffer: r, blockLen: o } = this, h = (t = i(t)).length;
        for(let e = 0; e < h;){
            const i = Math.min(o - this.pos, h - e);
            if (i !== o) r.set(t.subarray(e, e + i), this.pos), this.pos += i, e += i, this.pos === o && (this.process(n, 0), this.pos = 0);
            else {
                const n = s1(t);
                for(; o <= h - e; e += o)this.process(n, e);
            }
        }
        return this.length += t.length, this.roundClean(), this;
    }
    digestInto(n) {
        e(this), function(e, s) {
            t(e);
            const n = s.outputLen;
            if (e.length < n) throw new Error(`digestInto() expects output buffer of length at least ${n}`);
        }(n, this), this.finished = !0;
        const { buffer: i, view: r, blockLen: o, isLE: h } = this;
        let { pos: f } = this;
        i[f++] = 128, this.buffer.subarray(f).fill(0), this.padOffset > o - f && (this.process(r, 0), f = 0);
        for(let t = f; t < o; t++)i[t] = 0;
        !function(t, e, s, n) {
            if ("function" == typeof t.setBigUint64) return t.setBigUint64(e, s, n);
            const i = BigInt(32), r = BigInt(4294967295), o = Number(s >> i & r), h = Number(s & r), f = n ? 4 : 0, u = n ? 0 : 4;
            t.setUint32(e + f, o, n), t.setUint32(e + u, h, n);
        }(r, o - 8, BigInt(8 * this.length), h), this.process(r, 0);
        const u = s1(n), c = this.outputLen;
        if (c % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
        const l = c / 4, a = this.get();
        if (l > a.length) throw new Error("_sha2: outputLen bigger than state");
        for(let t = 0; t < l; t++)u.setUint32(4 * t, a[t], h);
    }
    digest() {
        const { buffer: t, outputLen: e } = this;
        this.digestInto(t);
        const s = t.slice(0, e);
        return this.destroy(), s;
    }
    _cloneInto(t) {
        t || (t = new this.constructor), t.set(...this.get());
        const { blockLen: e, buffer: s, length: n, finished: i, destroyed: r, pos: o } = this;
        return t.length = n, t.pos = o, t.finished = i, t.destroyed = r, n % e && t.buffer.set(s), t;
    }
}
const u = new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
]), c = new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
]), l = new Uint32Array(64);
class a extends f1 {
    constructor(){
        super(64, 32, 8, !1), this.A = 0 | c[0], this.B = 0 | c[1], this.C = 0 | c[2], this.D = 0 | c[3], this.E = 0 | c[4], this.F = 0 | c[5], this.G = 0 | c[6], this.H = 0 | c[7];
    }
    get() {
        const { A: t, B: e, C: s, D: n, E: i, F: r, G: o, H: h } = this;
        return [
            t,
            e,
            s,
            n,
            i,
            r,
            o,
            h
        ];
    }
    set(t, e, s, n, i, r, o, h) {
        this.A = 0 | t, this.B = 0 | e, this.C = 0 | s, this.D = 0 | n, this.E = 0 | i, this.F = 0 | r, this.G = 0 | o, this.H = 0 | h;
    }
    process(t, e) {
        for(let s = 0; s < 16; s++, e += 4)l[s] = t.getUint32(e, !1);
        for(let t = 16; t < 64; t++){
            const e = l[t - 15], s = l[t - 2], i = n(e, 7) ^ n(e, 18) ^ e >>> 3, r = n(s, 17) ^ n(s, 19) ^ s >>> 10;
            l[t] = r + l[t - 7] + i + l[t - 16] | 0;
        }
        let { A: s, B: i, C: r, D: o, E: f, F: c, G: a, H: p } = this;
        for(let t = 0; t < 64; t++){
            const e = p + (n(f, 6) ^ n(f, 11) ^ n(f, 25)) + ((d = f) & c ^ ~d & a) + u[t] + l[t] | 0, g = (n(s, 2) ^ n(s, 13) ^ n(s, 22)) + h(s, i, r) | 0;
            p = a, a = c, c = f, f = o + e | 0, o = r, r = i, i = s, s = e + g | 0;
        }
        var d;
        s = s + this.A | 0, i = i + this.B | 0, r = r + this.C | 0, o = o + this.D | 0, f = f + this.E | 0, c = c + this.F | 0, a = a + this.G | 0, p = p + this.H | 0, this.set(s, i, r, o, f, c, a, p);
    }
    roundClean() {
        l.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
    }
}
class p extends a {
    constructor(){
        super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
    }
}
const d = o1(()=>new a), g = o1(()=>new p);
68 === new Uint8Array(new Uint32Array([
    287454020
]).buffer)[0];
Array.from({
    length: 256
}, (t, e)=>e.toString(16).padStart(2, "0"));
function O(e = 32) {
    if (o && "function" == typeof o.getRandomValues) return o.getRandomValues(new Uint8Array(e));
    throw new Error("crypto.getRandomValues must be defined");
}
const c1 = BigInt(0), a1 = BigInt(1), f2 = BigInt(2);
function r3(e) {
    return e instanceof Uint8Array || null != e && "object" == typeof e && "Uint8Array" === e.constructor.name;
}
function n1(e) {
    if (!r3(e)) throw new Error("Uint8Array expected");
}
const d1 = Array.from({
    length: 256
}, (e, t)=>t.toString(16).padStart(2, "0"));
function i1(e) {
    n1(e);
    let t = "";
    for(let c = 0; c < e.length; c++)t += d1[e[c]];
    return t;
}
function o2(e) {
    if ("string" != typeof e) throw new Error("hex string expected, got " + typeof e);
    return BigInt("" === e ? "0" : `0x${e}`);
}
const b = {
    _0: 48,
    _9: 57,
    _A: 65,
    _F: 70,
    _a: 97,
    _f: 102
};
function s2(e) {
    return e >= b._0 && e <= b._9 ? e - b._0 : e >= b._A && e <= b._F ? e - (b._A - 10) : e >= b._a && e <= b._f ? e - (b._a - 10) : void 0;
}
function u1(e) {
    if ("string" != typeof e) throw new Error("hex string expected, got " + typeof e);
    const t = e.length, c = t / 2;
    if (t % 2) throw new Error("padded hex string expected, got unpadded hex of length " + t);
    const a = new Uint8Array(c);
    for(let t = 0, f = 0; t < c; t++, f += 2){
        const c = s2(e.charCodeAt(f)), r = s2(e.charCodeAt(f + 1));
        if (void 0 === c || void 0 === r) {
            const t = e[f] + e[f + 1];
            throw new Error('hex string expected, got non-hex character "' + t + '" at index ' + f);
        }
        a[t] = 16 * c + r;
    }
    return a;
}
function l1(e) {
    return o2(i1(e));
}
function m1(e) {
    return n1(e), o2(i1(Uint8Array.from(e).reverse()));
}
function p1(e, t) {
    return u1(e.toString(16).padStart(2 * t, "0"));
}
function g1(e, t) {
    return p1(e, t).reverse();
}
function y(e, t, c) {
    let a;
    if ("string" == typeof t) try {
        a = u1(t);
    } catch (c) {
        throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${c}`);
    }
    else {
        if (!r3(t)) throw new Error(`${e} must be hex string or Uint8Array`);
        a = Uint8Array.from(t);
    }
    const f = a.length;
    if ("number" == typeof c && f !== c) throw new Error(`${e} expected ${c} bytes, got ${f}`);
    return a;
}
function B(...e) {
    let t = 0;
    for(let c = 0; c < e.length; c++){
        const a = e[c];
        n1(a), t += a.length;
    }
    const c = new Uint8Array(t);
    for(let t = 0, a = 0; t < e.length; t++){
        const f = e[t];
        c.set(f, a), a += f.length;
    }
    return c;
}
function x1(e) {
    if ("string" != typeof e) throw new Error("utf8ToBytes expected string, got " + typeof e);
    return new Uint8Array((new TextEncoder).encode(e));
}
function E(e) {
    let t;
    for(t = 0; e > c1; e >>= a1, t += 1);
    return t;
}
function h1(e, t) {
    return e >> BigInt(t) & a1;
}
const w = (e)=>(f2 << BigInt(e - 1)) - a1, v1 = {
    bigint: (e)=>"bigint" == typeof e,
    function: (e)=>"function" == typeof e,
    boolean: (e)=>"boolean" == typeof e,
    string: (e)=>"string" == typeof e,
    stringOrUint8Array: (e)=>"string" == typeof e || r3(e),
    isSafeInteger: (e)=>Number.isSafeInteger(e),
    array: (e)=>Array.isArray(e),
    field: (e, t)=>t.Fp.isValid(e),
    hash: (e)=>"function" == typeof e && Number.isSafeInteger(e.outputLen)
};
function I(e, t, c = {}) {
    const a = (t, c, a)=>{
        const f = v1[c];
        if ("function" != typeof f) throw new Error(`Invalid validator "${c}", expected function`);
        const r = e[t];
        if (!(a && void 0 === r || f(r, e))) throw new Error(`Invalid param ${String(t)}=${r} (${typeof r}), expected ${c}`);
    };
    for (const [e, c] of Object.entries(t))a(e, c, !1);
    for (const [e, t] of Object.entries(c))a(e, t, !0);
    return e;
}
const O1 = BigInt(0), S = BigInt(1), R = BigInt(2), q = BigInt(3), P = BigInt(4), T = BigInt(5), A = BigInt(8);
function N10(e, t) {
    const c = e % t;
    return c >= O1 ? c : t + c;
}
function Z(e, t, c) {
    if (c <= O1 || t < O1) throw new Error("Expected power/modulo > 0");
    if (c === S) return O1;
    let a = S;
    for(; t > O1;)t & S && (a = a * e % c), e = e * e % c, t >>= S;
    return a;
}
function _(e, t) {
    if (e === O1 || t <= O1) throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);
    let c = N10(e, t), a = t, f = O1, r = S;
    for(; c !== O1;){
        const e = a % c, t = f - r * (a / c);
        a = c, c = e, f = r, r = t;
    }
    if (a !== S) throw new Error("invert: does not exist");
    return N10(f, t);
}
function j(e) {
    if (e % P === q) {
        const t = (e + S) / P;
        return function(e, c) {
            const a = e.pow(c, t);
            if (!e.eql(e.sqr(a), c)) throw new Error("Cannot find square root");
            return a;
        };
    }
    if (e % A === T) {
        const t = (e - T) / A;
        return function(e, c) {
            const a = e.mul(c, R), f = e.pow(a, t), r = e.mul(c, f), n = e.mul(e.mul(r, R), f), d = e.mul(r, e.sub(n, e.ONE));
            if (!e.eql(e.sqr(d), c)) throw new Error("Cannot find square root");
            return d;
        };
    }
    return function(e) {
        const t = (e - S) / R;
        let c, a, f;
        for(c = e - S, a = 0; c % R === O1; c /= R, a++);
        for(f = R; f < e && Z(f, t, e) !== e - S; f++);
        if (1 === a) {
            const t = (e + S) / P;
            return function(e, c) {
                const a = e.pow(c, t);
                if (!e.eql(e.sqr(a), c)) throw new Error("Cannot find square root");
                return a;
            };
        }
        const r = (c + S) / R;
        return function(e, n) {
            if (e.pow(n, t) === e.neg(e.ONE)) throw new Error("Cannot find square root");
            let d = a, i = e.pow(e.mul(e.ONE, f), c), o = e.pow(n, r), b = e.pow(n, c);
            for(; !e.eql(b, e.ONE);){
                if (e.eql(b, e.ZERO)) return e.ZERO;
                let t = 1;
                for(let c = e.sqr(b); t < d && !e.eql(c, e.ONE); t++)c = e.sqr(c);
                const c = e.pow(i, S << BigInt(d - t - 1));
                i = e.sqr(c), o = e.mul(o, c), b = e.mul(b, i), d = t;
            }
            return o;
        };
    }(e);
}
BigInt(9), BigInt(16);
const F = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
];
function G(e) {
    return I(e, F.reduce((e, t)=>(e[t] = "function", e), {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
    }));
}
function D(e, t, c) {
    if (c < O1) throw new Error("Expected power > 0");
    if (c === O1) return e.ONE;
    if (c === S) return t;
    let a = e.ONE, f = t;
    for(; c > O1;)c & S && (a = e.mul(a, f)), f = e.sqr(f), c >>= S;
    return a;
}
function V(e, t) {
    const c = new Array(t.length), a = t.reduce((t, a, f)=>e.is0(a) ? t : (c[f] = t, e.mul(t, a)), e.ONE), f = e.inv(a);
    return t.reduceRight((t, a, f)=>e.is0(a) ? t : (c[f] = e.mul(t, c[f]), e.mul(t, a)), f), c;
}
function M(e, t) {
    const c = void 0 !== t ? t : e.toString(2).length;
    return {
        nBitLength: c,
        nByteLength: Math.ceil(c / 8)
    };
}
function U(e, t, c = !1, a = {}) {
    if (e <= O1) throw new Error(`Expected Field ORDER > 0, got ${e}`);
    const { nBitLength: f, nByteLength: r } = M(e, t);
    if (r > 2048) throw new Error("Field lengths over 2048 bytes are not supported");
    const n = j(e), d = Object.freeze({
        ORDER: e,
        BITS: f,
        BYTES: r,
        MASK: w(f),
        ZERO: O1,
        ONE: S,
        create: (t)=>N10(t, e),
        isValid: (t)=>{
            if ("bigint" != typeof t) throw new Error("Invalid field element: expected bigint, got " + typeof t);
            return O1 <= t && t < e;
        },
        is0: (e)=>e === O1,
        isOdd: (e)=>(e & S) === S,
        neg: (t)=>N10(-t, e),
        eql: (e, t)=>e === t,
        sqr: (t)=>N10(t * t, e),
        add: (t, c)=>N10(t + c, e),
        sub: (t, c)=>N10(t - c, e),
        mul: (t, c)=>N10(t * c, e),
        pow: (e, t)=>D(d, e, t),
        div: (t, c)=>N10(t * _(c, e), e),
        sqrN: (e)=>e * e,
        addN: (e, t)=>e + t,
        subN: (e, t)=>e - t,
        mulN: (e, t)=>e * t,
        inv: (t)=>_(t, e),
        sqrt: a.sqrt || ((e)=>n(d, e)),
        invertBatch: (e)=>V(d, e),
        cmov: (e, t, c)=>c ? t : e,
        toBytes: (e)=>c ? g1(e, r) : p1(e, r),
        fromBytes: (e)=>{
            if (e.length !== r) throw new Error(`Fp.fromBytes: expected ${r}, got ${e.length}`);
            return c ? m1(e) : l1(e);
        }
    });
    return Object.freeze(d);
}
function C(e) {
    if ("bigint" != typeof e) throw new Error("field order must be bigint");
    const t = e.toString(2).length;
    return Math.ceil(t / 8);
}
function Y(e) {
    const t = C(e);
    return t + Math.ceil(t / 2);
}
const L = l1;
function $(e, t) {
    if (e < 0 || e >= 1 << 8 * t) throw new Error(`bad I2OSP call: value=${e} length=${t}`);
    const c = Array.from({
        length: t
    }).fill(0);
    for(let a = t - 1; a >= 0; a--)c[a] = 255 & e, e >>>= 8;
    return new Uint8Array(c);
}
function z1(e, t) {
    const c = new Uint8Array(e.length);
    for(let a = 0; a < e.length; a++)c[a] = e[a] ^ t[a];
    return c;
}
function K1(e) {
    if (!Number.isSafeInteger(e)) throw new Error("number expected");
}
function k(e, t, c) {
    I(c, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
    });
    const { p: a, k: f, m: r, hash: d, expand: i, DST: o } = c;
    n1(e), K1(t);
    const b = "string" == typeof o ? x1(o) : o, s = a.toString(2).length, u = Math.ceil((s + f) / 8), l = t * r * u;
    let m;
    if ("xmd" === i) m = function(e, t, c, a) {
        n1(e), n1(t), K1(c), t.length > 255 && (t = a(B(x1("H2C-OVERSIZE-DST-"), t)));
        const { outputLen: f, blockLen: r } = a, d = Math.ceil(c / f);
        if (d > 255) throw new Error("Invalid xmd length");
        const i = B(t, $(t.length, 1)), o = $(0, r), b = $(c, 2), s = new Array(d), u = a(B(o, e, b, $(0, 1), i));
        s[0] = a(B(u, $(1, 1), i));
        for(let e = 1; e <= d; e++){
            const t = [
                z1(u, s[e - 1]),
                $(e + 1, 1),
                i
            ];
            s[e] = a(B(...t));
        }
        return B(...s).slice(0, c);
    }(e, b, l, d);
    else if ("xof" === i) m = function(e, t, c, a, f) {
        if (n1(e), n1(t), K1(c), t.length > 255) {
            const e = Math.ceil(2 * a / 8);
            t = f.create({
                dkLen: e
            }).update(x1("H2C-OVERSIZE-DST-")).update(t).digest();
        }
        if (c > 65535 || t.length > 255) throw new Error("expand_message_xof: invalid lenInBytes");
        return f.create({
            dkLen: c
        }).update(e).update($(c, 2)).update(t).update($(t.length, 1)).digest();
    }(e, b, l, f, d);
    else {
        if ("_internal_pass" !== i) throw new Error('expand must be "xmd" or "xof"');
        m = e;
    }
    const p = new Array(t);
    for(let e = 0; e < t; e++){
        const t = new Array(r);
        for(let c = 0; c < r; c++){
            const f = u * (c + e * r), n = m.subarray(f, f + u);
            t[c] = N10(L(n), a);
        }
        p[e] = t;
    }
    return p;
}
function H(e, t) {
    const c = t.map((e)=>Array.from(e).reverse());
    return (t, a)=>{
        const [f, r, n, d] = c.map((c)=>c.reduce((c, a)=>e.add(e.mul(c, t), a)));
        return t = e.div(f, r), a = e.mul(a, e.div(n, d)), {
            x: t,
            y: a
        };
    };
}
function W(e, t, c) {
    if ("function" != typeof t) throw new Error("mapToCurve() must be defined");
    return {
        hashToCurve (a, f) {
            const r = k(a, 2, {
                ...c,
                DST: c.DST,
                ...f
            }), n = e.fromAffine(t(r[0])), d = e.fromAffine(t(r[1])), i = n.add(d).clearCofactor();
            return i.assertValidity(), i;
        },
        encodeToCurve (a, f) {
            const r = k(a, 1, {
                ...c,
                DST: c.encodeDST,
                ...f
            }), n = e.fromAffine(t(r[0])).clearCofactor();
            return n.assertValidity(), n;
        },
        mapToCurve (c) {
            if (!Array.isArray(c)) throw new Error("mapToCurve: expected array of bigints");
            for (const e of c)if ("bigint" != typeof e) throw new Error(`mapToCurve: expected array of bigints, got ${e} in array`);
            const a = e.fromAffine(t(c)).clearCofactor();
            return a.assertValidity(), a;
        }
    };
}
const X = BigInt(0), J = BigInt(1);
function Q(e) {
    const t = function(e) {
        return G(e.Fp), I(e, {
            n: "bigint",
            h: "bigint",
            Gx: "field",
            Gy: "field"
        }, {
            nBitLength: "isSafeInteger",
            nByteLength: "isSafeInteger"
        }), Object.freeze({
            ...M(e.n, e.nBitLength),
            ...e,
            p: e.Fp.ORDER
        });
    }(e);
    I(t, {
        a: "field",
        b: "field"
    }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
    });
    const { endo: c, Fp: a, a: f } = t;
    if (c) {
        if (!a.eql(f, a.ZERO)) throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        if ("object" != typeof c || "bigint" != typeof c.beta || "function" != typeof c.splitScalar) throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
    return Object.freeze({
        ...t
    });
}
const ee = BigInt(0), te = BigInt(1), ce = BigInt(2), ae = BigInt(3), fe = BigInt(4);
function re(e) {
    const t = Q(e), { Fp: c } = t, a = t.toBytes || ((e, t, a)=>{
        const f = t.toAffine();
        return B(Uint8Array.from([
            4
        ]), c.toBytes(f.x), c.toBytes(f.y));
    }), f = t.fromBytes || ((e)=>{
        const t = e.subarray(1);
        return {
            x: c.fromBytes(t.subarray(0, c.BYTES)),
            y: c.fromBytes(t.subarray(c.BYTES, 2 * c.BYTES))
        };
    });
    function n(e) {
        const { a: a, b: f } = t, r = c.sqr(e), n = c.mul(r, e);
        return c.add(c.add(n, c.mul(e, a)), f);
    }
    if (!c.eql(c.sqr(t.Gy), n(t.Gx))) throw new Error("bad generator point: equation left != right");
    function d(e) {
        return "bigint" == typeof e && ee < e && e < t.n;
    }
    function o(e) {
        if (!d(e)) throw new Error("Expected valid bigint: 0 < bigint < curve.n");
    }
    function b(e) {
        const { allowedPrivateKeyLengths: c, nByteLength: a, wrapPrivateKey: f, n: n } = t;
        if (c && "bigint" != typeof e) {
            if (r3(e) && (e = i1(e)), "string" != typeof e || !c.includes(e.length)) throw new Error("Invalid key");
            e = e.padStart(2 * a, "0");
        }
        let d;
        try {
            d = "bigint" == typeof e ? e : l1(y("private key", e, a));
        } catch (t) {
            throw new Error(`private key must be ${a} bytes, hex or bigint, not ${typeof e}`);
        }
        return f && (d = N10(d, n)), o(d), d;
    }
    const s = new Map;
    function u(e) {
        if (!(e instanceof m)) throw new Error("ProjectivePoint expected");
    }
    class m {
        constructor(e, t, a){
            if (this.px = e, this.py = t, this.pz = a, null == e || !c.isValid(e)) throw new Error("x required");
            if (null == t || !c.isValid(t)) throw new Error("y required");
            if (null == a || !c.isValid(a)) throw new Error("z required");
        }
        static fromAffine(e) {
            const { x: t, y: a } = e || {};
            if (!e || !c.isValid(t) || !c.isValid(a)) throw new Error("invalid affine point");
            if (e instanceof m) throw new Error("projective point not allowed");
            const f = (e)=>c.eql(e, c.ZERO);
            return f(t) && f(a) ? m.ZERO : new m(t, a, c.ONE);
        }
        get x() {
            return this.toAffine().x;
        }
        get y() {
            return this.toAffine().y;
        }
        static normalizeZ(e) {
            const t = c.invertBatch(e.map((e)=>e.pz));
            return e.map((e, c)=>e.toAffine(t[c])).map(m.fromAffine);
        }
        static fromHex(e) {
            const t = m.fromAffine(f(y("pointHex", e)));
            return t.assertValidity(), t;
        }
        static fromPrivateKey(e) {
            return m.BASE.multiply(b(e));
        }
        _setWindowSize(e) {
            this._WINDOW_SIZE = e, s.delete(this);
        }
        assertValidity() {
            if (this.is0()) {
                if (t.allowInfinityPoint && !c.is0(this.py)) return;
                throw new Error("bad point: ZERO");
            }
            const { x: e, y: a } = this.toAffine();
            if (!c.isValid(e) || !c.isValid(a)) throw new Error("bad point: x or y not FE");
            const f = c.sqr(a), r = n(e);
            if (!c.eql(f, r)) throw new Error("bad point: equation left != right");
            if (!this.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
            const { y: e } = this.toAffine();
            if (c.isOdd) return !c.isOdd(e);
            throw new Error("Field doesn't support isOdd");
        }
        equals(e) {
            u(e);
            const { px: t, py: a, pz: f } = this, { px: r, py: n, pz: d } = e, i = c.eql(c.mul(t, d), c.mul(r, f)), o = c.eql(c.mul(a, d), c.mul(n, f));
            return i && o;
        }
        negate() {
            return new m(this.px, c.neg(this.py), this.pz);
        }
        double() {
            const { a: e, b: a } = t, f = c.mul(a, ae), { px: r, py: n, pz: d } = this;
            let i = c.ZERO, o = c.ZERO, b = c.ZERO, s = c.mul(r, r), u = c.mul(n, n), l = c.mul(d, d), p = c.mul(r, n);
            return p = c.add(p, p), b = c.mul(r, d), b = c.add(b, b), i = c.mul(e, b), o = c.mul(f, l), o = c.add(i, o), i = c.sub(u, o), o = c.add(u, o), o = c.mul(i, o), i = c.mul(p, i), b = c.mul(f, b), l = c.mul(e, l), p = c.sub(s, l), p = c.mul(e, p), p = c.add(p, b), b = c.add(s, s), s = c.add(b, s), s = c.add(s, l), s = c.mul(s, p), o = c.add(o, s), l = c.mul(n, d), l = c.add(l, l), s = c.mul(l, p), i = c.sub(i, s), b = c.mul(l, u), b = c.add(b, b), b = c.add(b, b), new m(i, o, b);
        }
        add(e) {
            u(e);
            const { px: a, py: f, pz: r } = this, { px: n, py: d, pz: i } = e;
            let o = c.ZERO, b = c.ZERO, s = c.ZERO;
            const l = t.a, p = c.mul(t.b, ae);
            let g = c.mul(a, n), y = c.mul(f, d), B = c.mul(r, i), x = c.add(a, f), E = c.add(n, d);
            x = c.mul(x, E), E = c.add(g, y), x = c.sub(x, E), E = c.add(a, r);
            let h = c.add(n, i);
            return E = c.mul(E, h), h = c.add(g, B), E = c.sub(E, h), h = c.add(f, r), o = c.add(d, i), h = c.mul(h, o), o = c.add(y, B), h = c.sub(h, o), s = c.mul(l, E), o = c.mul(p, B), s = c.add(o, s), o = c.sub(y, s), s = c.add(y, s), b = c.mul(o, s), y = c.add(g, g), y = c.add(y, g), B = c.mul(l, B), E = c.mul(p, E), y = c.add(y, B), B = c.sub(g, B), B = c.mul(l, B), E = c.add(E, B), g = c.mul(y, E), b = c.add(b, g), g = c.mul(h, E), o = c.mul(x, o), o = c.sub(o, g), g = c.mul(x, y), s = c.mul(h, s), s = c.add(s, g), new m(o, b, s);
        }
        subtract(e) {
            return this.add(e.negate());
        }
        is0() {
            return this.equals(m.ZERO);
        }
        wNAF(e) {
            return g.wNAFCached(this, s, e, (e)=>{
                const t = c.invertBatch(e.map((e)=>e.pz));
                return e.map((e, c)=>e.toAffine(t[c])).map(m.fromAffine);
            });
        }
        multiplyUnsafe(e) {
            const a = m.ZERO;
            if (e === ee) return a;
            if (o(e), e === te) return this;
            const { endo: f } = t;
            if (!f) return g.unsafeLadder(this, e);
            let { k1neg: r, k1: n, k2neg: d, k2: i } = f.splitScalar(e), b = a, s = a, u = this;
            for(; n > ee || i > ee;)n & te && (b = b.add(u)), i & te && (s = s.add(u)), u = u.double(), n >>= te, i >>= te;
            return r && (b = b.negate()), d && (s = s.negate()), s = new m(c.mul(s.px, f.beta), s.py, s.pz), b.add(s);
        }
        multiply(e) {
            o(e);
            let a, f, r = e;
            const { endo: n } = t;
            if (n) {
                const { k1neg: e, k1: t, k2neg: d, k2: i } = n.splitScalar(r);
                let { p: o, f: b } = this.wNAF(t), { p: s, f: u } = this.wNAF(i);
                o = g.constTimeNegate(e, o), s = g.constTimeNegate(d, s), s = new m(c.mul(s.px, n.beta), s.py, s.pz), a = o.add(s), f = b.add(u);
            } else {
                const { p: e, f: t } = this.wNAF(r);
                a = e, f = t;
            }
            return m.normalizeZ([
                a,
                f
            ])[0];
        }
        multiplyAndAddUnsafe(e, t, c) {
            const a = m.BASE, f = (e, t)=>t !== ee && t !== te && e.equals(a) ? e.multiply(t) : e.multiplyUnsafe(t), r = f(this, t).add(f(e, c));
            return r.is0() ? void 0 : r;
        }
        toAffine(e) {
            const { px: t, py: a, pz: f } = this, r = this.is0();
            null == e && (e = r ? c.ONE : c.inv(f));
            const n = c.mul(t, e), d = c.mul(a, e), i = c.mul(f, e);
            if (r) return {
                x: c.ZERO,
                y: c.ZERO
            };
            if (!c.eql(i, c.ONE)) throw new Error("invZ was invalid");
            return {
                x: n,
                y: d
            };
        }
        isTorsionFree() {
            const { h: e, isTorsionFree: c } = t;
            if (e === te) return !0;
            if (c) return c(m, this);
            throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
            const { h: e, clearCofactor: c } = t;
            return e === te ? this : c ? c(m, this) : this.multiplyUnsafe(t.h);
        }
        toRawBytes(e = !0) {
            return this.assertValidity(), a(m, this, e);
        }
        toHex(e = !0) {
            return i1(this.toRawBytes(e));
        }
    }
    m.BASE = new m(t.Gx, t.Gy, c.ONE), m.ZERO = new m(c.ZERO, c.ONE, c.ZERO);
    const p = t.nBitLength, g = function(e, t) {
        const c = (e, t)=>{
            const c = t.negate();
            return e ? c : t;
        }, a = (e)=>({
                windows: Math.ceil(t / e) + 1,
                windowSize: 2 ** (e - 1)
            });
        return {
            constTimeNegate: c,
            unsafeLadder (t, c) {
                let a = e.ZERO, f = t;
                for(; c > X;)c & J && (a = a.add(f)), f = f.double(), c >>= J;
                return a;
            },
            precomputeWindow (e, t) {
                const { windows: c, windowSize: f } = a(t), r = [];
                let n = e, d = n;
                for(let e = 0; e < c; e++){
                    d = n, r.push(d);
                    for(let e = 1; e < f; e++)d = d.add(n), r.push(d);
                    n = d.double();
                }
                return r;
            },
            wNAF (t, f, r) {
                const { windows: n, windowSize: d } = a(t);
                let i = e.ZERO, o = e.BASE;
                const b = BigInt(2 ** t - 1), s = 2 ** t, u = BigInt(t);
                for(let e = 0; e < n; e++){
                    const t = e * d;
                    let a = Number(r & b);
                    r >>= u, a > d && (a -= s, r += J);
                    const n = t, l = t + Math.abs(a) - 1, m = e % 2 != 0, p = a < 0;
                    0 === a ? o = o.add(c(m, f[n])) : i = i.add(c(p, f[l]));
                }
                return {
                    p: i,
                    f: o
                };
            },
            wNAFCached (e, t, c, a) {
                const f = e._WINDOW_SIZE || 1;
                let r = t.get(e);
                return r || (r = this.precomputeWindow(e, f), 1 !== f && t.set(e, a(r))), this.wNAF(f, r, c);
            }
        };
    }(m, t.endo ? Math.ceil(p / 2) : p);
    return {
        CURVE: t,
        ProjectivePoint: m,
        normPrivateKeyToScalar: b,
        weierstrassEquation: n,
        isWithinCurveOrder: d
    };
}
function ne(e, t) {
    if (G(e), !e.isValid(t.A) || !e.isValid(t.B) || !e.isValid(t.Z)) throw new Error("mapToCurveSimpleSWU: invalid opts");
    const c = function(e, t) {
        const c = e.ORDER;
        let a = ee;
        for(let e = c - te; e % ce === ee; e /= ce)a += te;
        const f = a, r = ce << f - te - te, n = r * ce, d = (c - te) / n, i = (d - te) / ce, o = n - te, b = r, s = e.pow(t, d), u = e.pow(t, (d + te) / ce);
        let l = (t, c)=>{
            let a = s, r = e.pow(c, o), n = e.sqr(r);
            n = e.mul(n, c);
            let d = e.mul(t, n);
            d = e.pow(d, i), d = e.mul(d, r), r = e.mul(d, c), n = e.mul(d, t);
            let l = e.mul(n, r);
            d = e.pow(l, b);
            let m = e.eql(d, e.ONE);
            r = e.mul(n, u), d = e.mul(l, a), n = e.cmov(r, n, m), l = e.cmov(d, l, m);
            for(let t = f; t > te; t--){
                let c = t - ce;
                c = ce << c - te;
                let f = e.pow(l, c);
                const d = e.eql(f, e.ONE);
                r = e.mul(n, a), a = e.mul(a, a), f = e.mul(l, a), n = e.cmov(r, n, d), l = e.cmov(f, l, d);
            }
            return {
                isValid: m,
                value: n
            };
        };
        if (e.ORDER % fe === ae) {
            const c = (e.ORDER - ae) / fe, a = e.sqrt(e.neg(t));
            l = (t, f)=>{
                let r = e.sqr(f);
                const n = e.mul(t, f);
                r = e.mul(r, n);
                let d = e.pow(r, c);
                d = e.mul(d, n);
                const i = e.mul(d, a), o = e.mul(e.sqr(d), f), b = e.eql(o, t);
                return {
                    isValid: b,
                    value: e.cmov(i, d, b)
                };
            };
        }
        return l;
    }(e, t.Z);
    if (!e.isOdd) throw new Error("Fp.isOdd is not implemented!");
    return (a)=>{
        let f, r, n, d, i, o, b, s;
        f = e.sqr(a), f = e.mul(f, t.Z), r = e.sqr(f), r = e.add(r, f), n = e.add(r, e.ONE), n = e.mul(n, t.B), d = e.cmov(t.Z, e.neg(r), !e.eql(r, e.ZERO)), d = e.mul(d, t.A), r = e.sqr(n), o = e.sqr(d), i = e.mul(o, t.A), r = e.add(r, i), r = e.mul(r, n), o = e.mul(o, d), i = e.mul(o, t.B), r = e.add(r, i), b = e.mul(f, n);
        const { isValid: u, value: l } = c(r, o);
        s = e.mul(f, a), s = e.mul(s, l), b = e.cmov(b, n, u), s = e.cmov(s, l, u);
        const m = e.isOdd(a) === e.isOdd(s);
        return s = e.cmov(e.neg(s), s, m), b = e.div(b, d), {
            x: b,
            y: s
        };
    };
}
const de = BigInt(2), ie = BigInt(3);
const oe = BigInt(0), be = BigInt(1), se = BigInt(2), ue = BigInt(3), le = BigInt(4), me = BigInt(8), pe = BigInt(16), ge = BigInt("0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab"), ye = U(ge), Be = U(BigInt("0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001")), xe = ({ c0: e, c1: t }, { c0: c, c1: a })=>({
        c0: ye.add(e, c),
        c1: ye.add(t, a)
    }), Ee = ({ c0: e, c1: t }, { c0: c, c1: a })=>({
        c0: ye.sub(e, c),
        c1: ye.sub(t, a)
    }), he = ({ c0: e, c1: t }, c)=>{
    if ("bigint" == typeof c) return {
        c0: ye.mul(e, c),
        c1: ye.mul(t, c)
    };
    const { c0: a, c1: f } = c;
    let r = ye.mul(e, a), n = ye.mul(t, f);
    return {
        c0: ye.sub(r, n),
        c1: ye.sub(ye.mul(ye.add(e, t), ye.add(a, f)), ye.add(r, n))
    };
}, we = ({ c0: e, c1: t })=>{
    const c = ye.add(e, t), a = ye.sub(e, t), f = ye.add(e, e);
    return {
        c0: ye.mul(c, a),
        c1: ye.mul(f, t)
    };
}, ve = ge * ge, Ie = {
    ORDER: ve,
    BITS: E(ve),
    BYTES: Math.ceil(E(ve) / 8),
    MASK: w(E(ve)),
    ZERO: {
        c0: ye.ZERO,
        c1: ye.ZERO
    },
    ONE: {
        c0: ye.ONE,
        c1: ye.ZERO
    },
    create: (e)=>e,
    isValid: ({ c0: e, c1: t })=>"bigint" == typeof e && "bigint" == typeof t,
    is0: ({ c0: e, c1: t })=>ye.is0(e) && ye.is0(t),
    eql: ({ c0: e, c1: t }, { c0: c, c1: a })=>ye.eql(e, c) && ye.eql(t, a),
    neg: ({ c0: e, c1: t })=>({
            c0: ye.neg(e),
            c1: ye.neg(t)
        }),
    pow: (e, t)=>D(Ie, e, t),
    invertBatch: (e)=>V(Ie, e),
    add: xe,
    sub: Ee,
    mul: he,
    sqr: we,
    addN: xe,
    subN: Ee,
    mulN: he,
    sqrN: we,
    div: (e, t)=>Ie.mul(e, "bigint" == typeof t ? ye.inv(ye.create(t)) : Ie.inv(t)),
    inv: ({ c0: e, c1: t })=>{
        const c = ye.inv(ye.create(e * e + t * t));
        return {
            c0: ye.mul(c, ye.create(e)),
            c1: ye.mul(c, ye.create(-t))
        };
    },
    sqrt: (e)=>{
        if (Ie.eql(e, Ie.ZERO)) return Ie.ZERO;
        const t = Ie.pow(e, (Ie.ORDER + me) / pe), c = Ie.div(Ie.sqr(t), e), a = Re, f = [
            a[0],
            a[2],
            a[4],
            a[6]
        ].find((e)=>Ie.eql(e, c));
        if (!f) throw new Error("No root");
        const r = a.indexOf(f), n = a[r / 2];
        if (!n) throw new Error("Invalid root");
        const d = Ie.div(t, n), i = Ie.neg(d), { re: o, im: b } = Ie.reim(d), { re: s, im: u } = Ie.reim(i);
        return b > u || b === u && o > s ? d : i;
    },
    isOdd: (e)=>{
        const { re: t, im: c } = Ie.reim(e);
        return BigInt(t % se || t === oe && c % se) == be;
    },
    fromBytes (e) {
        if (e.length !== Ie.BYTES) throw new Error(`fromBytes wrong length=${e.length}`);
        return {
            c0: ye.fromBytes(e.subarray(0, ye.BYTES)),
            c1: ye.fromBytes(e.subarray(ye.BYTES))
        };
    },
    toBytes: ({ c0: e, c1: t })=>B(ye.toBytes(e), ye.toBytes(t)),
    cmov: ({ c0: e, c1: t }, { c0: c, c1: a }, f)=>({
            c0: ye.cmov(e, c, f),
            c1: ye.cmov(t, a, f)
        }),
    reim: ({ c0: e, c1: t })=>({
            re: e,
            im: t
        }),
    mulByNonresidue: ({ c0: e, c1: t })=>({
            c0: ye.sub(e, t),
            c1: ye.add(e, t)
        }),
    multiplyByB: ({ c0: e, c1: t })=>{
        let c = ye.mul(e, le), a = ye.mul(t, le);
        return {
            c0: ye.sub(c, a),
            c1: ye.add(c, a)
        };
    },
    fromBigTuple: (e)=>{
        if (2 !== e.length) throw new Error("Invalid tuple");
        const t = e.map((e)=>ye.create(e));
        return {
            c0: t[0],
            c1: t[1]
        };
    },
    frobeniusMap: ({ c0: e, c1: t }, c)=>({
            c0: e,
            c1: ye.mul(t, Oe[c % 2])
        })
}, Oe = [
    BigInt("0x1"),
    BigInt("0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa")
].map((e)=>ye.create(e)), Se = BigInt("0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09"), Re = [
    [
        be,
        oe
    ],
    [
        Se,
        -Se
    ],
    [
        oe,
        be
    ],
    [
        Se,
        Se
    ],
    [
        -be,
        oe
    ],
    [
        -Se,
        Se
    ],
    [
        oe,
        -be
    ],
    [
        -Se,
        -Se
    ]
].map((e)=>Ie.fromBigTuple(e)), qe = ({ c0: e, c1: t, c2: c }, { c0: a, c1: f, c2: r })=>({
        c0: Ie.add(e, a),
        c1: Ie.add(t, f),
        c2: Ie.add(c, r)
    }), Pe = ({ c0: e, c1: t, c2: c }, { c0: a, c1: f, c2: r })=>({
        c0: Ie.sub(e, a),
        c1: Ie.sub(t, f),
        c2: Ie.sub(c, r)
    }), Te = ({ c0: e, c1: t, c2: c }, a)=>{
    if ("bigint" == typeof a) return {
        c0: Ie.mul(e, a),
        c1: Ie.mul(t, a),
        c2: Ie.mul(c, a)
    };
    const { c0: f, c1: r, c2: n } = a, d = Ie.mul(e, f), i = Ie.mul(t, r), o = Ie.mul(c, n);
    return {
        c0: Ie.add(d, Ie.mulByNonresidue(Ie.sub(Ie.mul(Ie.add(t, c), Ie.add(r, n)), Ie.add(i, o)))),
        c1: Ie.add(Ie.sub(Ie.mul(Ie.add(e, t), Ie.add(f, r)), Ie.add(d, i)), Ie.mulByNonresidue(o)),
        c2: Ie.sub(Ie.add(i, Ie.mul(Ie.add(e, c), Ie.add(f, n))), Ie.add(d, o))
    };
}, Ae = ({ c0: e, c1: t, c2: c })=>{
    let a = Ie.sqr(e), f = Ie.mul(Ie.mul(e, t), se), r = Ie.mul(Ie.mul(t, c), se), n = Ie.sqr(c);
    return {
        c0: Ie.add(Ie.mulByNonresidue(r), a),
        c1: Ie.add(Ie.mulByNonresidue(n), f),
        c2: Ie.sub(Ie.sub(Ie.add(Ie.add(f, Ie.sqr(Ie.add(Ie.sub(e, t), c))), r), a), n)
    };
}, Ne = {
    ORDER: Ie.ORDER,
    BITS: 3 * Ie.BITS,
    BYTES: 3 * Ie.BYTES,
    MASK: w(3 * Ie.BITS),
    ZERO: {
        c0: Ie.ZERO,
        c1: Ie.ZERO,
        c2: Ie.ZERO
    },
    ONE: {
        c0: Ie.ONE,
        c1: Ie.ZERO,
        c2: Ie.ZERO
    },
    create: (e)=>e,
    isValid: ({ c0: e, c1: t, c2: c })=>Ie.isValid(e) && Ie.isValid(t) && Ie.isValid(c),
    is0: ({ c0: e, c1: t, c2: c })=>Ie.is0(e) && Ie.is0(t) && Ie.is0(c),
    neg: ({ c0: e, c1: t, c2: c })=>({
            c0: Ie.neg(e),
            c1: Ie.neg(t),
            c2: Ie.neg(c)
        }),
    eql: ({ c0: e, c1: t, c2: c }, { c0: a, c1: f, c2: r })=>Ie.eql(e, a) && Ie.eql(t, f) && Ie.eql(c, r),
    sqrt: ()=>{
        throw new Error("Not implemented");
    },
    div: (e, t)=>Ne.mul(e, "bigint" == typeof t ? ye.inv(ye.create(t)) : Ne.inv(t)),
    pow: (e, t)=>D(Ne, e, t),
    invertBatch: (e)=>V(Ne, e),
    add: qe,
    sub: Pe,
    mul: Te,
    sqr: Ae,
    addN: qe,
    subN: Pe,
    mulN: Te,
    sqrN: Ae,
    inv: ({ c0: e, c1: t, c2: c })=>{
        let a = Ie.sub(Ie.sqr(e), Ie.mulByNonresidue(Ie.mul(c, t))), f = Ie.sub(Ie.mulByNonresidue(Ie.sqr(c)), Ie.mul(e, t)), r = Ie.sub(Ie.sqr(t), Ie.mul(e, c)), n = Ie.inv(Ie.add(Ie.mulByNonresidue(Ie.add(Ie.mul(c, f), Ie.mul(t, r))), Ie.mul(e, a)));
        return {
            c0: Ie.mul(n, a),
            c1: Ie.mul(n, f),
            c2: Ie.mul(n, r)
        };
    },
    fromBytes: (e)=>{
        if (e.length !== Ne.BYTES) throw new Error(`fromBytes wrong length=${e.length}`);
        return {
            c0: Ie.fromBytes(e.subarray(0, Ie.BYTES)),
            c1: Ie.fromBytes(e.subarray(Ie.BYTES, 2 * Ie.BYTES)),
            c2: Ie.fromBytes(e.subarray(2 * Ie.BYTES))
        };
    },
    toBytes: ({ c0: e, c1: t, c2: c })=>B(Ie.toBytes(e), Ie.toBytes(t), Ie.toBytes(c)),
    cmov: ({ c0: e, c1: t, c2: c }, { c0: a, c1: f, c2: r }, n)=>({
            c0: Ie.cmov(e, a, n),
            c1: Ie.cmov(t, f, n),
            c2: Ie.cmov(c, r, n)
        }),
    fromBigSix: (e)=>{
        if (!Array.isArray(e) || 6 !== e.length) throw new Error("Invalid Fp6 usage");
        return {
            c0: Ie.fromBigTuple(e.slice(0, 2)),
            c1: Ie.fromBigTuple(e.slice(2, 4)),
            c2: Ie.fromBigTuple(e.slice(4, 6))
        };
    },
    frobeniusMap: ({ c0: e, c1: t, c2: c }, a)=>({
            c0: Ie.frobeniusMap(e, a),
            c1: Ie.mul(Ie.frobeniusMap(t, a), Ze[a % 6]),
            c2: Ie.mul(Ie.frobeniusMap(c, a), _e[a % 6])
        }),
    mulByNonresidue: ({ c0: e, c1: t, c2: c })=>({
            c0: Ie.mulByNonresidue(c),
            c1: e,
            c2: t
        }),
    multiplyBy1: ({ c0: e, c1: t, c2: c }, a)=>({
            c0: Ie.mulByNonresidue(Ie.mul(c, a)),
            c1: Ie.mul(e, a),
            c2: Ie.mul(t, a)
        }),
    multiplyBy01 ({ c0: e, c1: t, c2: c }, a, f) {
        let r = Ie.mul(e, a), n = Ie.mul(t, f);
        return {
            c0: Ie.add(Ie.mulByNonresidue(Ie.sub(Ie.mul(Ie.add(t, c), f), n)), r),
            c1: Ie.sub(Ie.sub(Ie.mul(Ie.add(a, f), Ie.add(e, t)), r), n),
            c2: Ie.add(Ie.sub(Ie.mul(Ie.add(e, c), a), r), n)
        };
    },
    multiplyByFp2: ({ c0: e, c1: t, c2: c }, a)=>({
            c0: Ie.mul(e, a),
            c1: Ie.mul(t, a),
            c2: Ie.mul(c, a)
        })
}, Ze = [
    [
        BigInt("0x1"),
        BigInt("0x0")
    ],
    [
        BigInt("0x0"),
        BigInt("0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac")
    ],
    [
        BigInt("0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe"),
        BigInt("0x0")
    ],
    [
        BigInt("0x0"),
        BigInt("0x1")
    ],
    [
        BigInt("0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac"),
        BigInt("0x0")
    ],
    [
        BigInt("0x0"),
        BigInt("0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe")
    ]
].map((e)=>Ie.fromBigTuple(e)), _e = [
    [
        BigInt("0x1"),
        BigInt("0x0")
    ],
    [
        BigInt("0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaad"),
        BigInt("0x0")
    ],
    [
        BigInt("0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac"),
        BigInt("0x0")
    ],
    [
        BigInt("0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa"),
        BigInt("0x0")
    ],
    [
        BigInt("0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe"),
        BigInt("0x0")
    ],
    [
        BigInt("0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffff"),
        BigInt("0x0")
    ]
].map((e)=>Ie.fromBigTuple(e)), je = BigInt("0xd201000000010000"), Fe = E(je), Ge = ({ c0: e, c1: t }, { c0: c, c1: a })=>({
        c0: Ne.add(e, c),
        c1: Ne.add(t, a)
    }), De = ({ c0: e, c1: t }, { c0: c, c1: a })=>({
        c0: Ne.sub(e, c),
        c1: Ne.sub(t, a)
    }), Ve = ({ c0: e, c1: t }, c)=>{
    if ("bigint" == typeof c) return {
        c0: Ne.mul(e, c),
        c1: Ne.mul(t, c)
    };
    let { c0: a, c1: f } = c, r = Ne.mul(e, a), n = Ne.mul(t, f);
    return {
        c0: Ne.add(r, Ne.mulByNonresidue(n)),
        c1: Ne.sub(Ne.mul(Ne.add(e, t), Ne.add(a, f)), Ne.add(r, n))
    };
}, Me = ({ c0: e, c1: t })=>{
    let c = Ne.mul(e, t);
    return {
        c0: Ne.sub(Ne.sub(Ne.mul(Ne.add(Ne.mulByNonresidue(t), e), Ne.add(e, t)), c), Ne.mulByNonresidue(c)),
        c1: Ne.add(c, c)
    };
};
function Ue(e, t) {
    const c = Ie.sqr(e), a = Ie.sqr(t);
    return {
        first: Ie.add(Ie.mulByNonresidue(a), c),
        second: Ie.sub(Ie.sub(Ie.sqr(Ie.add(e, t)), c), a)
    };
}
const Ce = {
    ORDER: Ie.ORDER,
    BITS: 2 * Ie.BITS,
    BYTES: 2 * Ie.BYTES,
    MASK: w(2 * Ie.BITS),
    ZERO: {
        c0: Ne.ZERO,
        c1: Ne.ZERO
    },
    ONE: {
        c0: Ne.ONE,
        c1: Ne.ZERO
    },
    create: (e)=>e,
    isValid: ({ c0: e, c1: t })=>Ne.isValid(e) && Ne.isValid(t),
    is0: ({ c0: e, c1: t })=>Ne.is0(e) && Ne.is0(t),
    neg: ({ c0: e, c1: t })=>({
            c0: Ne.neg(e),
            c1: Ne.neg(t)
        }),
    eql: ({ c0: e, c1: t }, { c0: c, c1: a })=>Ne.eql(e, c) && Ne.eql(t, a),
    sqrt: ()=>{
        throw new Error("Not implemented");
    },
    inv: ({ c0: e, c1: t })=>{
        let c = Ne.inv(Ne.sub(Ne.sqr(e), Ne.mulByNonresidue(Ne.sqr(t))));
        return {
            c0: Ne.mul(e, c),
            c1: Ne.neg(Ne.mul(t, c))
        };
    },
    div: (e, t)=>Ce.mul(e, "bigint" == typeof t ? ye.inv(ye.create(t)) : Ce.inv(t)),
    pow: (e, t)=>D(Ce, e, t),
    invertBatch: (e)=>V(Ce, e),
    add: Ge,
    sub: De,
    mul: Ve,
    sqr: Me,
    addN: Ge,
    subN: De,
    mulN: Ve,
    sqrN: Me,
    fromBytes: (e)=>{
        if (e.length !== Ce.BYTES) throw new Error(`fromBytes wrong length=${e.length}`);
        return {
            c0: Ne.fromBytes(e.subarray(0, Ne.BYTES)),
            c1: Ne.fromBytes(e.subarray(Ne.BYTES))
        };
    },
    toBytes: ({ c0: e, c1: t })=>B(Ne.toBytes(e), Ne.toBytes(t)),
    cmov: ({ c0: e, c1: t }, { c0: c, c1: a }, f)=>({
            c0: Ne.cmov(e, c, f),
            c1: Ne.cmov(t, a, f)
        }),
    fromBigTwelve: (e)=>({
            c0: Ne.fromBigSix(e.slice(0, 6)),
            c1: Ne.fromBigSix(e.slice(6, 12))
        }),
    frobeniusMap (e, t) {
        const c = Ne.frobeniusMap(e.c0, t), { c0: a, c1: f, c2: r } = Ne.frobeniusMap(e.c1, t), n = Ye[t % 12];
        return {
            c0: c,
            c1: Ne.create({
                c0: Ie.mul(a, n),
                c1: Ie.mul(f, n),
                c2: Ie.mul(r, n)
            })
        };
    },
    multiplyBy014: ({ c0: e, c1: t }, c, a, f)=>{
        let r = Ne.multiplyBy01(e, c, a), n = Ne.multiplyBy1(t, f);
        return {
            c0: Ne.add(Ne.mulByNonresidue(n), r),
            c1: Ne.sub(Ne.sub(Ne.multiplyBy01(Ne.add(t, e), c, Ie.add(a, f)), r), n)
        };
    },
    multiplyByFp2: ({ c0: e, c1: t }, c)=>({
            c0: Ne.multiplyByFp2(e, c),
            c1: Ne.multiplyByFp2(t, c)
        }),
    conjugate: ({ c0: e, c1: t })=>({
            c0: e,
            c1: Ne.neg(t)
        }),
    _cyclotomicSquare: ({ c0: e, c1: t })=>{
        const { c0: c, c1: a, c2: f } = e, { c0: r, c1: n, c2: d } = t, { first: i, second: o } = Ue(c, n), { first: b, second: s } = Ue(r, f), { first: u, second: l } = Ue(a, d);
        let m = Ie.mulByNonresidue(l);
        return {
            c0: Ne.create({
                c0: Ie.add(Ie.mul(Ie.sub(i, c), se), i),
                c1: Ie.add(Ie.mul(Ie.sub(b, a), se), b),
                c2: Ie.add(Ie.mul(Ie.sub(u, f), se), u)
            }),
            c1: Ne.create({
                c0: Ie.add(Ie.mul(Ie.add(m, r), se), m),
                c1: Ie.add(Ie.mul(Ie.add(o, n), se), o),
                c2: Ie.add(Ie.mul(Ie.add(s, d), se), s)
            })
        };
    },
    _cyclotomicExp (e, t) {
        let c = Ce.ONE;
        for(let a = Fe - 1; a >= 0; a--)c = Ce._cyclotomicSquare(c), h1(t, a) && (c = Ce.mul(c, e));
        return c;
    },
    finalExponentiate: (e)=>{
        const t = je, c = Ce.div(Ce.frobeniusMap(e, 6), e), a = Ce.mul(Ce.frobeniusMap(c, 2), c), f = Ce.conjugate(Ce._cyclotomicExp(a, t)), r = Ce.mul(Ce.conjugate(Ce._cyclotomicSquare(a)), f), n = Ce.conjugate(Ce._cyclotomicExp(r, t)), d = Ce.conjugate(Ce._cyclotomicExp(n, t)), i = Ce.mul(Ce.conjugate(Ce._cyclotomicExp(d, t)), Ce._cyclotomicSquare(f)), o = Ce.conjugate(Ce._cyclotomicExp(i, t)), b = Ce.frobeniusMap(Ce.mul(f, d), 2), s = Ce.frobeniusMap(Ce.mul(n, a), 3), u = Ce.frobeniusMap(Ce.mul(i, Ce.conjugate(a)), 1), l = Ce.mul(Ce.mul(o, Ce.conjugate(r)), a);
        return Ce.mul(Ce.mul(Ce.mul(b, s), u), l);
    }
}, Ye = [
    [
        BigInt("0x1"),
        BigInt("0x0")
    ],
    [
        BigInt("0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8"),
        BigInt("0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3")
    ],
    [
        BigInt("0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffff"),
        BigInt("0x0")
    ],
    [
        BigInt("0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2"),
        BigInt("0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09")
    ],
    [
        BigInt("0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe"),
        BigInt("0x0")
    ],
    [
        BigInt("0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995"),
        BigInt("0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116")
    ],
    [
        BigInt("0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa"),
        BigInt("0x0")
    ],
    [
        BigInt("0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3"),
        BigInt("0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8")
    ],
    [
        BigInt("0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac"),
        BigInt("0x0")
    ],
    [
        BigInt("0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09"),
        BigInt("0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2")
    ],
    [
        BigInt("0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaad"),
        BigInt("0x0")
    ],
    [
        BigInt("0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116"),
        BigInt("0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995")
    ]
].map((e)=>Ie.fromBigTuple(e)), Le = H(Ie, [
    [
        [
            "0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6",
            "0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6"
        ],
        [
            "0x0",
            "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a"
        ],
        [
            "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e",
            "0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d"
        ],
        [
            "0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1",
            "0x0"
        ]
    ],
    [
        [
            "0x0",
            "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63"
        ],
        [
            "0xc",
            "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f"
        ],
        [
            "0x1",
            "0x0"
        ]
    ],
    [
        [
            "0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706",
            "0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706"
        ],
        [
            "0x0",
            "0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be"
        ],
        [
            "0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c",
            "0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f"
        ],
        [
            "0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10",
            "0x0"
        ]
    ],
    [
        [
            "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb",
            "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb"
        ],
        [
            "0x0",
            "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3"
        ],
        [
            "0x12",
            "0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99"
        ],
        [
            "0x1",
            "0x0"
        ]
    ]
].map((e)=>e.map((e)=>Ie.fromBigTuple(e.map(BigInt))))), $e = H(ye, [
    [
        "0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7",
        "0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb",
        "0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0",
        "0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861",
        "0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9",
        "0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983",
        "0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84",
        "0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e",
        "0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317",
        "0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e",
        "0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b",
        "0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229"
    ],
    [
        "0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c",
        "0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff",
        "0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19",
        "0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8",
        "0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e",
        "0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5",
        "0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a",
        "0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e",
        "0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641",
        "0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a",
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
    ],
    [
        "0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33",
        "0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696",
        "0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6",
        "0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb",
        "0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb",
        "0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0",
        "0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2",
        "0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29",
        "0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587",
        "0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30",
        "0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132",
        "0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e",
        "0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8",
        "0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133",
        "0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b",
        "0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604"
    ],
    [
        "0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1",
        "0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d",
        "0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2",
        "0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416",
        "0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d",
        "0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac",
        "0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c",
        "0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9",
        "0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a",
        "0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55",
        "0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8",
        "0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092",
        "0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc",
        "0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7",
        "0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f",
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
    ]
].map((e)=>e.map((e)=>BigInt(e)))), ze = ne(Ie, {
    A: Ie.create({
        c0: ye.create(oe),
        c1: ye.create(BigInt(240))
    }),
    B: Ie.create({
        c0: ye.create(BigInt(1012)),
        c1: ye.create(BigInt(1012))
    }),
    Z: Ie.create({
        c0: ye.create(BigInt(-2)),
        c1: ye.create(BigInt(-1))
    })
}), Ke = ne(ye, {
    A: ye.create(BigInt("0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d")),
    B: ye.create(BigInt("0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0")),
    Z: ye.create(BigInt(11))
}), ke = Ne.create({
    c0: Ie.ZERO,
    c1: Ie.ONE,
    c2: Ie.ZERO
}), He = Ce.create({
    c0: ke,
    c1: Ne.ZERO
}), We = Ce.create({
    c0: Ne.ZERO,
    c1: ke
}), [Xe, Je] = Ce.invertBatch([
    He,
    We
]);
function Qe(e, t) {
    const c = t.toAffine(), a = (f = c.x, r = c.y, [
        Ce.mul(Ce.frobeniusMap(Ce.multiplyByFp2(Xe, f), 1), He).c0.c0,
        Ce.mul(Ce.frobeniusMap(Ce.multiplyByFp2(Je, r), 1), We).c0.c0
    ]);
    var f, r;
    return new e(a[0], a[1], Ie.ONE);
}
const et = BigInt("0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac");
function tt(e, t) {
    const c = t.toAffine(), a = (f = c.x, r = c.y, [
        Ie.mul(f, et),
        Ie.neg(r)
    ]);
    var f, r;
    return new e(a[0], a[1], Ie.ONE);
}
const ct = Object.freeze({
    DST: "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_",
    encodeDST: "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_",
    p: ye.ORDER,
    m: 2,
    k: 128,
    expand: "xmd",
    hash: d
}), at = rt(ye.toBytes(oe), {
    infinity: !0,
    compressed: !0
});
function ft(e) {
    const t = 224 & (e = e.slice())[0], c = !!(t >> 7 & 1), a = !!(t >> 6 & 1), f = !!(t >> 5 & 1);
    return e[0] &= 31, {
        compressed: c,
        infinity: a,
        sort: f,
        value: e
    };
}
function rt(e, t) {
    if (224 & e[0]) throw new Error("setMask: non-empty mask");
    return t.compressed && (e[0] |= 128), t.infinity && (e[0] |= 64), t.sort && (e[0] |= 32), e;
}
function nt(e) {
    e.assertValidity();
    const t = e.equals(it.G1.ProjectivePoint.ZERO), { x: c, y: a } = e.toAffine();
    if (t) return at.slice();
    const f = ye.ORDER, r = Boolean(a * se / f);
    return rt(p1(c, ye.BYTES), {
        compressed: !0,
        sort: r
    });
}
function dt(e) {
    e.assertValidity();
    const t = ye.BYTES;
    if (e.equals(it.G2.ProjectivePoint.ZERO)) return B(at, p1(oe, t));
    const { x: c, y: a } = e.toAffine(), { re: f, im: r } = Ie.reim(c), { re: n, im: d } = Ie.reim(a), i = Boolean((d > oe ? d * se : n * se) / ye.ORDER & be), o = f;
    return B(rt(p1(r, t), {
        sort: i,
        compressed: !0
    }), p1(o, t));
}
const it = function(e) {
    const { Fp: t, Fr: c, Fp2: a, Fp6: f, Fp12: r } = e.fields, n = E(e.params.x);
    function d(t) {
        const { x: c, y: f } = t, r = c, d = f;
        let i = r, o = d, b = a.ONE, s = [];
        for(let t = n - 2; t >= 0; t--){
            let c = a.sqr(o), f = a.sqr(b), n = a.multiplyByB(a.mul(f, ie)), u = a.mul(n, ie), l = a.sub(a.sub(a.sqr(a.add(o, b)), f), c);
            if (s.push([
                a.sub(n, c),
                a.mul(a.sqr(i), ie),
                a.neg(l)
            ]), i = a.div(a.mul(a.mul(a.sub(c, u), i), o), de), o = a.sub(a.sqr(a.div(a.add(c, u), de)), a.mul(a.sqr(n), ie)), b = a.mul(c, l), h1(e.params.x, t)) {
                let e = a.sub(o, a.mul(d, b)), t = a.sub(i, a.mul(r, b));
                s.push([
                    a.sub(a.mul(e, r), a.mul(t, d)),
                    a.neg(e),
                    t
                ]);
                let c = a.sqr(t), f = a.mul(c, t), n = a.mul(c, i), u = a.add(a.sub(f, a.mul(n, de)), a.mul(a.sqr(e), b));
                i = a.mul(t, u), o = a.sub(a.mul(a.sub(n, u), e), a.mul(f, o)), b = a.mul(b, f);
            }
        }
        return s;
    }
    function i(t, c) {
        const { x: f } = e.params, d = c[0], i = c[1];
        let o = r.ONE;
        for(let e = 0, c = n - 2; c >= 0; c--, e++){
            const n = t[e];
            if (o = r.multiplyBy014(o, n[0], a.mul(n[1], d), a.mul(n[2], i)), h1(f, c)) {
                e += 1;
                const c = t[e];
                o = r.multiplyBy014(o, c[0], a.mul(c[1], d), a.mul(c[2], i));
            }
            0 !== c && (o = r.sqr(o));
        }
        return r.conjugate(o);
    }
    const o = {
        randomPrivateKey: ()=>{
            const t = Y(c.ORDER);
            return function(e, t, c = !1) {
                const a = e.length, f = C(t), r = Y(t);
                if (a < 16 || a < r || a > 1024) throw new Error(`expected ${r}-1024 bytes of input, got ${a}`);
                const n = N10(c ? l1(e) : m1(e), t - S) + S;
                return c ? g1(n, f) : p1(n, f);
            }(e.randomBytes(t), c.ORDER);
        },
        calcPairingPrecomputes: d
    }, b = re({
        n: c.ORDER,
        ...e.G1
    }), s = Object.assign(b, W(b.ProjectivePoint, e.G1.mapToCurve, {
        ...e.htfDefaults,
        ...e.G1.htfDefaults
    })), u = re({
        n: c.ORDER,
        ...e.G2
    }), B = Object.assign(u, W(u.ProjectivePoint, e.G2.mapToCurve, {
        ...e.htfDefaults,
        ...e.G2.htfDefaults
    })), { ShortSignature: x } = e.G1, { Signature: w } = e.G2;
    function v(e, t, c = !0) {
        if (e.equals(s.ProjectivePoint.ZERO) || t.equals(B.ProjectivePoint.ZERO)) throw new Error("pairing is not available for ZERO point");
        e.assertValidity(), t.assertValidity();
        const a = e.toAffine(), f = i(function(e) {
            const t = e;
            return t._PPRECOMPUTES || (t._PPRECOMPUTES = d(e.toAffine())), t._PPRECOMPUTES;
        }(t), [
            a.x,
            a.y
        ]);
        return c ? r.finalExponentiate(f) : f;
    }
    function I(e) {
        return e instanceof s.ProjectivePoint ? e : s.ProjectivePoint.fromHex(e);
    }
    function O(e, t) {
        return e instanceof s.ProjectivePoint ? e : s.hashToCurve(y("point", e), t);
    }
    function R(e) {
        return e instanceof B.ProjectivePoint ? e : w.fromHex(e);
    }
    function q(e, t) {
        return e instanceof B.ProjectivePoint ? e : B.hashToCurve(y("point", e), t);
    }
    return s.ProjectivePoint.BASE._setWindowSize(4), {
        getPublicKey: function(e) {
            return s.ProjectivePoint.fromPrivateKey(e).toRawBytes(!0);
        },
        getPublicKeyForShortSignatures: function(e) {
            return B.ProjectivePoint.fromPrivateKey(e).toRawBytes(!0);
        },
        sign: function(e, t, c) {
            const a = q(e, c);
            a.assertValidity();
            const f = a.multiply(s.normPrivateKeyToScalar(t));
            return e instanceof B.ProjectivePoint ? f : w.toRawBytes(f);
        },
        signShortSignature: function(e, t, c) {
            const a = O(e, c);
            a.assertValidity();
            const f = a.multiply(s.normPrivateKeyToScalar(t));
            return e instanceof s.ProjectivePoint ? f : x.toRawBytes(f);
        },
        verify: function(e, t, c, a) {
            const f = I(c), n = q(t, a), d = s.ProjectivePoint.BASE, i = R(e), o = v(f.negate(), n, !1), b = v(d, i, !1), u = r.finalExponentiate(r.mul(b, o));
            return r.eql(u, r.ONE);
        },
        verifyBatch: function(e, t, c, a) {
            if (!t.length) throw new Error("Expected non-empty messages array");
            if (c.length !== t.length) throw new Error("Pubkey count should equal msg count");
            const f = R(e), n = t.map((e)=>q(e, a)), d = c.map(I);
            try {
                const e = [];
                for (const t of new Set(n)){
                    const c = n.reduce((e, c, a)=>c === t ? e.add(d[a]) : e, s.ProjectivePoint.ZERO);
                    e.push(v(c, t, !1));
                }
                e.push(v(s.ProjectivePoint.BASE.negate(), f, !1));
                const t = e.reduce((e, t)=>r.mul(e, t), r.ONE), c = r.finalExponentiate(t);
                return r.eql(c, r.ONE);
            } catch  {
                return !1;
            }
        },
        verifyShortSignature: function(e, t, c, a) {
            const f = R(c), n = O(t, a), d = B.ProjectivePoint.BASE, i = I(e), o = v(n, f, !1), b = v(i, d.negate(), !1), s = r.finalExponentiate(r.mul(b, o));
            return r.eql(s, r.ONE);
        },
        aggregatePublicKeys: function(e) {
            if (!e.length) throw new Error("Expected non-empty array");
            const t = e.map(I).reduce((e, t)=>e.add(t), s.ProjectivePoint.ZERO);
            return e[0] instanceof s.ProjectivePoint ? (t.assertValidity(), t) : t.toRawBytes(!0);
        },
        aggregateSignatures: function(e) {
            if (!e.length) throw new Error("Expected non-empty array");
            const t = e.map(R).reduce((e, t)=>e.add(t), B.ProjectivePoint.ZERO);
            return e[0] instanceof B.ProjectivePoint ? (t.assertValidity(), t) : w.toRawBytes(t);
        },
        aggregateShortSignatures: function(e) {
            if (!e.length) throw new Error("Expected non-empty array");
            const t = e.map(I).reduce((e, t)=>e.add(t), s.ProjectivePoint.ZERO);
            return e[0] instanceof s.ProjectivePoint ? (t.assertValidity(), t) : x.toRawBytes(t);
        },
        millerLoop: i,
        pairing: v,
        G1: s,
        G2: B,
        Signature: w,
        ShortSignature: x,
        fields: {
            Fr: c,
            Fp: t,
            Fp2: a,
            Fp6: f,
            Fp12: r
        },
        params: {
            x: e.params.x,
            r: e.params.r,
            G1b: e.G1.b,
            G2b: e.G2.b
        },
        utils: o
    };
}({
    fields: {
        Fp: ye,
        Fp2: Ie,
        Fp6: Ne,
        Fp12: Ce,
        Fr: Be
    },
    G1: {
        Fp: ye,
        h: BigInt("0x396c8c005555e1568c00aaab0000aaab"),
        Gx: BigInt("0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb"),
        Gy: BigInt("0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1"),
        a: ye.ZERO,
        b: le,
        htfDefaults: {
            ...ct,
            m: 1,
            DST: "BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_"
        },
        wrapPrivateKey: !0,
        allowInfinityPoint: !0,
        isTorsionFree: (e, t)=>{
            const c = BigInt("0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe"), a = new e(ye.mul(t.px, c), t.py, t.pz);
            return t.multiplyUnsafe(it.params.x).negate().multiplyUnsafe(it.params.x).equals(a);
        },
        clearCofactor: (e, t)=>t.multiplyUnsafe(it.params.x).add(t),
        mapToCurve: (e)=>{
            const { x: t, y: c } = Ke(ye.create(e[0]));
            return $e(t, c);
        },
        fromBytes: (e)=>{
            const { compressed: t, infinity: c, sort: a, value: f } = ft(e);
            if (48 === f.length && t) {
                const e = ye.ORDER, t = l1(f), r = ye.create(t & ye.MASK);
                if (c) {
                    if (r !== oe) throw new Error("G1: non-empty compressed point at infinity");
                    return {
                        x: oe,
                        y: oe
                    };
                }
                const n = ye.add(ye.pow(r, ue), ye.create(it.params.G1b));
                let d = ye.sqrt(n);
                if (!d) throw new Error("Invalid compressed G1 point");
                return d * se / e !== BigInt(a) && (d = ye.neg(d)), {
                    x: ye.create(r),
                    y: ye.create(d)
                };
            }
            if (96 !== f.length || t) throw new Error("Invalid point G1, expected 48/96 bytes");
            {
                const e = l1(f.subarray(0, ye.BYTES)), t = l1(f.subarray(ye.BYTES));
                if (c) {
                    if (e !== oe || t !== oe) throw new Error("G1: non-empty point at infinity");
                    return it.G1.ProjectivePoint.ZERO.toAffine();
                }
                return {
                    x: ye.create(e),
                    y: ye.create(t)
                };
            }
        },
        toBytes: (e, t, c)=>{
            const a = t.equals(e.ZERO), { x: f, y: r } = t.toAffine();
            if (c) {
                if (a) return at.slice();
                const e = ye.ORDER, t = Boolean(r * se / e);
                return rt(p1(f, ye.BYTES), {
                    compressed: !0,
                    sort: t
                });
            }
            if (a) {
                return B(new Uint8Array([
                    64
                ]), new Uint8Array(2 * ye.BYTES - 1));
            }
            return B(p1(f, ye.BYTES), p1(r, ye.BYTES));
        },
        ShortSignature: {
            fromHex (e) {
                const { infinity: t, sort: c, value: a } = ft(y("signatureHex", e, 48)), f = ye.ORDER, r = l1(a);
                if (t) return it.G1.ProjectivePoint.ZERO;
                const n = ye.create(r & ye.MASK), d = ye.add(ye.pow(n, ue), ye.create(it.params.G1b));
                let i = ye.sqrt(d);
                if (!i) throw new Error("Invalid compressed G1 point");
                const o = BigInt(c);
                i * se / f !== o && (i = ye.neg(i));
                const b = it.G1.ProjectivePoint.fromAffine({
                    x: n,
                    y: i
                });
                return b.assertValidity(), b;
            },
            toRawBytes: (e)=>nt(e),
            toHex: (e)=>i1(nt(e))
        }
    },
    G2: {
        Fp: Ie,
        h: BigInt("0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5"),
        Gx: Ie.fromBigTuple([
            BigInt("0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"),
            BigInt("0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e")
        ]),
        Gy: Ie.fromBigTuple([
            BigInt("0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801"),
            BigInt("0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be")
        ]),
        a: Ie.ZERO,
        b: Ie.fromBigTuple([
            le,
            le
        ]),
        hEff: BigInt("0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551"),
        htfDefaults: {
            ...ct
        },
        wrapPrivateKey: !0,
        allowInfinityPoint: !0,
        mapToCurve: (e)=>{
            const { x: t, y: c } = ze(Ie.fromBigTuple(e));
            return Le(t, c);
        },
        isTorsionFree: (e, t)=>t.multiplyUnsafe(it.params.x).negate().equals(Qe(e, t)),
        clearCofactor: (e, t)=>{
            const c = it.params.x;
            let a = t.multiplyUnsafe(c).negate(), f = Qe(e, t), r = t.double();
            r = tt(e, r), r = r.subtract(f), f = a.add(f), f = f.multiplyUnsafe(c).negate(), r = r.add(f), r = r.subtract(a);
            return r.subtract(t);
        },
        fromBytes: (e)=>{
            const { compressed: t, infinity: c, sort: a, value: f } = ft(e);
            if (!t && !c && a || !t && c && a || a && c && t) throw new Error("Invalid encoding flag: " + (224 & e[0]));
            const r = ye.BYTES, n = (e, t, c)=>l1(e.slice(t, c));
            if (96 === f.length && t) {
                const e = it.params.G2b, t = ye.ORDER;
                if (c) {
                    if (f.reduce((e, t)=>0 !== e ? t + 1 : t, 0) > 0) throw new Error("Invalid compressed G2 point");
                    return {
                        x: Ie.ZERO,
                        y: Ie.ZERO
                    };
                }
                const d = n(f, 0, r), i = n(f, r, 2 * r), o = Ie.create({
                    c0: ye.create(i),
                    c1: ye.create(d)
                }), b = Ie.add(Ie.pow(o, ue), e);
                let s = Ie.sqrt(b);
                const u = s.c1 === oe ? s.c0 * se / t : s.c1 * se / t ? be : oe;
                return s = a && u > 0 ? s : Ie.neg(s), {
                    x: o,
                    y: s
                };
            }
            if (192 !== f.length || t) throw new Error("Invalid point G2, expected 96/192 bytes");
            {
                if (c) {
                    if (f.reduce((e, t)=>0 !== e ? t + 1 : t, 0) > 0) throw new Error("Invalid uncompressed G2 point");
                    return {
                        x: Ie.ZERO,
                        y: Ie.ZERO
                    };
                }
                const e = n(f, 0, r), t = n(f, r, 2 * r), a = n(f, 2 * r, 3 * r), d = n(f, 3 * r, 4 * r);
                return {
                    x: Ie.fromBigTuple([
                        t,
                        e
                    ]),
                    y: Ie.fromBigTuple([
                        d,
                        a
                    ])
                };
            }
        },
        toBytes: (e, t, c)=>{
            const { BYTES: a, ORDER: f } = ye, r = t.equals(e.ZERO), { x: n, y: d } = t.toAffine();
            if (c) {
                if (r) return B(at, p1(oe, a));
                const e = Boolean(d.c1 === oe ? d.c0 * se / f : d.c1 * se / f);
                return B(rt(p1(n.c1, a), {
                    compressed: !0,
                    sort: e
                }), p1(n.c0, a));
            }
            {
                if (r) return B(new Uint8Array([
                    64
                ]), new Uint8Array(4 * a - 1));
                const { re: e, im: t } = Ie.reim(n), { re: c, im: f } = Ie.reim(d);
                return B(p1(t, a), p1(e, a), p1(f, a), p1(c, a));
            }
        },
        Signature: {
            fromHex (e) {
                const { infinity: t, sort: c, value: a } = ft(y("signatureHex", e)), f = ye.ORDER, r = a.length / 2;
                if (48 !== r && 96 !== r) throw new Error("Invalid compressed signature length, must be 96 or 192");
                const n = l1(a.slice(0, r)), d = l1(a.slice(r));
                if (t) return it.G2.ProjectivePoint.ZERO;
                const i = ye.create(n & ye.MASK), o = ye.create(d), b = Ie.create({
                    c0: o,
                    c1: i
                }), s = Ie.add(Ie.pow(b, ue), it.params.G2b);
                let u = Ie.sqrt(s);
                if (!u) throw new Error("Failed to find a square root");
                const { re: m, im: p } = Ie.reim(u), g = BigInt(c);
                (p > oe && p * se / f !== g || p === oe && m * se / f !== g) && (u = Ie.neg(u));
                const B = it.G2.ProjectivePoint.fromAffine({
                    x: b,
                    y: u
                });
                return B.assertValidity(), B;
            },
            toRawBytes: (e)=>dt(e),
            toHex: (e)=>i1(dt(e))
        }
    },
    params: {
        x: je,
        r: Be.ORDER
    },
    htfDefaults: ct,
    hash: d,
    randomBytes: O
});
"object" == typeof globalThis && "crypto" in globalThis ? globalThis.crypto : void 0;
function t1(t11, ...e) {
    if (!((s = t11) instanceof Uint8Array || ArrayBuffer.isView(s) && "Uint8Array" === s.constructor.name)) throw new Error("Uint8Array expected");
    var s;
    if (e.length > 0 && !e.includes(t11.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t11.length);
}
function e1(t, e = !0) {
    if (t.destroyed) throw new Error("Hash instance has been destroyed");
    if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function s3(t) {
    return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function n2(t, e) {
    return t << 32 - e | t >>> e;
}
function i2(e) {
    return "string" == typeof e && (e = function(t) {
        if ("string" != typeof t) throw new Error("utf8ToBytes expected string, got " + typeof t);
        return new Uint8Array((new TextEncoder).encode(t));
    }(e)), t1(e), e;
}
class r4 {
    clone() {
        return this._cloneInto();
    }
}
function o3(t) {
    const e = (e)=>t().update(i2(e)).digest(), s = t();
    return e.outputLen = s.outputLen, e.blockLen = s.blockLen, e.create = ()=>t(), e;
}
function h2(t, e, s) {
    return t & e ^ t & s ^ e & s;
}
class u2 extends r4 {
    constructor(t, e, n, i){
        super(), this.blockLen = t, this.outputLen = e, this.padOffset = n, this.isLE = i, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = s3(this.buffer);
    }
    update(t) {
        e1(this);
        const { view: n, buffer: r, blockLen: o } = this, h = (t = i2(t)).length;
        for(let e = 0; e < h;){
            const i = Math.min(o - this.pos, h - e);
            if (i !== o) r.set(t.subarray(e, e + i), this.pos), this.pos += i, e += i, this.pos === o && (this.process(n, 0), this.pos = 0);
            else {
                const n = s3(t);
                for(; o <= h - e; e += o)this.process(n, e);
            }
        }
        return this.length += t.length, this.roundClean(), this;
    }
    digestInto(n) {
        e1(this), function(e, s) {
            t1(e);
            const n = s.outputLen;
            if (e.length < n) throw new Error("digestInto() expects output buffer of length at least " + n);
        }(n, this), this.finished = !0;
        const { buffer: i, view: r, blockLen: o, isLE: h } = this;
        let { pos: u } = this;
        i[u++] = 128, this.buffer.subarray(u).fill(0), this.padOffset > o - u && (this.process(r, 0), u = 0);
        for(let t = u; t < o; t++)i[t] = 0;
        !function(t, e, s, n) {
            if ("function" == typeof t.setBigUint64) return t.setBigUint64(e, s, n);
            const i = BigInt(32), r = BigInt(4294967295), o = Number(s >> i & r), h = Number(s & r), u = n ? 4 : 0, f = n ? 0 : 4;
            t.setUint32(e + u, o, n), t.setUint32(e + f, h, n);
        }(r, o - 8, BigInt(8 * this.length), h), this.process(r, 0);
        const f = s3(n), c = this.outputLen;
        if (c % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
        const l = c / 4, a = this.get();
        if (l > a.length) throw new Error("_sha2: outputLen bigger than state");
        for(let t = 0; t < l; t++)f.setUint32(4 * t, a[t], h);
    }
    digest() {
        const { buffer: t, outputLen: e } = this;
        this.digestInto(t);
        const s = t.slice(0, e);
        return this.destroy(), s;
    }
    _cloneInto(t) {
        t || (t = new this.constructor), t.set(...this.get());
        const { blockLen: e, buffer: s, length: n, finished: i, destroyed: r, pos: o } = this;
        return t.length = n, t.pos = o, t.finished = i, t.destroyed = r, n % e && t.buffer.set(s), t;
    }
}
const f3 = new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
]), c2 = new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
]), l2 = new Uint32Array(64);
class a2 extends u2 {
    constructor(){
        super(64, 32, 8, !1), this.A = 0 | c2[0], this.B = 0 | c2[1], this.C = 0 | c2[2], this.D = 0 | c2[3], this.E = 0 | c2[4], this.F = 0 | c2[5], this.G = 0 | c2[6], this.H = 0 | c2[7];
    }
    get() {
        const { A: t, B: e, C: s, D: n, E: i, F: r, G: o, H: h } = this;
        return [
            t,
            e,
            s,
            n,
            i,
            r,
            o,
            h
        ];
    }
    set(t, e, s, n, i, r, o, h) {
        this.A = 0 | t, this.B = 0 | e, this.C = 0 | s, this.D = 0 | n, this.E = 0 | i, this.F = 0 | r, this.G = 0 | o, this.H = 0 | h;
    }
    process(t, e) {
        for(let s = 0; s < 16; s++, e += 4)l2[s] = t.getUint32(e, !1);
        for(let t = 16; t < 64; t++){
            const e = l2[t - 15], s = l2[t - 2], i = n2(e, 7) ^ n2(e, 18) ^ e >>> 3, r = n2(s, 17) ^ n2(s, 19) ^ s >>> 10;
            l2[t] = r + l2[t - 7] + i + l2[t - 16] | 0;
        }
        let { A: s, B: i, C: r, D: o, E: u, F: c, G: a, H: p } = this;
        for(let t = 0; t < 64; t++){
            const e = p + (n2(u, 6) ^ n2(u, 11) ^ n2(u, 25)) + ((d = u) & c ^ ~d & a) + f3[t] + l2[t] | 0, g = (n2(s, 2) ^ n2(s, 13) ^ n2(s, 22)) + h2(s, i, r) | 0;
            p = a, a = c, c = u, u = o + e | 0, o = r, r = i, i = s, s = e + g | 0;
        }
        var d;
        s = s + this.A | 0, i = i + this.B | 0, r = r + this.C | 0, o = o + this.D | 0, u = u + this.E | 0, c = c + this.F | 0, a = a + this.G | 0, p = p + this.H | 0, this.set(s, i, r, o, u, c, a, p);
    }
    roundClean() {
        l2.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
    }
}
class p2 extends a2 {
    constructor(){
        super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
    }
}
o3(()=>new a2), o3(()=>new p2);
BigInt(0), BigInt(1), BigInt(2);
Array.from({
    length: 256
}, (t, n)=>n.toString(16).padStart(2, "0"));
var r5 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
function i3(t) {
    return t && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
var o4 = {}, a3 = {}, s4 = {}, u3 = {};
Object.defineProperty(u3, "__esModule", {
    value: !0
}), u3.LIB_VERSION = void 0, u3.LIB_VERSION = "1.2.6", function(t) {
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.retryOnError = t.jsonOrError = t.defaultHttpOptions = t.roundTime = t.roundAt = t.sleep = void 0;
    const e = u3;
    t.sleep = function(t) {
        return new Promise((e)=>{
            t <= 0 && e(), setTimeout(e, t);
        });
    }, t.roundAt = function(t, e) {
        if (!Number.isFinite(t)) throw new Error("Cannot use Infinity or NaN as a beacon time");
        if (t < 1e3 * e.genesis_time) throw Error("Cannot request a round before the genesis time");
        return Math.floor((t - 1e3 * e.genesis_time) / (1e3 * e.period)) + 1;
    }, t.roundTime = function(t, e) {
        if (!Number.isFinite(e)) throw new Error("Cannot use Infinity or NaN as a round number");
        return e = e < 0 ? 0 : e, 1e3 * (t.genesis_time + (e - 1) * t.period);
    }, t.defaultHttpOptions = {
        userAgent: `drand-client-${e.LIB_VERSION}`
    }, t.jsonOrError = async function(e, n = t.defaultHttpOptions) {
        const r = {
            ...n.headers
        };
        n.userAgent && (r["User-Agent"] = n.userAgent);
        const i = await fetch(e, {
            headers: r
        });
        if (!i.ok) throw Error(`Error response fetching ${e} - got ${i.status}`);
        return await i.json();
    }, t.retryOnError = async function t(e, n) {
        try {
            return await e();
        } catch (r) {
            if (0 === n) throw r;
            return t(e, n - 1);
        }
    };
}(s4), Object.defineProperty(a3, "__esModule", {
    value: !0
}), a3.HttpChain = void 0;
const f4 = o4, c3 = s4;
class h3 {
    baseUrl;
    options;
    httpOptions;
    constructor(t, e = f4.defaultChainOptions, n = {}){
        this.baseUrl = t, this.options = e, this.httpOptions = n;
    }
    async info() {
        const t = await (0, c3.jsonOrError)(`${this.baseUrl}/info`, this.httpOptions);
        if (this.options.chainVerificationParams && !function(t, e) {
            return t.hash === e.chainHash && t.public_key === e.publicKey;
        }(t, this.options.chainVerificationParams)) throw Error(`The chain info retrieved from ${this.baseUrl} did not match the verification params!`);
        return t;
    }
}
a3.HttpChain = h3;
a3.default = class {
    baseUrl;
    options;
    chain;
    cachedInfo;
    constructor(t, e = f4.defaultChainOptions){
        this.baseUrl = t, this.options = e, this.chain = new h3(t, e);
    }
    async info() {
        return this.cachedInfo || (this.cachedInfo = await this.chain.info()), this.cachedInfo;
    }
};
var l3 = {};
Object.defineProperty(l3, "__esModule", {
    value: !0
});
const d2 = o4, p3 = s4;
function b1(t, e) {
    return e.noCache ? `${t}?${Date.now()}` : t;
}
l3.default = class {
    someChain;
    options;
    httpOptions;
    constructor(t, e = d2.defaultChainOptions, n = p3.defaultHttpOptions){
        this.someChain = t, this.options = e, this.httpOptions = n;
    }
    async get(t) {
        const e = b1(`${this.someChain.baseUrl}/public/${t}`, this.options);
        return await (0, p3.jsonOrError)(e, this.httpOptions);
    }
    async latest() {
        const t = b1(`${this.someChain.baseUrl}/public/latest`, this.options);
        return await (0, p3.jsonOrError)(t, this.httpOptions);
    }
    chain() {
        return this.someChain;
    }
};
var g2 = {}, _2 = {};
Object.defineProperty(_2, "__esModule", {
    value: !0
}), _2.createSpeedTest = void 0, _2.createSpeedTest = function(t, e, n = 5) {
    let r = new y1(n), i = null;
    const o = async ()=>{
        const e = Date.now();
        try {
            await t(), r.add(Date.now() - e);
        } catch (t) {
            r.add(Number.MAX_SAFE_INTEGER);
        }
    };
    return {
        start: ()=>{
            null == i ? i = setInterval(o, e) : console.warn("Attempted to start a speed test, but it had already been started!");
        },
        stop: ()=>{
            null !== i && (clearInterval(i), i = null, r = new y1(n));
        },
        average: ()=>{
            const t = r.get();
            if (0 === t.length) return Number.MAX_SAFE_INTEGER;
            return t.reduce((t, e)=>t + e, 0) / t.length;
        }
    };
};
class y1 {
    capacity;
    values = [];
    constructor(t){
        this.capacity = t;
    }
    add(t) {
        this.values.push(t), this.values.length > this.capacity && this.values.pop();
    }
    get() {
        return this.values;
    }
}
var w1 = r5 && r5.__createBinding || (Object.create ? function(t, e, n, r) {
    void 0 === r && (r = n);
    var i = Object.getOwnPropertyDescriptor(e, n);
    i && !("get" in i ? !e.__esModule : i.writable || i.configurable) || (i = {
        enumerable: !0,
        get: function() {
            return e[n];
        }
    }), Object.defineProperty(t, r, i);
} : function(t, e, n, r) {
    void 0 === r && (r = n), t[r] = e[n];
}), E1 = r5 && r5.__setModuleDefault || (Object.create ? function(t, e) {
    Object.defineProperty(t, "default", {
        enumerable: !0,
        value: e
    });
} : function(t, e) {
    t.default = e;
}), v2 = r5 && r5.__importStar || function(t) {
    if (t && t.__esModule) return t;
    var e = {};
    if (null != t) for(var n in t)"default" !== n && Object.prototype.hasOwnProperty.call(t, n) && w1(e, t, n);
    return E1(e, t), e;
}, T1 = r5 && r5.__importDefault || function(t) {
    return t && t.__esModule ? t : {
        default: t
    };
};
Object.defineProperty(g2, "__esModule", {
    value: !0
});
const m2 = o4, A1 = v2(a3), C1 = _2, I1 = T1(l3);
g2.default = class {
    baseUrls;
    options;
    speedTestIntervalMs;
    speedTests = [];
    speedTestHttpOptions = {
        userAgent: "drand-web-client-speedtest"
    };
    constructor(t, e = m2.defaultChainOptions, n = 3e5){
        if (this.baseUrls = t, this.options = e, this.speedTestIntervalMs = n, 0 === t.length) throw Error("Can't optimise an empty `baseUrls` array!");
    }
    async latest() {
        return new I1.default(this.current(), this.options).latest();
    }
    async get(t) {
        return new I1.default(this.current(), this.options).get(t);
    }
    chain() {
        return this.current();
    }
    start() {
        1 !== this.baseUrls.length ? this.speedTests = this.baseUrls.map((t)=>{
            const e = (0, C1.createSpeedTest)(async ()=>{
                await new A1.HttpChain(t, this.options, this.speedTestHttpOptions).info();
            }, this.speedTestIntervalMs);
            return e.start(), {
                test: e,
                url: t
            };
        }) : console.warn("There was only a single base URL in the `FastestNodeClient` - not running speed testing");
    }
    current() {
        0 === this.speedTests.length && console.warn("You are not currently running speed tests to choose the fastest client. Run `.start()` to speed test");
        const t = this.speedTests.slice().sort((t, e)=>t.test.average() - e.test.average()).shift();
        if (!t) throw Error("Somehow there were no entries to optimise! This should be impossible by now");
        return new A1.default(t.url, this.options);
    }
    stop() {
        this.speedTests.forEach((t)=>t.test.stop()), this.speedTests = [];
    }
};
var N14 = {}, U1 = r5 && r5.__importDefault || function(t) {
    return t && t.__esModule ? t : {
        default: t
    };
};
Object.defineProperty(N14, "__esModule", {
    value: !0
});
const O2 = o4, R1 = U1(a3), P1 = s4;
N14.default = class {
    baseUrl;
    options;
    constructor(t, e = O2.defaultChainOptions){
        this.baseUrl = t, this.options = e;
    }
    async chains() {
        const t = await (0, P1.jsonOrError)(`${this.baseUrl}/chains`);
        if (!Array.isArray(t)) throw Error(`Expected an array from the chains endpoint but got: ${t}`);
        return t.map((t)=>new R1.default(`${this.baseUrl}/${t}`), this.options);
    }
    async health() {
        const t = await fetch(`${this.baseUrl}/health`);
        if (!t.ok) return {
            status: t.status,
            current: -1,
            expected: -1
        };
        const e = await t.json();
        return {
            status: t.status,
            current: e.current ?? -1,
            expected: e.expected ?? -1
        };
    }
};
var B1 = {}, S1 = "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, D1 = [], H1 = [], L1 = "undefined" != typeof Uint8Array ? Uint8Array : Array, F1 = !1;
function M1() {
    F1 = !0;
    for(var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", e = 0; e < 64; ++e)D1[e] = t[e], H1[t.charCodeAt(e)] = e;
    H1["-".charCodeAt(0)] = 62, H1["_".charCodeAt(0)] = 63;
}
function Y1(t, e, n) {
    for(var r, i, o = [], a = e; a < n; a += 3)r = (t[a] << 16) + (t[a + 1] << 8) + t[a + 2], o.push(D1[(i = r) >> 18 & 63] + D1[i >> 12 & 63] + D1[i >> 6 & 63] + D1[63 & i]);
    return o.join("");
}
function j1(t) {
    var e;
    F1 || M1();
    for(var n = t.length, r = n % 3, i = "", o = [], a = 16383, s = 0, u = n - r; s < u; s += a)o.push(Y1(t, s, s + a > u ? u : s + a));
    return 1 === r ? (e = t[n - 1], i += D1[e >> 2], i += D1[e << 4 & 63], i += "==") : 2 === r && (e = (t[n - 2] << 8) + t[n - 1], i += D1[e >> 10], i += D1[e >> 4 & 63], i += D1[e << 2 & 63], i += "="), o.push(i), o.join("");
}
function k1(t, e, n, r, i) {
    var o, a, s = 8 * i - r - 1, u = (1 << s) - 1, f = u >> 1, c = -7, h = n ? i - 1 : 0, l = n ? -1 : 1, d = t[e + h];
    for(h += l, o = d & (1 << -c) - 1, d >>= -c, c += s; c > 0; o = 256 * o + t[e + h], h += l, c -= 8);
    for(a = o & (1 << -c) - 1, o >>= -c, c += r; c > 0; a = 256 * a + t[e + h], h += l, c -= 8);
    if (0 === o) o = 1 - f;
    else {
        if (o === u) return a ? NaN : 1 / 0 * (d ? -1 : 1);
        a += Math.pow(2, r), o -= f;
    }
    return (d ? -1 : 1) * a * Math.pow(2, o - r);
}
function x2(t, e, n, r, i, o) {
    var a, s, u, f = 8 * o - i - 1, c = (1 << f) - 1, h = c >> 1, l = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = r ? 0 : o - 1, p = r ? 1 : -1, b = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;
    for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (s = isNaN(e) ? 1 : 0, a = c) : (a = Math.floor(Math.log(e) / Math.LN2), e * (u = Math.pow(2, -a)) < 1 && (a--, u *= 2), (e += a + h >= 1 ? l / u : l * Math.pow(2, 1 - h)) * u >= 2 && (a++, u /= 2), a + h >= c ? (s = 0, a = c) : a + h >= 1 ? (s = (e * u - 1) * Math.pow(2, i), a += h) : (s = e * Math.pow(2, h - 1) * Math.pow(2, i), a = 0)); i >= 8; t[n + d] = 255 & s, d += p, s /= 256, i -= 8);
    for(a = a << i | s, f += i; f > 0; t[n + d] = 255 & a, d += p, a /= 256, f -= 8);
    t[n + d - p] |= 128 * b;
}
var G1 = {}.toString, K2 = Array.isArray || function(t) {
    return "[object Array]" == G1.call(t);
};
q1.TYPED_ARRAY_SUPPORT = void 0 === S1.TYPED_ARRAY_SUPPORT || S1.TYPED_ARRAY_SUPPORT;
var Q1 = $1();
function $1() {
    return q1.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function V1(t, e) {
    if ($1() < e) throw new RangeError("Invalid typed array length");
    return q1.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = q1.prototype : (null === t && (t = new q1(e)), t.length = e), t;
}
function q1(t, e, n) {
    if (!(q1.TYPED_ARRAY_SUPPORT || this instanceof q1)) return new q1(t, e, n);
    if ("number" == typeof t) {
        if ("string" == typeof e) throw new Error("If encoding is specified then the first argument must be a string");
        return W1(this, t);
    }
    return z2(this, t, e, n);
}
function z2(t, e, n, r) {
    if ("number" == typeof e) throw new TypeError('"value" argument must not be a number');
    return "undefined" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function(t, e, n, r) {
        if (e.byteLength, n < 0 || e.byteLength < n) throw new RangeError("'offset' is out of bounds");
        if (e.byteLength < n + (r || 0)) throw new RangeError("'length' is out of bounds");
        e = void 0 === n && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, n) : new Uint8Array(e, n, r);
        q1.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = q1.prototype : t = J1(t, e);
        return t;
    }(t, e, n, r) : "string" == typeof e ? function(t, e, n) {
        "string" == typeof n && "" !== n || (n = "utf8");
        if (!q1.isEncoding(n)) throw new TypeError('"encoding" must be a valid string encoding');
        var r = 0 | nt1(e, n);
        t = V1(t, r);
        var i = t.write(e, n);
        i !== r && (t = t.slice(0, i));
        return t;
    }(t, e, n) : function(t, e) {
        if (et1(e)) {
            var n = 0 | Z1(e.length);
            return 0 === (t = V1(t, n)).length || e.copy(t, 0, 0, n), t;
        }
        if (e) {
            if ("undefined" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || "length" in e) return "number" != typeof e.length || (r = e.length) != r ? V1(t, 0) : J1(t, e);
            if ("Buffer" === e.type && K2(e.data)) return J1(t, e.data);
        }
        var r;
        throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
    }(t, e);
}
function X1(t) {
    if ("number" != typeof t) throw new TypeError('"size" argument must be a number');
    if (t < 0) throw new RangeError('"size" argument must not be negative');
}
function W1(t, e) {
    if (X1(e), t = V1(t, e < 0 ? 0 : 0 | Z1(e)), !q1.TYPED_ARRAY_SUPPORT) for(var n = 0; n < e; ++n)t[n] = 0;
    return t;
}
function J1(t, e) {
    var n = e.length < 0 ? 0 : 0 | Z1(e.length);
    t = V1(t, n);
    for(var r = 0; r < n; r += 1)t[r] = 255 & e[r];
    return t;
}
function Z1(t) {
    if (t >= $1()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $1().toString(16) + " bytes");
    return 0 | t;
}
function tt1(t) {
    return +t != t && (t = 0), q1.alloc(+t);
}
function et1(t) {
    return !(null == t || !t._isBuffer);
}
function nt1(t, e) {
    if (et1(t)) return t.length;
    if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;
    "string" != typeof t && (t = "" + t);
    var n = t.length;
    if (0 === n) return 0;
    for(var r = !1;;)switch(e){
        case "ascii":
        case "latin1":
        case "binary":
            return n;
        case "utf8":
        case "utf-8":
        case void 0:
            return Ot(t).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return 2 * n;
        case "hex":
            return n >>> 1;
        case "base64":
            return Rt(t).length;
        default:
            if (r) return Ot(t).length;
            e = ("" + e).toLowerCase(), r = !0;
    }
}
function rt1(t, e, n) {
    var r = !1;
    if ((void 0 === e || e < 0) && (e = 0), e > this.length) return "";
    if ((void 0 === n || n > this.length) && (n = this.length), n <= 0) return "";
    if ((n >>>= 0) <= (e >>>= 0)) return "";
    for(t || (t = "utf8");;)switch(t){
        case "hex":
            return yt(this, e, n);
        case "utf8":
        case "utf-8":
            return pt(this, e, n);
        case "ascii":
            return gt(this, e, n);
        case "latin1":
        case "binary":
            return _t(this, e, n);
        case "base64":
            return dt1(this, e, n);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return wt(this, e, n);
        default:
            if (r) throw new TypeError("Unknown encoding: " + t);
            t = (t + "").toLowerCase(), r = !0;
    }
}
function it1(t, e, n) {
    var r = t[e];
    t[e] = t[n], t[n] = r;
}
function ot(t, e, n, r, i) {
    if (0 === t.length) return -1;
    if ("string" == typeof n ? (r = n, n = 0) : n > 2147483647 ? n = 2147483647 : n < -2147483648 && (n = -2147483648), n = +n, isNaN(n) && (n = i ? 0 : t.length - 1), n < 0 && (n = t.length + n), n >= t.length) {
        if (i) return -1;
        n = t.length - 1;
    } else if (n < 0) {
        if (!i) return -1;
        n = 0;
    }
    if ("string" == typeof e && (e = q1.from(e, r)), et1(e)) return 0 === e.length ? -1 : at1(t, e, n, r, i);
    if ("number" == typeof e) return e &= 255, q1.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(t, e, n) : Uint8Array.prototype.lastIndexOf.call(t, e, n) : at1(t, [
        e
    ], n, r, i);
    throw new TypeError("val must be string, number or Buffer");
}
function at1(t, e, n, r, i) {
    var o, a = 1, s = t.length, u = e.length;
    if (void 0 !== r && ("ucs2" === (r = String(r).toLowerCase()) || "ucs-2" === r || "utf16le" === r || "utf-16le" === r)) {
        if (t.length < 2 || e.length < 2) return -1;
        a = 2, s /= 2, u /= 2, n /= 2;
    }
    function f(t, e) {
        return 1 === a ? t[e] : t.readUInt16BE(e * a);
    }
    if (i) {
        var c = -1;
        for(o = n; o < s; o++)if (f(t, o) === f(e, -1 === c ? 0 : o - c)) {
            if (-1 === c && (c = o), o - c + 1 === u) return c * a;
        } else -1 !== c && (o -= o - c), c = -1;
    } else for(n + u > s && (n = s - u), o = n; o >= 0; o--){
        for(var h = !0, l = 0; l < u; l++)if (f(t, o + l) !== f(e, l)) {
            h = !1;
            break;
        }
        if (h) return o;
    }
    return -1;
}
function st(t, e, n, r) {
    n = Number(n) || 0;
    var i = t.length - n;
    r ? (r = Number(r)) > i && (r = i) : r = i;
    var o = e.length;
    if (o % 2 != 0) throw new TypeError("Invalid hex string");
    r > o / 2 && (r = o / 2);
    for(var a = 0; a < r; ++a){
        var s = parseInt(e.substr(2 * a, 2), 16);
        if (isNaN(s)) return a;
        t[n + a] = s;
    }
    return a;
}
function ut(t, e, n, r) {
    return Pt(Ot(e, t.length - n), t, n, r);
}
function ft1(t, e, n, r) {
    return Pt(function(t) {
        for(var e = [], n = 0; n < t.length; ++n)e.push(255 & t.charCodeAt(n));
        return e;
    }(e), t, n, r);
}
function ct1(t, e, n, r) {
    return ft1(t, e, n, r);
}
function ht(t, e, n, r) {
    return Pt(Rt(e), t, n, r);
}
function lt(t, e, n, r) {
    return Pt(function(t, e) {
        for(var n, r, i, o = [], a = 0; a < t.length && !((e -= 2) < 0); ++a)r = (n = t.charCodeAt(a)) >> 8, i = n % 256, o.push(i), o.push(r);
        return o;
    }(e, t.length - n), t, n, r);
}
function dt1(t, e, n) {
    return 0 === e && n === t.length ? j1(t) : j1(t.slice(e, n));
}
function pt(t, e, n) {
    n = Math.min(t.length, n);
    for(var r = [], i = e; i < n;){
        var o, a, s, u, f = t[i], c = null, h = f > 239 ? 4 : f > 223 ? 3 : f > 191 ? 2 : 1;
        if (i + h <= n) switch(h){
            case 1:
                f < 128 && (c = f);
                break;
            case 2:
                128 == (192 & (o = t[i + 1])) && (u = (31 & f) << 6 | 63 & o) > 127 && (c = u);
                break;
            case 3:
                o = t[i + 1], a = t[i + 2], 128 == (192 & o) && 128 == (192 & a) && (u = (15 & f) << 12 | (63 & o) << 6 | 63 & a) > 2047 && (u < 55296 || u > 57343) && (c = u);
                break;
            case 4:
                o = t[i + 1], a = t[i + 2], s = t[i + 3], 128 == (192 & o) && 128 == (192 & a) && 128 == (192 & s) && (u = (15 & f) << 18 | (63 & o) << 12 | (63 & a) << 6 | 63 & s) > 65535 && u < 1114112 && (c = u);
        }
        null === c ? (c = 65533, h = 1) : c > 65535 && (c -= 65536, r.push(c >>> 10 & 1023 | 55296), c = 56320 | 1023 & c), r.push(c), i += h;
    }
    return function(t) {
        var e = t.length;
        if (e <= bt) return String.fromCharCode.apply(String, t);
        var n = "", r = 0;
        for(; r < e;)n += String.fromCharCode.apply(String, t.slice(r, r += bt));
        return n;
    }(r);
}
q1.poolSize = 8192, q1._augment = function(t) {
    return t.__proto__ = q1.prototype, t;
}, q1.from = function(t, e, n) {
    return z2(null, t, e, n);
}, q1.TYPED_ARRAY_SUPPORT && (q1.prototype.__proto__ = Uint8Array.prototype, q1.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && q1[Symbol.species]), q1.alloc = function(t, e, n) {
    return function(t, e, n, r) {
        return X1(e), e <= 0 ? V1(t, e) : void 0 !== n ? "string" == typeof r ? V1(t, e).fill(n, r) : V1(t, e).fill(n) : V1(t, e);
    }(null, t, e, n);
}, q1.allocUnsafe = function(t) {
    return W1(null, t);
}, q1.allocUnsafeSlow = function(t) {
    return W1(null, t);
}, q1.isBuffer = Bt, q1.compare = function(t, e) {
    if (!et1(t) || !et1(e)) throw new TypeError("Arguments must be Buffers");
    if (t === e) return 0;
    for(var n = t.length, r = e.length, i = 0, o = Math.min(n, r); i < o; ++i)if (t[i] !== e[i]) {
        n = t[i], r = e[i];
        break;
    }
    return n < r ? -1 : r < n ? 1 : 0;
}, q1.isEncoding = function(t) {
    switch(String(t).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return !0;
        default:
            return !1;
    }
}, q1.concat = function(t, e) {
    if (!K2(t)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (0 === t.length) return q1.alloc(0);
    var n;
    if (void 0 === e) for(e = 0, n = 0; n < t.length; ++n)e += t[n].length;
    var r = q1.allocUnsafe(e), i = 0;
    for(n = 0; n < t.length; ++n){
        var o = t[n];
        if (!et1(o)) throw new TypeError('"list" argument must be an Array of Buffers');
        o.copy(r, i), i += o.length;
    }
    return r;
}, q1.byteLength = nt1, q1.prototype._isBuffer = !0, q1.prototype.swap16 = function() {
    var t = this.length;
    if (t % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var e = 0; e < t; e += 2)it1(this, e, e + 1);
    return this;
}, q1.prototype.swap32 = function() {
    var t = this.length;
    if (t % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var e = 0; e < t; e += 4)it1(this, e, e + 3), it1(this, e + 1, e + 2);
    return this;
}, q1.prototype.swap64 = function() {
    var t = this.length;
    if (t % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var e = 0; e < t; e += 8)it1(this, e, e + 7), it1(this, e + 1, e + 6), it1(this, e + 2, e + 5), it1(this, e + 3, e + 4);
    return this;
}, q1.prototype.toString = function() {
    var t = 0 | this.length;
    return 0 === t ? "" : 0 === arguments.length ? pt(this, 0, t) : rt1.apply(this, arguments);
}, q1.prototype.equals = function(t) {
    if (!et1(t)) throw new TypeError("Argument must be a Buffer");
    return this === t || 0 === q1.compare(this, t);
}, q1.prototype.inspect = function() {
    var t = "";
    return this.length > 0 && (t = this.toString("hex", 0, 50).match(/.{2}/g).join(" "), this.length > 50 && (t += " ... ")), "<Buffer " + t + ">";
}, q1.prototype.compare = function(t, e, n, r, i) {
    if (!et1(t)) throw new TypeError("Argument must be a Buffer");
    if (void 0 === e && (e = 0), void 0 === n && (n = t ? t.length : 0), void 0 === r && (r = 0), void 0 === i && (i = this.length), e < 0 || n > t.length || r < 0 || i > this.length) throw new RangeError("out of range index");
    if (r >= i && e >= n) return 0;
    if (r >= i) return -1;
    if (e >= n) return 1;
    if (this === t) return 0;
    for(var o = (i >>>= 0) - (r >>>= 0), a = (n >>>= 0) - (e >>>= 0), s = Math.min(o, a), u = this.slice(r, i), f = t.slice(e, n), c = 0; c < s; ++c)if (u[c] !== f[c]) {
        o = u[c], a = f[c];
        break;
    }
    return o < a ? -1 : a < o ? 1 : 0;
}, q1.prototype.includes = function(t, e, n) {
    return -1 !== this.indexOf(t, e, n);
}, q1.prototype.indexOf = function(t, e, n) {
    return ot(this, t, e, n, !0);
}, q1.prototype.lastIndexOf = function(t, e, n) {
    return ot(this, t, e, n, !1);
}, q1.prototype.write = function(t, e, n, r) {
    if (void 0 === e) r = "utf8", n = this.length, e = 0;
    else if (void 0 === n && "string" == typeof e) r = e, n = this.length, e = 0;
    else {
        if (!isFinite(e)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
        e |= 0, isFinite(n) ? (n |= 0, void 0 === r && (r = "utf8")) : (r = n, n = void 0);
    }
    var i = this.length - e;
    if ((void 0 === n || n > i) && (n = i), t.length > 0 && (n < 0 || e < 0) || e > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    r || (r = "utf8");
    for(var o = !1;;)switch(r){
        case "hex":
            return st(this, t, e, n);
        case "utf8":
        case "utf-8":
            return ut(this, t, e, n);
        case "ascii":
            return ft1(this, t, e, n);
        case "latin1":
        case "binary":
            return ct1(this, t, e, n);
        case "base64":
            return ht(this, t, e, n);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return lt(this, t, e, n);
        default:
            if (o) throw new TypeError("Unknown encoding: " + r);
            r = ("" + r).toLowerCase(), o = !0;
    }
}, q1.prototype.toJSON = function() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
var bt = 4096;
function gt(t, e, n) {
    var r = "";
    n = Math.min(t.length, n);
    for(var i = e; i < n; ++i)r += String.fromCharCode(127 & t[i]);
    return r;
}
function _t(t, e, n) {
    var r = "";
    n = Math.min(t.length, n);
    for(var i = e; i < n; ++i)r += String.fromCharCode(t[i]);
    return r;
}
function yt(t, e, n) {
    var r = t.length;
    (!e || e < 0) && (e = 0), (!n || n < 0 || n > r) && (n = r);
    for(var i = "", o = e; o < n; ++o)i += Ut(t[o]);
    return i;
}
function wt(t, e, n) {
    for(var r = t.slice(e, n), i = "", o = 0; o < r.length; o += 2)i += String.fromCharCode(r[o] + 256 * r[o + 1]);
    return i;
}
function Et(t, e, n) {
    if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");
    if (t + e > n) throw new RangeError("Trying to access beyond buffer length");
}
function vt(t, e, n, r, i, o) {
    if (!et1(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (e > i || e < o) throw new RangeError('"value" argument is out of bounds');
    if (n + r > t.length) throw new RangeError("Index out of range");
}
function Tt(t, e, n, r) {
    e < 0 && (e = 65535 + e + 1);
    for(var i = 0, o = Math.min(t.length - n, 2); i < o; ++i)t[n + i] = (e & 255 << 8 * (r ? i : 1 - i)) >>> 8 * (r ? i : 1 - i);
}
function mt(t, e, n, r) {
    e < 0 && (e = 4294967295 + e + 1);
    for(var i = 0, o = Math.min(t.length - n, 4); i < o; ++i)t[n + i] = e >>> 8 * (r ? i : 3 - i) & 255;
}
function At(t, e, n, r, i, o) {
    if (n + r > t.length) throw new RangeError("Index out of range");
    if (n < 0) throw new RangeError("Index out of range");
}
function Ct(t, e, n, r, i) {
    return i || At(t, 0, n, 4), x2(t, e, n, r, 23, 4), n + 4;
}
function It(t, e, n, r, i) {
    return i || At(t, 0, n, 8), x2(t, e, n, r, 52, 8), n + 8;
}
q1.prototype.slice = function(t, e) {
    var n, r = this.length;
    if ((t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), (e = void 0 === e ? r : ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), e < t && (e = t), q1.TYPED_ARRAY_SUPPORT) (n = this.subarray(t, e)).__proto__ = q1.prototype;
    else {
        var i = e - t;
        n = new q1(i, void 0);
        for(var o = 0; o < i; ++o)n[o] = this[o + t];
    }
    return n;
}, q1.prototype.readUIntLE = function(t, e, n) {
    t |= 0, e |= 0, n || Et(t, e, this.length);
    for(var r = this[t], i = 1, o = 0; ++o < e && (i *= 256);)r += this[t + o] * i;
    return r;
}, q1.prototype.readUIntBE = function(t, e, n) {
    t |= 0, e |= 0, n || Et(t, e, this.length);
    for(var r = this[t + --e], i = 1; e > 0 && (i *= 256);)r += this[t + --e] * i;
    return r;
}, q1.prototype.readUInt8 = function(t, e) {
    return e || Et(t, 1, this.length), this[t];
}, q1.prototype.readUInt16LE = function(t, e) {
    return e || Et(t, 2, this.length), this[t] | this[t + 1] << 8;
}, q1.prototype.readUInt16BE = function(t, e) {
    return e || Et(t, 2, this.length), this[t] << 8 | this[t + 1];
}, q1.prototype.readUInt32LE = function(t, e) {
    return e || Et(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3];
}, q1.prototype.readUInt32BE = function(t, e) {
    return e || Et(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
}, q1.prototype.readIntLE = function(t, e, n) {
    t |= 0, e |= 0, n || Et(t, e, this.length);
    for(var r = this[t], i = 1, o = 0; ++o < e && (i *= 256);)r += this[t + o] * i;
    return r >= (i *= 128) && (r -= Math.pow(2, 8 * e)), r;
}, q1.prototype.readIntBE = function(t, e, n) {
    t |= 0, e |= 0, n || Et(t, e, this.length);
    for(var r = e, i = 1, o = this[t + --r]; r > 0 && (i *= 256);)o += this[t + --r] * i;
    return o >= (i *= 128) && (o -= Math.pow(2, 8 * e)), o;
}, q1.prototype.readInt8 = function(t, e) {
    return e || Et(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t];
}, q1.prototype.readInt16LE = function(t, e) {
    e || Et(t, 2, this.length);
    var n = this[t] | this[t + 1] << 8;
    return 32768 & n ? 4294901760 | n : n;
}, q1.prototype.readInt16BE = function(t, e) {
    e || Et(t, 2, this.length);
    var n = this[t + 1] | this[t] << 8;
    return 32768 & n ? 4294901760 | n : n;
}, q1.prototype.readInt32LE = function(t, e) {
    return e || Et(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
}, q1.prototype.readInt32BE = function(t, e) {
    return e || Et(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
}, q1.prototype.readFloatLE = function(t, e) {
    return e || Et(t, 4, this.length), k1(this, t, !0, 23, 4);
}, q1.prototype.readFloatBE = function(t, e) {
    return e || Et(t, 4, this.length), k1(this, t, !1, 23, 4);
}, q1.prototype.readDoubleLE = function(t, e) {
    return e || Et(t, 8, this.length), k1(this, t, !0, 52, 8);
}, q1.prototype.readDoubleBE = function(t, e) {
    return e || Et(t, 8, this.length), k1(this, t, !1, 52, 8);
}, q1.prototype.writeUIntLE = function(t, e, n, r) {
    (t = +t, e |= 0, n |= 0, r) || vt(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
    var i = 1, o = 0;
    for(this[e] = 255 & t; ++o < n && (i *= 256);)this[e + o] = t / i & 255;
    return e + n;
}, q1.prototype.writeUIntBE = function(t, e, n, r) {
    (t = +t, e |= 0, n |= 0, r) || vt(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
    var i = n - 1, o = 1;
    for(this[e + i] = 255 & t; --i >= 0 && (o *= 256);)this[e + i] = t / o & 255;
    return e + n;
}, q1.prototype.writeUInt8 = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 1, 255, 0), q1.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), this[e] = 255 & t, e + 1;
}, q1.prototype.writeUInt16LE = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 2, 65535, 0), q1.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : Tt(this, t, e, !0), e + 2;
}, q1.prototype.writeUInt16BE = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 2, 65535, 0), q1.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : Tt(this, t, e, !1), e + 2;
}, q1.prototype.writeUInt32LE = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 4, 4294967295, 0), q1.TYPED_ARRAY_SUPPORT ? (this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, this[e] = 255 & t) : mt(this, t, e, !0), e + 4;
}, q1.prototype.writeUInt32BE = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 4, 4294967295, 0), q1.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : mt(this, t, e, !1), e + 4;
}, q1.prototype.writeIntLE = function(t, e, n, r) {
    if (t = +t, e |= 0, !r) {
        var i = Math.pow(2, 8 * n - 1);
        vt(this, t, e, n, i - 1, -i);
    }
    var o = 0, a = 1, s = 0;
    for(this[e] = 255 & t; ++o < n && (a *= 256);)t < 0 && 0 === s && 0 !== this[e + o - 1] && (s = 1), this[e + o] = (t / a >> 0) - s & 255;
    return e + n;
}, q1.prototype.writeIntBE = function(t, e, n, r) {
    if (t = +t, e |= 0, !r) {
        var i = Math.pow(2, 8 * n - 1);
        vt(this, t, e, n, i - 1, -i);
    }
    var o = n - 1, a = 1, s = 0;
    for(this[e + o] = 255 & t; --o >= 0 && (a *= 256);)t < 0 && 0 === s && 0 !== this[e + o + 1] && (s = 1), this[e + o] = (t / a >> 0) - s & 255;
    return e + n;
}, q1.prototype.writeInt8 = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 1, 127, -128), q1.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1;
}, q1.prototype.writeInt16LE = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 2, 32767, -32768), q1.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : Tt(this, t, e, !0), e + 2;
}, q1.prototype.writeInt16BE = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 2, 32767, -32768), q1.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : Tt(this, t, e, !1), e + 2;
}, q1.prototype.writeInt32LE = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 4, 2147483647, -2147483648), q1.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, this[e + 3] = t >>> 24) : mt(this, t, e, !0), e + 4;
}, q1.prototype.writeInt32BE = function(t, e, n) {
    return t = +t, e |= 0, n || vt(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), q1.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : mt(this, t, e, !1), e + 4;
}, q1.prototype.writeFloatLE = function(t, e, n) {
    return Ct(this, t, e, !0, n);
}, q1.prototype.writeFloatBE = function(t, e, n) {
    return Ct(this, t, e, !1, n);
}, q1.prototype.writeDoubleLE = function(t, e, n) {
    return It(this, t, e, !0, n);
}, q1.prototype.writeDoubleBE = function(t, e, n) {
    return It(this, t, e, !1, n);
}, q1.prototype.copy = function(t, e, n, r) {
    if (n || (n = 0), r || 0 === r || (r = this.length), e >= t.length && (e = t.length), e || (e = 0), r > 0 && r < n && (r = n), r === n) return 0;
    if (0 === t.length || 0 === this.length) return 0;
    if (e < 0) throw new RangeError("targetStart out of bounds");
    if (n < 0 || n >= this.length) throw new RangeError("sourceStart out of bounds");
    if (r < 0) throw new RangeError("sourceEnd out of bounds");
    r > this.length && (r = this.length), t.length - e < r - n && (r = t.length - e + n);
    var i, o = r - n;
    if (this === t && n < e && e < r) for(i = o - 1; i >= 0; --i)t[i + e] = this[i + n];
    else if (o < 1e3 || !q1.TYPED_ARRAY_SUPPORT) for(i = 0; i < o; ++i)t[i + e] = this[i + n];
    else Uint8Array.prototype.set.call(t, this.subarray(n, n + o), e);
    return o;
}, q1.prototype.fill = function(t, e, n, r) {
    if ("string" == typeof t) {
        if ("string" == typeof e ? (r = e, e = 0, n = this.length) : "string" == typeof n && (r = n, n = this.length), 1 === t.length) {
            var i = t.charCodeAt(0);
            i < 256 && (t = i);
        }
        if (void 0 !== r && "string" != typeof r) throw new TypeError("encoding must be a string");
        if ("string" == typeof r && !q1.isEncoding(r)) throw new TypeError("Unknown encoding: " + r);
    } else "number" == typeof t && (t &= 255);
    if (e < 0 || this.length < e || this.length < n) throw new RangeError("Out of range index");
    if (n <= e) return this;
    var o;
    if (e >>>= 0, n = void 0 === n ? this.length : n >>> 0, t || (t = 0), "number" == typeof t) for(o = e; o < n; ++o)this[o] = t;
    else {
        var a = et1(t) ? t : Ot(new q1(t, r).toString()), s = a.length;
        for(o = 0; o < n - e; ++o)this[o + e] = a[o % s];
    }
    return this;
};
var Nt = /[^+\/0-9A-Za-z-_]/g;
function Ut(t) {
    return t < 16 ? "0" + t.toString(16) : t.toString(16);
}
function Ot(t, e) {
    var n;
    e = e || 1 / 0;
    for(var r = t.length, i = null, o = [], a = 0; a < r; ++a){
        if ((n = t.charCodeAt(a)) > 55295 && n < 57344) {
            if (!i) {
                if (n > 56319) {
                    (e -= 3) > -1 && o.push(239, 191, 189);
                    continue;
                }
                if (a + 1 === r) {
                    (e -= 3) > -1 && o.push(239, 191, 189);
                    continue;
                }
                i = n;
                continue;
            }
            if (n < 56320) {
                (e -= 3) > -1 && o.push(239, 191, 189), i = n;
                continue;
            }
            n = 65536 + (i - 55296 << 10 | n - 56320);
        } else i && (e -= 3) > -1 && o.push(239, 191, 189);
        if (i = null, n < 128) {
            if ((e -= 1) < 0) break;
            o.push(n);
        } else if (n < 2048) {
            if ((e -= 2) < 0) break;
            o.push(n >> 6 | 192, 63 & n | 128);
        } else if (n < 65536) {
            if ((e -= 3) < 0) break;
            o.push(n >> 12 | 224, n >> 6 & 63 | 128, 63 & n | 128);
        } else {
            if (!(n < 1114112)) throw new Error("Invalid code point");
            if ((e -= 4) < 0) break;
            o.push(n >> 18 | 240, n >> 12 & 63 | 128, n >> 6 & 63 | 128, 63 & n | 128);
        }
    }
    return o;
}
function Rt(t) {
    return function(t) {
        var e, n, r, i, o, a;
        F1 || M1();
        var s = t.length;
        if (s % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
        o = "=" === t[s - 2] ? 2 : "=" === t[s - 1] ? 1 : 0, a = new L1(3 * s / 4 - o), r = o > 0 ? s - 4 : s;
        var u = 0;
        for(e = 0, n = 0; e < r; e += 4, n += 3)i = H1[t.charCodeAt(e)] << 18 | H1[t.charCodeAt(e + 1)] << 12 | H1[t.charCodeAt(e + 2)] << 6 | H1[t.charCodeAt(e + 3)], a[u++] = i >> 16 & 255, a[u++] = i >> 8 & 255, a[u++] = 255 & i;
        return 2 === o ? (i = H1[t.charCodeAt(e)] << 2 | H1[t.charCodeAt(e + 1)] >> 4, a[u++] = 255 & i) : 1 === o && (i = H1[t.charCodeAt(e)] << 10 | H1[t.charCodeAt(e + 1)] << 4 | H1[t.charCodeAt(e + 2)] >> 2, a[u++] = i >> 8 & 255, a[u++] = 255 & i), a;
    }(function(t) {
        if ((t = (function(t) {
            return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
        })(t).replace(Nt, "")).length < 2) return "";
        for(; t.length % 4 != 0;)t += "=";
        return t;
    }(t));
}
function Pt(t, e, n, r) {
    for(var i = 0; i < r && !(i + n >= e.length || i >= t.length); ++i)e[i + n] = t[i];
    return i;
}
function Bt(t) {
    return null != t && (!!t._isBuffer || St(t) || function(t) {
        return "function" == typeof t.readFloatLE && "function" == typeof t.slice && St(t.slice(0, 0));
    }(t));
}
function St(t) {
    return !!t.constructor && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t);
}
var Dt = {
    Buffer: q1,
    INSPECT_MAX_BYTES: 50,
    SlowBuffer: tt1,
    isBuffer: Bt,
    kMaxLength: $1
}, Ht = i3(Object.freeze({
    __proto__: null,
    Buffer: q1,
    INSPECT_MAX_BYTES: 50,
    SlowBuffer: tt1,
    isBuffer: Bt,
    kMaxLength: Q1,
    default: Dt
}));
Object.defineProperty(B1, "__esModule", {
    value: !0
}), B1.roundBuffer = B1.verifyBeacon = B1.verifySigOnG1 = void 0;
const Lt = null, Ft = null, Yt = Ht, jt = o4;
async function kt(t, e, n, r = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_") {
    const i = (o = n) instanceof null.bls12_381.G2.ProjectivePoint ? o : null.bls12_381.G2.ProjectivePoint.fromHex(o);
    var o;
    const a = function(t, e) {
        return t instanceof null.bls12_381.G1.ProjectivePoint ? t : null.bls12_381.G1.hashToCurve((0, null.ensureBytes)("point", t), {
            DST: e
        });
    }(e, r), s = null.bls12_381.G2.ProjectivePoint.BASE, u = function(t) {
        return t instanceof null.bls12_381.G1.ProjectivePoint ? t : null.bls12_381.G1.ProjectivePoint.fromHex(t);
    }(t), f = null.bls12_381.pairing(a, i.negate(), !0), c = null.bls12_381.pairing(u, s, !0), h = null.bls12_381.fields.Fp12.mul(c, f);
    return null.bls12_381.fields.Fp12.eql(h, null.bls12_381.fields.Fp12.ONE);
}
async function xt(t) {
    return (0, null.sha256)(Kt(t.round));
}
function Gt(t) {
    return Yt.Buffer.from(t, "hex");
}
function Kt(t) {
    const e = Yt.Buffer.alloc(8);
    return e.writeBigUInt64BE(BigInt(t)), e;
}
B1.verifyBeacon = async function(t, e, n) {
    const r = t.public_key;
    return e.round !== n ? (console.error("round was not the expected round"), !1) : await async function(t) {
        const e = (0, Ft.sha256)(Yt.Buffer.from(t.signature, "hex"));
        return 0 == Yt.Buffer.from(t.randomness, "hex").compare(e);
    }(e) ? (0, jt.isChainedBeacon)(e, t) ? Lt.bls12_381.verify(e.signature, await async function(t) {
        const e = Yt.Buffer.concat([
            Gt(t.previous_signature),
            Kt(t.round)
        ]);
        return (0, Ft.sha256)(e);
    }(e), r) : (0, jt.isUnchainedBeacon)(e, t) ? Lt.bls12_381.verify(e.signature, await xt(e), r) : (0, jt.isG1G2SwappedBeacon)(e, t) ? kt(e.signature, await xt(e), r) : (0, jt.isG1Rfc9380)(e, t) ? kt(e.signature, await xt(e), r, "BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_") : (console.error(`Beacon type ${t.schemeID} was not supported or the beacon was not of the purported type`), !1) : (console.error("randomness did not match the signature"), !1);
}, B1.verifySigOnG1 = kt, B1.roundBuffer = Kt;
var Qt = {};
!function(t) {
    var e = r5 && r5.__importDefault || function(t) {
        return t && t.__esModule ? t : {
            default: t
        };
    };
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.testnetQuicknetClient = t.testnetDefaultClient = t.fastnetClient = t.quicknetClient = t.defaultClient = t.TESTNET_QUICKNET_CHAIN_INFO = t.TESTNET_QUICKNET_CHAIN_URL = t.TESTNET_DEFAULT_CHAIN_INFO = t.TESTNET_DEFAULT_CHAIN_URL = t.FASTNET_CHAIN_INFO = t.FASTNET_CHAIN_URL = t.QUICKNET_CHAIN_INFO = t.QUICKNET_CHAIN_URL = t.DEFAULT_CHAIN_INFO = t.DEFAULT_CHAIN_URL = void 0;
    const n = o4, i = e(l3), s = e(a3);
    t.DEFAULT_CHAIN_URL = "https://api.drand.sh", t.DEFAULT_CHAIN_INFO = {
        public_key: "868f005eb8e6e4ca0a47c8a77ceaa5309a47978a7c71bc5cce96366b5d7a569937c529eeda66c7293784a9402801af31",
        period: 30,
        genesis_time: 1595431050,
        hash: "8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce",
        groupHash: "176f93498eac9ca337150b46d21dd58673ea4e3581185f869672e59fa4cb390a",
        schemeID: "pedersen-bls-chained",
        metadata: {
            beaconID: "default"
        }
    }, t.QUICKNET_CHAIN_URL = "https://api.drand.sh/52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971", t.QUICKNET_CHAIN_INFO = {
        public_key: "83cf0f2896adee7eb8b5f01fcad3912212c437e0073e911fb90022d3e760183c8c4b450b6a0a6c3ac6a5776a2d1064510d1fec758c921cc22b0e17e63aaf4bcb5ed66304de9cf809bd274ca73bab4af5a6e9c76a4bc09e76eae8991ef5ece45a",
        period: 3,
        genesis_time: 1692803367,
        hash: "52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971",
        groupHash: "f477d5c89f21a17c863a7f937c6a6d15859414d2be09cd448d4279af331c5d3e",
        schemeID: "bls-unchained-g1-rfc9380",
        metadata: {
            beaconID: "quicknet"
        }
    }, t.FASTNET_CHAIN_URL = "https://api.drand.sh/dbd506d6ef76e5f386f41c651dcb808c5bcbd75471cc4eafa3f4df7ad4e4c493", t.FASTNET_CHAIN_INFO = {
        hash: "dbd506d6ef76e5f386f41c651dcb808c5bcbd75471cc4eafa3f4df7ad4e4c493",
        public_key: "a0b862a7527fee3a731bcb59280ab6abd62d5c0b6ea03dc4ddf6612fdfc9d01f01c31542541771903475eb1ec6615f8d0df0b8b6dce385811d6dcf8cbefb8759e5e616a3dfd054c928940766d9a5b9db91e3b697e5d70a975181e007f87fca5e",
        period: 3,
        genesis_time: 1677685200,
        groupHash: "a81e9d63f614ccdb144b8ff79fbd4d5a2d22055c0bfe4ee9a8092003dab1c6c0",
        schemeID: "bls-unchained-on-g1",
        metadata: {
            beaconID: "fastnet"
        }
    }, t.TESTNET_DEFAULT_CHAIN_URL = "https://pl-us.testnet.drand.sh", t.TESTNET_DEFAULT_CHAIN_INFO = {
        public_key: "922a2e93828ff83345bae533f5172669a26c02dc76d6bf59c80892e12ab1455c229211886f35bb56af6d5bea981024df",
        period: 25,
        genesis_time: 1590445175,
        hash: "84b2234fb34e835dccd048255d7ad3194b81af7d978c3bf157e3469592ae4e02",
        groupHash: "4dd408e5fdff9323c76a9b6f087ba8fdc5a6da907bd9217d9d10f2287d081957",
        schemeID: "pedersen-bls-chained",
        metadata: {
            beaconID: "default"
        }
    }, t.TESTNET_QUICKNET_CHAIN_URL = "https://pl-us.testnet.drand.sh/cc9c398442737cbd141526600919edd69f1d6f9b4adb67e4d912fbc64341a9a5", t.TESTNET_QUICKNET_CHAIN_INFO = {
        public_key: "b15b65b46fb29104f6a4b5d1e11a8da6344463973d423661bb0804846a0ecd1ef93c25057f1c0baab2ac53e56c662b66072f6d84ee791a3382bfb055afab1e6a375538d8ffc451104ac971d2dc9b168e2d3246b0be2015969cbaac298f6502da",
        period: 3,
        genesis_time: 1689232296,
        hash: "cc9c398442737cbd141526600919edd69f1d6f9b4adb67e4d912fbc64341a9a5",
        groupHash: "40d49d910472d4adb1d67f65db8332f11b4284eecf05c05c5eacd5eef7d40e2d",
        schemeID: "bls-unchained-g1-rfc9380",
        metadata: {
            beaconID: "quicknet-t"
        }
    }, t.defaultClient = function() {
        const e = {
            ...n.defaultChainOptions,
            chainVerificationParams: {
                chainHash: t.DEFAULT_CHAIN_INFO.hash,
                publicKey: t.DEFAULT_CHAIN_INFO.public_key
            }
        }, r = new s.default(t.DEFAULT_CHAIN_URL, e);
        return new i.default(r, e);
    }, t.quicknetClient = function() {
        const e = {
            ...n.defaultChainOptions,
            chainVerificationParams: {
                chainHash: t.QUICKNET_CHAIN_INFO.hash,
                publicKey: t.QUICKNET_CHAIN_INFO.public_key
            }
        }, r = new s.default(t.QUICKNET_CHAIN_URL, e);
        return new i.default(r, e);
    }, t.fastnetClient = function() {
        const e = {
            ...n.defaultChainOptions,
            chainVerificationParams: {
                chainHash: t.FASTNET_CHAIN_INFO.hash,
                publicKey: t.FASTNET_CHAIN_INFO.public_key
            }
        }, r = new s.default(t.FASTNET_CHAIN_URL, e);
        return new i.default(r, e);
    }, t.testnetDefaultClient = function() {
        const e = {
            ...n.defaultChainOptions,
            chainVerificationParams: {
                chainHash: t.TESTNET_DEFAULT_CHAIN_INFO.hash,
                publicKey: t.TESTNET_DEFAULT_CHAIN_INFO.public_key
            }
        }, r = new s.default(t.TESTNET_DEFAULT_CHAIN_URL, e);
        return new i.default(r, e);
    }, t.testnetQuicknetClient = function() {
        const e = {
            ...n.defaultChainOptions,
            chainVerificationParams: {
                chainHash: t.TESTNET_QUICKNET_CHAIN_INFO.hash,
                publicKey: t.TESTNET_QUICKNET_CHAIN_INFO.public_key
            }
        }, r = new s.default(t.TESTNET_QUICKNET_CHAIN_URL, e);
        return new i.default(r, e);
    };
}(Qt), function(t) {
    var e = r5 && r5.__importDefault || function(t) {
        return t && t.__esModule ? t : {
            default: t
        };
    };
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.testnetQuicknetClient = t.testnetDefaultClient = t.fastnetClient = t.quicknetClient = t.defaultClient = t.roundTime = t.roundAt = t.FastestNodeClient = t.MultiBeaconNode = t.HttpCachingChain = t.HttpChainClient = t.HttpChain = t.isG1Rfc9380 = t.isG1G2SwappedBeacon = t.isUnchainedBeacon = t.isChainedBeacon = t.watch = t.fetchBeaconByTime = t.fetchBeacon = t.defaultChainOptions = void 0;
    const n = e(a3);
    t.HttpCachingChain = n.default;
    const i = a3;
    Object.defineProperty(t, "HttpChain", {
        enumerable: !0,
        get: function() {
            return i.HttpChain;
        }
    });
    const o = e(l3);
    t.HttpChainClient = o.default;
    const u = e(g2);
    t.FastestNodeClient = u.default;
    const f = e(N14);
    t.MultiBeaconNode = f.default;
    const c = s4;
    Object.defineProperty(t, "roundAt", {
        enumerable: !0,
        get: function() {
            return c.roundAt;
        }
    }), Object.defineProperty(t, "roundTime", {
        enumerable: !0,
        get: function() {
            return c.roundTime;
        }
    });
    const h = B1, d = Qt;
    async function p(t, e) {
        if (e || (e = (0, c.roundAt)(Date.now(), await t.chain().info())), e < 1) throw Error("Cannot request lower than round number 1");
        const n = await t.get(e);
        return _(t, n, e);
    }
    Object.defineProperty(t, "defaultClient", {
        enumerable: !0,
        get: function() {
            return d.defaultClient;
        }
    }), Object.defineProperty(t, "fastnetClient", {
        enumerable: !0,
        get: function() {
            return d.fastnetClient;
        }
    }), Object.defineProperty(t, "quicknetClient", {
        enumerable: !0,
        get: function() {
            return d.quicknetClient;
        }
    }), Object.defineProperty(t, "testnetDefaultClient", {
        enumerable: !0,
        get: function() {
            return d.testnetDefaultClient;
        }
    }), Object.defineProperty(t, "testnetQuicknetClient", {
        enumerable: !0,
        get: function() {
            return d.testnetQuicknetClient;
        }
    }), t.defaultChainOptions = {
        disableBeaconVerification: !1,
        noCache: !1
    }, t.fetchBeacon = p, t.fetchBeaconByTime = async function(t, e) {
        const n = await t.chain().info();
        return p(t, (0, c.roundAt)(e, n));
    }, t.watch = async function*(t, e, n = b) {
        const r = await t.chain().info();
        let i = (0, c.roundAt)(Date.now(), r);
        for(; !e.signal.aborted;){
            const e = Date.now();
            await (0, c.sleep)((0, c.roundTime)(r, i) - e);
            const o = await (0, c.retryOnError)(async ()=>t.get(i), n.retriesOnFailure);
            yield _(t, o, i), i += 1;
        }
    };
    const b = {
        retriesOnFailure: 3
    };
    async function _(t, e, n) {
        if (t.options.disableBeaconVerification) return e;
        const r = await t.chain().info();
        if (!await (0, h.verifyBeacon)(r, e, n)) throw Error("The beacon retrieved was not valid!");
        return e;
    }
    t.isChainedBeacon = function(t, e) {
        return "pedersen-bls-chained" === e.schemeID && !!t.previous_signature && !!t.randomness && !!t.signature && t.round > 0;
    }, t.isUnchainedBeacon = function(t, e) {
        return "pedersen-bls-unchained" === e.schemeID && !!t.randomness && !!t.signature && void 0 === t.previous_signature && t.round > 0;
    }, t.isG1G2SwappedBeacon = function(t, e) {
        return "bls-unchained-on-g1" === e.schemeID && !!t.randomness && !!t.signature && void 0 === t.previous_signature && t.round > 0;
    }, t.isG1Rfc9380 = function(t, e) {
        return "bls-unchained-g1-rfc9380" === e.schemeID && !!t.randomness && !!t.signature && void 0 === t.previous_signature && t.round > 0;
    };
}(o4);
var $t = o4.FastestNodeClient, Vt = o4.HttpCachingChain, qt = o4.HttpChain, zt = o4.HttpChainClient, Xt = o4.MultiBeaconNode, Wt = o4.__esModule, Jt = o4.defaultChainOptions, Zt = o4.defaultClient, te1 = o4.fastnetClient, ee1 = o4.fetchBeacon, ne1 = o4.fetchBeaconByTime, re1 = o4.isChainedBeacon, ie1 = o4.isG1G2SwappedBeacon, oe1 = o4.isG1Rfc9380, ae1 = o4.isUnchainedBeacon, se1 = o4.quicknetClient, ue1 = o4.roundAt, fe1 = o4.roundTime, ce1 = o4.testnetDefaultClient, he1 = o4.testnetQuicknetClient, le1 = o4.watch;
export { encodeHex as encodeHex };
export { decodeBase64 as decodeBase64 };
export { decode as decodeVarint };
export { retry as retry };
export { ethers as ethers };
export { CarBlockIterator as CarBlockIterator };
export { UnsupportedHashError as UnsupportedHashError, HashMismatchError as HashMismatchError, validateBlock as validateBlock };
export { ne1 as fetchBeaconByTime, zt as HttpChainClient, Vt as HttpCachingChain };
